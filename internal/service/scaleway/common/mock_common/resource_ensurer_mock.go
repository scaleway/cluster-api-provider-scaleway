// Code generated by MockGen. DO NOT EDIT.
// Source: ../resource_ensurer.go
//
// Generated by this command:
//
//	mockgen -destination resource_ensurer_mock.go -package mock_common -source ../resource_ensurer.go -typed
//

// Package mock_common is a generated GoMock package.
package mock_common

import (
	context "context"
	reflect "reflect"

	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceReconciler is a mock of ResourceReconciler interface.
type MockResourceReconciler[D any, R any] struct {
	ctrl     *gomock.Controller
	recorder *MockResourceReconcilerMockRecorder[D, R]
	isgomock struct{}
}

// MockResourceReconcilerMockRecorder is the mock recorder for MockResourceReconciler.
type MockResourceReconcilerMockRecorder[D any, R any] struct {
	mock *MockResourceReconciler[D, R]
}

// NewMockResourceReconciler creates a new mock instance.
func NewMockResourceReconciler[D any, R any](ctrl *gomock.Controller) *MockResourceReconciler[D, R] {
	mock := &MockResourceReconciler[D, R]{ctrl: ctrl}
	mock.recorder = &MockResourceReconcilerMockRecorder[D, R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceReconciler[D, R]) EXPECT() *MockResourceReconcilerMockRecorder[D, R] {
	return m.recorder
}

// CreateResource mocks base method.
func (m *MockResourceReconciler[D, R]) CreateResource(ctx context.Context, zone scw.Zone, name string, desired D) (R, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", ctx, zone, name, desired)
	ret0, _ := ret[0].(R)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockResourceReconcilerMockRecorder[D, R]) CreateResource(ctx, zone, name, desired any) *MockResourceReconcilerCreateResourceCall[D, R] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockResourceReconciler[D, R])(nil).CreateResource), ctx, zone, name, desired)
	return &MockResourceReconcilerCreateResourceCall[D, R]{Call: call}
}

// MockResourceReconcilerCreateResourceCall wrap *gomock.Call
type MockResourceReconcilerCreateResourceCall[D any, R any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceReconcilerCreateResourceCall[D, R]) Return(arg0 R, arg1 error) *MockResourceReconcilerCreateResourceCall[D, R] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceReconcilerCreateResourceCall[D, R]) Do(f func(context.Context, scw.Zone, string, D) (R, error)) *MockResourceReconcilerCreateResourceCall[D, R] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceReconcilerCreateResourceCall[D, R]) DoAndReturn(f func(context.Context, scw.Zone, string, D) (R, error)) *MockResourceReconcilerCreateResourceCall[D, R] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteResource mocks base method.
func (m *MockResourceReconciler[D, R]) DeleteResource(ctx context.Context, resource R) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockResourceReconcilerMockRecorder[D, R]) DeleteResource(ctx, resource any) *MockResourceReconcilerDeleteResourceCall[D, R] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockResourceReconciler[D, R])(nil).DeleteResource), ctx, resource)
	return &MockResourceReconcilerDeleteResourceCall[D, R]{Call: call}
}

// MockResourceReconcilerDeleteResourceCall wrap *gomock.Call
type MockResourceReconcilerDeleteResourceCall[D any, R any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceReconcilerDeleteResourceCall[D, R]) Return(arg0 error) *MockResourceReconcilerDeleteResourceCall[D, R] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceReconcilerDeleteResourceCall[D, R]) Do(f func(context.Context, R) error) *MockResourceReconcilerDeleteResourceCall[D, R] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceReconcilerDeleteResourceCall[D, R]) DoAndReturn(f func(context.Context, R) error) *MockResourceReconcilerDeleteResourceCall[D, R] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDesiredResourceName mocks base method.
func (m *MockResourceReconciler[D, R]) GetDesiredResourceName(i int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDesiredResourceName", i)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDesiredResourceName indicates an expected call of GetDesiredResourceName.
func (mr *MockResourceReconcilerMockRecorder[D, R]) GetDesiredResourceName(i any) *MockResourceReconcilerGetDesiredResourceNameCall[D, R] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDesiredResourceName", reflect.TypeOf((*MockResourceReconciler[D, R])(nil).GetDesiredResourceName), i)
	return &MockResourceReconcilerGetDesiredResourceNameCall[D, R]{Call: call}
}

// MockResourceReconcilerGetDesiredResourceNameCall wrap *gomock.Call
type MockResourceReconcilerGetDesiredResourceNameCall[D any, R any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceReconcilerGetDesiredResourceNameCall[D, R]) Return(arg0 string) *MockResourceReconcilerGetDesiredResourceNameCall[D, R] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceReconcilerGetDesiredResourceNameCall[D, R]) Do(f func(int) string) *MockResourceReconcilerGetDesiredResourceNameCall[D, R] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceReconcilerGetDesiredResourceNameCall[D, R]) DoAndReturn(f func(int) string) *MockResourceReconcilerGetDesiredResourceNameCall[D, R] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDesiredZone mocks base method.
func (m *MockResourceReconciler[D, R]) GetDesiredZone(desired D) (scw.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDesiredZone", desired)
	ret0, _ := ret[0].(scw.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDesiredZone indicates an expected call of GetDesiredZone.
func (mr *MockResourceReconcilerMockRecorder[D, R]) GetDesiredZone(desired any) *MockResourceReconcilerGetDesiredZoneCall[D, R] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDesiredZone", reflect.TypeOf((*MockResourceReconciler[D, R])(nil).GetDesiredZone), desired)
	return &MockResourceReconcilerGetDesiredZoneCall[D, R]{Call: call}
}

// MockResourceReconcilerGetDesiredZoneCall wrap *gomock.Call
type MockResourceReconcilerGetDesiredZoneCall[D any, R any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceReconcilerGetDesiredZoneCall[D, R]) Return(arg0 scw.Zone, arg1 error) *MockResourceReconcilerGetDesiredZoneCall[D, R] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceReconcilerGetDesiredZoneCall[D, R]) Do(f func(D) (scw.Zone, error)) *MockResourceReconcilerGetDesiredZoneCall[D, R] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceReconcilerGetDesiredZoneCall[D, R]) DoAndReturn(f func(D) (scw.Zone, error)) *MockResourceReconcilerGetDesiredZoneCall[D, R] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResourceName mocks base method.
func (m *MockResourceReconciler[D, R]) GetResourceName(resource R) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceName", resource)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourceName indicates an expected call of GetResourceName.
func (mr *MockResourceReconcilerMockRecorder[D, R]) GetResourceName(resource any) *MockResourceReconcilerGetResourceNameCall[D, R] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceName", reflect.TypeOf((*MockResourceReconciler[D, R])(nil).GetResourceName), resource)
	return &MockResourceReconcilerGetResourceNameCall[D, R]{Call: call}
}

// MockResourceReconcilerGetResourceNameCall wrap *gomock.Call
type MockResourceReconcilerGetResourceNameCall[D any, R any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceReconcilerGetResourceNameCall[D, R]) Return(arg0 string) *MockResourceReconcilerGetResourceNameCall[D, R] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceReconcilerGetResourceNameCall[D, R]) Do(f func(R) string) *MockResourceReconcilerGetResourceNameCall[D, R] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceReconcilerGetResourceNameCall[D, R]) DoAndReturn(f func(R) string) *MockResourceReconcilerGetResourceNameCall[D, R] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResourceZone mocks base method.
func (m *MockResourceReconciler[D, R]) GetResourceZone(resource R) scw.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceZone", resource)
	ret0, _ := ret[0].(scw.Zone)
	return ret0
}

// GetResourceZone indicates an expected call of GetResourceZone.
func (mr *MockResourceReconcilerMockRecorder[D, R]) GetResourceZone(resource any) *MockResourceReconcilerGetResourceZoneCall[D, R] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceZone", reflect.TypeOf((*MockResourceReconciler[D, R])(nil).GetResourceZone), resource)
	return &MockResourceReconcilerGetResourceZoneCall[D, R]{Call: call}
}

// MockResourceReconcilerGetResourceZoneCall wrap *gomock.Call
type MockResourceReconcilerGetResourceZoneCall[D any, R any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceReconcilerGetResourceZoneCall[D, R]) Return(arg0 scw.Zone) *MockResourceReconcilerGetResourceZoneCall[D, R] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceReconcilerGetResourceZoneCall[D, R]) Do(f func(R) scw.Zone) *MockResourceReconcilerGetResourceZoneCall[D, R] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceReconcilerGetResourceZoneCall[D, R]) DoAndReturn(f func(R) scw.Zone) *MockResourceReconcilerGetResourceZoneCall[D, R] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResources mocks base method.
func (m *MockResourceReconciler[D, R]) ListResources(ctx context.Context) ([]R, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", ctx)
	ret0, _ := ret[0].([]R)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockResourceReconcilerMockRecorder[D, R]) ListResources(ctx any) *MockResourceReconcilerListResourcesCall[D, R] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockResourceReconciler[D, R])(nil).ListResources), ctx)
	return &MockResourceReconcilerListResourcesCall[D, R]{Call: call}
}

// MockResourceReconcilerListResourcesCall wrap *gomock.Call
type MockResourceReconcilerListResourcesCall[D any, R any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceReconcilerListResourcesCall[D, R]) Return(arg0 []R, arg1 error) *MockResourceReconcilerListResourcesCall[D, R] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceReconcilerListResourcesCall[D, R]) Do(f func(context.Context) ([]R, error)) *MockResourceReconcilerListResourcesCall[D, R] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceReconcilerListResourcesCall[D, R]) DoAndReturn(f func(context.Context) ([]R, error)) *MockResourceReconcilerListResourcesCall[D, R] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShouldKeepResource mocks base method.
func (m *MockResourceReconciler[D, R]) ShouldKeepResource(ctx context.Context, resource R, desired D) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldKeepResource", ctx, resource, desired)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldKeepResource indicates an expected call of ShouldKeepResource.
func (mr *MockResourceReconcilerMockRecorder[D, R]) ShouldKeepResource(ctx, resource, desired any) *MockResourceReconcilerShouldKeepResourceCall[D, R] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldKeepResource", reflect.TypeOf((*MockResourceReconciler[D, R])(nil).ShouldKeepResource), ctx, resource, desired)
	return &MockResourceReconcilerShouldKeepResourceCall[D, R]{Call: call}
}

// MockResourceReconcilerShouldKeepResourceCall wrap *gomock.Call
type MockResourceReconcilerShouldKeepResourceCall[D any, R any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceReconcilerShouldKeepResourceCall[D, R]) Return(arg0 bool, arg1 error) *MockResourceReconcilerShouldKeepResourceCall[D, R] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceReconcilerShouldKeepResourceCall[D, R]) Do(f func(context.Context, R, D) (bool, error)) *MockResourceReconcilerShouldKeepResourceCall[D, R] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceReconcilerShouldKeepResourceCall[D, R]) DoAndReturn(f func(context.Context, R, D) (bool, error)) *MockResourceReconcilerShouldKeepResourceCall[D, R] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateResource mocks base method.
func (m *MockResourceReconciler[D, R]) UpdateResource(ctx context.Context, resource R, desired D) (R, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", ctx, resource, desired)
	ret0, _ := ret[0].(R)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockResourceReconcilerMockRecorder[D, R]) UpdateResource(ctx, resource, desired any) *MockResourceReconcilerUpdateResourceCall[D, R] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockResourceReconciler[D, R])(nil).UpdateResource), ctx, resource, desired)
	return &MockResourceReconcilerUpdateResourceCall[D, R]{Call: call}
}

// MockResourceReconcilerUpdateResourceCall wrap *gomock.Call
type MockResourceReconcilerUpdateResourceCall[D any, R any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceReconcilerUpdateResourceCall[D, R]) Return(arg0 R, arg1 error) *MockResourceReconcilerUpdateResourceCall[D, R] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceReconcilerUpdateResourceCall[D, R]) Do(f func(context.Context, R, D) (R, error)) *MockResourceReconcilerUpdateResourceCall[D, R] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceReconcilerUpdateResourceCall[D, R]) DoAndReturn(f func(context.Context, R, D) (R, error)) *MockResourceReconcilerUpdateResourceCall[D, R] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
