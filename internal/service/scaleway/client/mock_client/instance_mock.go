// Code generated by MockGen. DO NOT EDIT.
// Source: ../instance.go
//
// Generated by this command:
//
//	mockgen -destination instance_mock.go -package mock_client -source ../instance.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	io "io"
	reflect "reflect"

	instance "github.com/scaleway/scaleway-sdk-go/api/instance/v1"
	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanceAPI is a mock of InstanceAPI interface.
type MockInstanceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceAPIMockRecorder
	isgomock struct{}
}

// MockInstanceAPIMockRecorder is the mock recorder for MockInstanceAPI.
type MockInstanceAPIMockRecorder struct {
	mock *MockInstanceAPI
}

// NewMockInstanceAPI creates a new mock instance.
func NewMockInstanceAPI(ctrl *gomock.Controller) *MockInstanceAPI {
	mock := &MockInstanceAPI{ctrl: ctrl}
	mock.recorder = &MockInstanceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceAPI) EXPECT() *MockInstanceAPIMockRecorder {
	return m.recorder
}

// CreateIP mocks base method.
func (m *MockInstanceAPI) CreateIP(req *instance.CreateIPRequest, opts ...scw.RequestOption) (*instance.CreateIPResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIP", varargs...)
	ret0, _ := ret[0].(*instance.CreateIPResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIP indicates an expected call of CreateIP.
func (mr *MockInstanceAPIMockRecorder) CreateIP(req any, opts ...any) *MockInstanceAPICreateIPCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIP", reflect.TypeOf((*MockInstanceAPI)(nil).CreateIP), varargs...)
	return &MockInstanceAPICreateIPCall{Call: call}
}

// MockInstanceAPICreateIPCall wrap *gomock.Call
type MockInstanceAPICreateIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPICreateIPCall) Return(arg0 *instance.CreateIPResponse, arg1 error) *MockInstanceAPICreateIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPICreateIPCall) Do(f func(*instance.CreateIPRequest, ...scw.RequestOption) (*instance.CreateIPResponse, error)) *MockInstanceAPICreateIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPICreateIPCall) DoAndReturn(f func(*instance.CreateIPRequest, ...scw.RequestOption) (*instance.CreateIPResponse, error)) *MockInstanceAPICreateIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePrivateNIC mocks base method.
func (m *MockInstanceAPI) CreatePrivateNIC(req *instance.CreatePrivateNICRequest, opts ...scw.RequestOption) (*instance.CreatePrivateNICResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePrivateNIC", varargs...)
	ret0, _ := ret[0].(*instance.CreatePrivateNICResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateNIC indicates an expected call of CreatePrivateNIC.
func (mr *MockInstanceAPIMockRecorder) CreatePrivateNIC(req any, opts ...any) *MockInstanceAPICreatePrivateNICCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateNIC", reflect.TypeOf((*MockInstanceAPI)(nil).CreatePrivateNIC), varargs...)
	return &MockInstanceAPICreatePrivateNICCall{Call: call}
}

// MockInstanceAPICreatePrivateNICCall wrap *gomock.Call
type MockInstanceAPICreatePrivateNICCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPICreatePrivateNICCall) Return(arg0 *instance.CreatePrivateNICResponse, arg1 error) *MockInstanceAPICreatePrivateNICCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPICreatePrivateNICCall) Do(f func(*instance.CreatePrivateNICRequest, ...scw.RequestOption) (*instance.CreatePrivateNICResponse, error)) *MockInstanceAPICreatePrivateNICCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPICreatePrivateNICCall) DoAndReturn(f func(*instance.CreatePrivateNICRequest, ...scw.RequestOption) (*instance.CreatePrivateNICResponse, error)) *MockInstanceAPICreatePrivateNICCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateServer mocks base method.
func (m *MockInstanceAPI) CreateServer(req *instance.CreateServerRequest, opts ...scw.RequestOption) (*instance.CreateServerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServer", varargs...)
	ret0, _ := ret[0].(*instance.CreateServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockInstanceAPIMockRecorder) CreateServer(req any, opts ...any) *MockInstanceAPICreateServerCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockInstanceAPI)(nil).CreateServer), varargs...)
	return &MockInstanceAPICreateServerCall{Call: call}
}

// MockInstanceAPICreateServerCall wrap *gomock.Call
type MockInstanceAPICreateServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPICreateServerCall) Return(arg0 *instance.CreateServerResponse, arg1 error) *MockInstanceAPICreateServerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPICreateServerCall) Do(f func(*instance.CreateServerRequest, ...scw.RequestOption) (*instance.CreateServerResponse, error)) *MockInstanceAPICreateServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPICreateServerCall) DoAndReturn(f func(*instance.CreateServerRequest, ...scw.RequestOption) (*instance.CreateServerResponse, error)) *MockInstanceAPICreateServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteIP mocks base method.
func (m *MockInstanceAPI) DeleteIP(req *instance.DeleteIPRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIP", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIP indicates an expected call of DeleteIP.
func (mr *MockInstanceAPIMockRecorder) DeleteIP(req any, opts ...any) *MockInstanceAPIDeleteIPCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIP", reflect.TypeOf((*MockInstanceAPI)(nil).DeleteIP), varargs...)
	return &MockInstanceAPIDeleteIPCall{Call: call}
}

// MockInstanceAPIDeleteIPCall wrap *gomock.Call
type MockInstanceAPIDeleteIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIDeleteIPCall) Return(arg0 error) *MockInstanceAPIDeleteIPCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIDeleteIPCall) Do(f func(*instance.DeleteIPRequest, ...scw.RequestOption) error) *MockInstanceAPIDeleteIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIDeleteIPCall) DoAndReturn(f func(*instance.DeleteIPRequest, ...scw.RequestOption) error) *MockInstanceAPIDeleteIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteServer mocks base method.
func (m *MockInstanceAPI) DeleteServer(req *instance.DeleteServerRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServer", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockInstanceAPIMockRecorder) DeleteServer(req any, opts ...any) *MockInstanceAPIDeleteServerCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockInstanceAPI)(nil).DeleteServer), varargs...)
	return &MockInstanceAPIDeleteServerCall{Call: call}
}

// MockInstanceAPIDeleteServerCall wrap *gomock.Call
type MockInstanceAPIDeleteServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIDeleteServerCall) Return(arg0 error) *MockInstanceAPIDeleteServerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIDeleteServerCall) Do(f func(*instance.DeleteServerRequest, ...scw.RequestOption) error) *MockInstanceAPIDeleteServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIDeleteServerCall) DoAndReturn(f func(*instance.DeleteServerRequest, ...scw.RequestOption) error) *MockInstanceAPIDeleteServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteServerUserData mocks base method.
func (m *MockInstanceAPI) DeleteServerUserData(req *instance.DeleteServerUserDataRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServerUserData", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerUserData indicates an expected call of DeleteServerUserData.
func (mr *MockInstanceAPIMockRecorder) DeleteServerUserData(req any, opts ...any) *MockInstanceAPIDeleteServerUserDataCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerUserData", reflect.TypeOf((*MockInstanceAPI)(nil).DeleteServerUserData), varargs...)
	return &MockInstanceAPIDeleteServerUserDataCall{Call: call}
}

// MockInstanceAPIDeleteServerUserDataCall wrap *gomock.Call
type MockInstanceAPIDeleteServerUserDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIDeleteServerUserDataCall) Return(arg0 error) *MockInstanceAPIDeleteServerUserDataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIDeleteServerUserDataCall) Do(f func(*instance.DeleteServerUserDataRequest, ...scw.RequestOption) error) *MockInstanceAPIDeleteServerUserDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIDeleteServerUserDataCall) DoAndReturn(f func(*instance.DeleteServerUserDataRequest, ...scw.RequestOption) error) *MockInstanceAPIDeleteServerUserDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteVolume mocks base method.
func (m *MockInstanceAPI) DeleteVolume(req *instance.DeleteVolumeRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVolume", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockInstanceAPIMockRecorder) DeleteVolume(req any, opts ...any) *MockInstanceAPIDeleteVolumeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockInstanceAPI)(nil).DeleteVolume), varargs...)
	return &MockInstanceAPIDeleteVolumeCall{Call: call}
}

// MockInstanceAPIDeleteVolumeCall wrap *gomock.Call
type MockInstanceAPIDeleteVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIDeleteVolumeCall) Return(arg0 error) *MockInstanceAPIDeleteVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIDeleteVolumeCall) Do(f func(*instance.DeleteVolumeRequest, ...scw.RequestOption) error) *MockInstanceAPIDeleteVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIDeleteVolumeCall) DoAndReturn(f func(*instance.DeleteVolumeRequest, ...scw.RequestOption) error) *MockInstanceAPIDeleteVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachVolume mocks base method.
func (m *MockInstanceAPI) DetachVolume(req *instance.DetachVolumeRequest, opts ...scw.RequestOption) (*instance.DetachVolumeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachVolume", varargs...)
	ret0, _ := ret[0].(*instance.DetachVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachVolume indicates an expected call of DetachVolume.
func (mr *MockInstanceAPIMockRecorder) DetachVolume(req any, opts ...any) *MockInstanceAPIDetachVolumeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume", reflect.TypeOf((*MockInstanceAPI)(nil).DetachVolume), varargs...)
	return &MockInstanceAPIDetachVolumeCall{Call: call}
}

// MockInstanceAPIDetachVolumeCall wrap *gomock.Call
type MockInstanceAPIDetachVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIDetachVolumeCall) Return(arg0 *instance.DetachVolumeResponse, arg1 error) *MockInstanceAPIDetachVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIDetachVolumeCall) Do(f func(*instance.DetachVolumeRequest, ...scw.RequestOption) (*instance.DetachVolumeResponse, error)) *MockInstanceAPIDetachVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIDetachVolumeCall) DoAndReturn(f func(*instance.DetachVolumeRequest, ...scw.RequestOption) (*instance.DetachVolumeResponse, error)) *MockInstanceAPIDetachVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllServerUserData mocks base method.
func (m *MockInstanceAPI) GetAllServerUserData(req *instance.GetAllServerUserDataRequest, opts ...scw.RequestOption) (*instance.GetAllServerUserDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllServerUserData", varargs...)
	ret0, _ := ret[0].(*instance.GetAllServerUserDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServerUserData indicates an expected call of GetAllServerUserData.
func (mr *MockInstanceAPIMockRecorder) GetAllServerUserData(req any, opts ...any) *MockInstanceAPIGetAllServerUserDataCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServerUserData", reflect.TypeOf((*MockInstanceAPI)(nil).GetAllServerUserData), varargs...)
	return &MockInstanceAPIGetAllServerUserDataCall{Call: call}
}

// MockInstanceAPIGetAllServerUserDataCall wrap *gomock.Call
type MockInstanceAPIGetAllServerUserDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIGetAllServerUserDataCall) Return(arg0 *instance.GetAllServerUserDataResponse, arg1 error) *MockInstanceAPIGetAllServerUserDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIGetAllServerUserDataCall) Do(f func(*instance.GetAllServerUserDataRequest, ...scw.RequestOption) (*instance.GetAllServerUserDataResponse, error)) *MockInstanceAPIGetAllServerUserDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIGetAllServerUserDataCall) DoAndReturn(f func(*instance.GetAllServerUserDataRequest, ...scw.RequestOption) (*instance.GetAllServerUserDataResponse, error)) *MockInstanceAPIGetAllServerUserDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetServerType mocks base method.
func (m *MockInstanceAPI) GetServerType(req *instance.GetServerTypeRequest) (*instance.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerType", req)
	ret0, _ := ret[0].(*instance.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerType indicates an expected call of GetServerType.
func (mr *MockInstanceAPIMockRecorder) GetServerType(req any) *MockInstanceAPIGetServerTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerType", reflect.TypeOf((*MockInstanceAPI)(nil).GetServerType), req)
	return &MockInstanceAPIGetServerTypeCall{Call: call}
}

// MockInstanceAPIGetServerTypeCall wrap *gomock.Call
type MockInstanceAPIGetServerTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIGetServerTypeCall) Return(arg0 *instance.ServerType, arg1 error) *MockInstanceAPIGetServerTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIGetServerTypeCall) Do(f func(*instance.GetServerTypeRequest) (*instance.ServerType, error)) *MockInstanceAPIGetServerTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIGetServerTypeCall) DoAndReturn(f func(*instance.GetServerTypeRequest) (*instance.ServerType, error)) *MockInstanceAPIGetServerTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListIPs mocks base method.
func (m *MockInstanceAPI) ListIPs(req *instance.ListIPsRequest, opts ...scw.RequestOption) (*instance.ListIPsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIPs", varargs...)
	ret0, _ := ret[0].(*instance.ListIPsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPs indicates an expected call of ListIPs.
func (mr *MockInstanceAPIMockRecorder) ListIPs(req any, opts ...any) *MockInstanceAPIListIPsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPs", reflect.TypeOf((*MockInstanceAPI)(nil).ListIPs), varargs...)
	return &MockInstanceAPIListIPsCall{Call: call}
}

// MockInstanceAPIListIPsCall wrap *gomock.Call
type MockInstanceAPIListIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIListIPsCall) Return(arg0 *instance.ListIPsResponse, arg1 error) *MockInstanceAPIListIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIListIPsCall) Do(f func(*instance.ListIPsRequest, ...scw.RequestOption) (*instance.ListIPsResponse, error)) *MockInstanceAPIListIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIListIPsCall) DoAndReturn(f func(*instance.ListIPsRequest, ...scw.RequestOption) (*instance.ListIPsResponse, error)) *MockInstanceAPIListIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListImages mocks base method.
func (m *MockInstanceAPI) ListImages(req *instance.ListImagesRequest, opts ...scw.RequestOption) (*instance.ListImagesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImages", varargs...)
	ret0, _ := ret[0].(*instance.ListImagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockInstanceAPIMockRecorder) ListImages(req any, opts ...any) *MockInstanceAPIListImagesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockInstanceAPI)(nil).ListImages), varargs...)
	return &MockInstanceAPIListImagesCall{Call: call}
}

// MockInstanceAPIListImagesCall wrap *gomock.Call
type MockInstanceAPIListImagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIListImagesCall) Return(arg0 *instance.ListImagesResponse, arg1 error) *MockInstanceAPIListImagesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIListImagesCall) Do(f func(*instance.ListImagesRequest, ...scw.RequestOption) (*instance.ListImagesResponse, error)) *MockInstanceAPIListImagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIListImagesCall) DoAndReturn(f func(*instance.ListImagesRequest, ...scw.RequestOption) (*instance.ListImagesResponse, error)) *MockInstanceAPIListImagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPlacementGroups mocks base method.
func (m *MockInstanceAPI) ListPlacementGroups(req *instance.ListPlacementGroupsRequest, opts ...scw.RequestOption) (*instance.ListPlacementGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlacementGroups", varargs...)
	ret0, _ := ret[0].(*instance.ListPlacementGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlacementGroups indicates an expected call of ListPlacementGroups.
func (mr *MockInstanceAPIMockRecorder) ListPlacementGroups(req any, opts ...any) *MockInstanceAPIListPlacementGroupsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlacementGroups", reflect.TypeOf((*MockInstanceAPI)(nil).ListPlacementGroups), varargs...)
	return &MockInstanceAPIListPlacementGroupsCall{Call: call}
}

// MockInstanceAPIListPlacementGroupsCall wrap *gomock.Call
type MockInstanceAPIListPlacementGroupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIListPlacementGroupsCall) Return(arg0 *instance.ListPlacementGroupsResponse, arg1 error) *MockInstanceAPIListPlacementGroupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIListPlacementGroupsCall) Do(f func(*instance.ListPlacementGroupsRequest, ...scw.RequestOption) (*instance.ListPlacementGroupsResponse, error)) *MockInstanceAPIListPlacementGroupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIListPlacementGroupsCall) DoAndReturn(f func(*instance.ListPlacementGroupsRequest, ...scw.RequestOption) (*instance.ListPlacementGroupsResponse, error)) *MockInstanceAPIListPlacementGroupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListSecurityGroups mocks base method.
func (m *MockInstanceAPI) ListSecurityGroups(req *instance.ListSecurityGroupsRequest, opts ...scw.RequestOption) (*instance.ListSecurityGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityGroups", varargs...)
	ret0, _ := ret[0].(*instance.ListSecurityGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroups indicates an expected call of ListSecurityGroups.
func (mr *MockInstanceAPIMockRecorder) ListSecurityGroups(req any, opts ...any) *MockInstanceAPIListSecurityGroupsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroups", reflect.TypeOf((*MockInstanceAPI)(nil).ListSecurityGroups), varargs...)
	return &MockInstanceAPIListSecurityGroupsCall{Call: call}
}

// MockInstanceAPIListSecurityGroupsCall wrap *gomock.Call
type MockInstanceAPIListSecurityGroupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIListSecurityGroupsCall) Return(arg0 *instance.ListSecurityGroupsResponse, arg1 error) *MockInstanceAPIListSecurityGroupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIListSecurityGroupsCall) Do(f func(*instance.ListSecurityGroupsRequest, ...scw.RequestOption) (*instance.ListSecurityGroupsResponse, error)) *MockInstanceAPIListSecurityGroupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIListSecurityGroupsCall) DoAndReturn(f func(*instance.ListSecurityGroupsRequest, ...scw.RequestOption) (*instance.ListSecurityGroupsResponse, error)) *MockInstanceAPIListSecurityGroupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListServers mocks base method.
func (m *MockInstanceAPI) ListServers(req *instance.ListServersRequest, opts ...scw.RequestOption) (*instance.ListServersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListServers", varargs...)
	ret0, _ := ret[0].(*instance.ListServersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServers indicates an expected call of ListServers.
func (mr *MockInstanceAPIMockRecorder) ListServers(req any, opts ...any) *MockInstanceAPIListServersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockInstanceAPI)(nil).ListServers), varargs...)
	return &MockInstanceAPIListServersCall{Call: call}
}

// MockInstanceAPIListServersCall wrap *gomock.Call
type MockInstanceAPIListServersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIListServersCall) Return(arg0 *instance.ListServersResponse, arg1 error) *MockInstanceAPIListServersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIListServersCall) Do(f func(*instance.ListServersRequest, ...scw.RequestOption) (*instance.ListServersResponse, error)) *MockInstanceAPIListServersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIListServersCall) DoAndReturn(f func(*instance.ListServersRequest, ...scw.RequestOption) (*instance.ListServersResponse, error)) *MockInstanceAPIListServersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVolumes mocks base method.
func (m *MockInstanceAPI) ListVolumes(req *instance.ListVolumesRequest, opts ...scw.RequestOption) (*instance.ListVolumesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVolumes", varargs...)
	ret0, _ := ret[0].(*instance.ListVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockInstanceAPIMockRecorder) ListVolumes(req any, opts ...any) *MockInstanceAPIListVolumesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockInstanceAPI)(nil).ListVolumes), varargs...)
	return &MockInstanceAPIListVolumesCall{Call: call}
}

// MockInstanceAPIListVolumesCall wrap *gomock.Call
type MockInstanceAPIListVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIListVolumesCall) Return(arg0 *instance.ListVolumesResponse, arg1 error) *MockInstanceAPIListVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIListVolumesCall) Do(f func(*instance.ListVolumesRequest, ...scw.RequestOption) (*instance.ListVolumesResponse, error)) *MockInstanceAPIListVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIListVolumesCall) DoAndReturn(f func(*instance.ListVolumesRequest, ...scw.RequestOption) (*instance.ListVolumesResponse, error)) *MockInstanceAPIListVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerAction mocks base method.
func (m *MockInstanceAPI) ServerAction(req *instance.ServerActionRequest, opts ...scw.RequestOption) (*instance.ServerActionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServerAction", varargs...)
	ret0, _ := ret[0].(*instance.ServerActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerAction indicates an expected call of ServerAction.
func (mr *MockInstanceAPIMockRecorder) ServerAction(req any, opts ...any) *MockInstanceAPIServerActionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerAction", reflect.TypeOf((*MockInstanceAPI)(nil).ServerAction), varargs...)
	return &MockInstanceAPIServerActionCall{Call: call}
}

// MockInstanceAPIServerActionCall wrap *gomock.Call
type MockInstanceAPIServerActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIServerActionCall) Return(arg0 *instance.ServerActionResponse, arg1 error) *MockInstanceAPIServerActionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIServerActionCall) Do(f func(*instance.ServerActionRequest, ...scw.RequestOption) (*instance.ServerActionResponse, error)) *MockInstanceAPIServerActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIServerActionCall) DoAndReturn(f func(*instance.ServerActionRequest, ...scw.RequestOption) (*instance.ServerActionResponse, error)) *MockInstanceAPIServerActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetServerUserData mocks base method.
func (m *MockInstanceAPI) SetServerUserData(req *instance.SetServerUserDataRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetServerUserData", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServerUserData indicates an expected call of SetServerUserData.
func (mr *MockInstanceAPIMockRecorder) SetServerUserData(req any, opts ...any) *MockInstanceAPISetServerUserDataCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServerUserData", reflect.TypeOf((*MockInstanceAPI)(nil).SetServerUserData), varargs...)
	return &MockInstanceAPISetServerUserDataCall{Call: call}
}

// MockInstanceAPISetServerUserDataCall wrap *gomock.Call
type MockInstanceAPISetServerUserDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPISetServerUserDataCall) Return(arg0 error) *MockInstanceAPISetServerUserDataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPISetServerUserDataCall) Do(f func(*instance.SetServerUserDataRequest, ...scw.RequestOption) error) *MockInstanceAPISetServerUserDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPISetServerUserDataCall) DoAndReturn(f func(*instance.SetServerUserDataRequest, ...scw.RequestOption) error) *MockInstanceAPISetServerUserDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVolume mocks base method.
func (m *MockInstanceAPI) UpdateVolume(req *instance.UpdateVolumeRequest, opts ...scw.RequestOption) (*instance.UpdateVolumeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVolume", varargs...)
	ret0, _ := ret[0].(*instance.UpdateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockInstanceAPIMockRecorder) UpdateVolume(req any, opts ...any) *MockInstanceAPIUpdateVolumeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockInstanceAPI)(nil).UpdateVolume), varargs...)
	return &MockInstanceAPIUpdateVolumeCall{Call: call}
}

// MockInstanceAPIUpdateVolumeCall wrap *gomock.Call
type MockInstanceAPIUpdateVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIUpdateVolumeCall) Return(arg0 *instance.UpdateVolumeResponse, arg1 error) *MockInstanceAPIUpdateVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIUpdateVolumeCall) Do(f func(*instance.UpdateVolumeRequest, ...scw.RequestOption) (*instance.UpdateVolumeResponse, error)) *MockInstanceAPIUpdateVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIUpdateVolumeCall) DoAndReturn(f func(*instance.UpdateVolumeRequest, ...scw.RequestOption) (*instance.UpdateVolumeResponse, error)) *MockInstanceAPIUpdateVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Zones mocks base method.
func (m *MockInstanceAPI) Zones() []scw.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zones")
	ret0, _ := ret[0].([]scw.Zone)
	return ret0
}

// Zones indicates an expected call of Zones.
func (mr *MockInstanceAPIMockRecorder) Zones() *MockInstanceAPIZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zones", reflect.TypeOf((*MockInstanceAPI)(nil).Zones))
	return &MockInstanceAPIZonesCall{Call: call}
}

// MockInstanceAPIZonesCall wrap *gomock.Call
type MockInstanceAPIZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceAPIZonesCall) Return(arg0 []scw.Zone) *MockInstanceAPIZonesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceAPIZonesCall) Do(f func() []scw.Zone) *MockInstanceAPIZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceAPIZonesCall) DoAndReturn(f func() []scw.Zone) *MockInstanceAPIZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
	isgomock struct{}
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// CreateIP mocks base method.
func (m *MockInstance) CreateIP(ctx context.Context, zone scw.Zone, ipType instance.IPType, tags []string) (*instance.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIP", ctx, zone, ipType, tags)
	ret0, _ := ret[0].(*instance.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIP indicates an expected call of CreateIP.
func (mr *MockInstanceMockRecorder) CreateIP(ctx, zone, ipType, tags any) *MockInstanceCreateIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIP", reflect.TypeOf((*MockInstance)(nil).CreateIP), ctx, zone, ipType, tags)
	return &MockInstanceCreateIPCall{Call: call}
}

// MockInstanceCreateIPCall wrap *gomock.Call
type MockInstanceCreateIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceCreateIPCall) Return(arg0 *instance.IP, arg1 error) *MockInstanceCreateIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceCreateIPCall) Do(f func(context.Context, scw.Zone, instance.IPType, []string) (*instance.IP, error)) *MockInstanceCreateIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceCreateIPCall) DoAndReturn(f func(context.Context, scw.Zone, instance.IPType, []string) (*instance.IP, error)) *MockInstanceCreateIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePrivateNIC mocks base method.
func (m *MockInstance) CreatePrivateNIC(ctx context.Context, zone scw.Zone, serverID, privateNetworkID string) (*instance.PrivateNIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateNIC", ctx, zone, serverID, privateNetworkID)
	ret0, _ := ret[0].(*instance.PrivateNIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateNIC indicates an expected call of CreatePrivateNIC.
func (mr *MockInstanceMockRecorder) CreatePrivateNIC(ctx, zone, serverID, privateNetworkID any) *MockInstanceCreatePrivateNICCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateNIC", reflect.TypeOf((*MockInstance)(nil).CreatePrivateNIC), ctx, zone, serverID, privateNetworkID)
	return &MockInstanceCreatePrivateNICCall{Call: call}
}

// MockInstanceCreatePrivateNICCall wrap *gomock.Call
type MockInstanceCreatePrivateNICCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceCreatePrivateNICCall) Return(arg0 *instance.PrivateNIC, arg1 error) *MockInstanceCreatePrivateNICCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceCreatePrivateNICCall) Do(f func(context.Context, scw.Zone, string, string) (*instance.PrivateNIC, error)) *MockInstanceCreatePrivateNICCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceCreatePrivateNICCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*instance.PrivateNIC, error)) *MockInstanceCreatePrivateNICCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateServer mocks base method.
func (m *MockInstance) CreateServer(ctx context.Context, zone scw.Zone, name, commercialType, imageID string, placementGroupID, securityGroupID *string, rootVolumeSize scw.Size, rootVolumeType instance.VolumeVolumeType, publicIPs, tags []string) (*instance.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, zone, name, commercialType, imageID, placementGroupID, securityGroupID, rootVolumeSize, rootVolumeType, publicIPs, tags)
	ret0, _ := ret[0].(*instance.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockInstanceMockRecorder) CreateServer(ctx, zone, name, commercialType, imageID, placementGroupID, securityGroupID, rootVolumeSize, rootVolumeType, publicIPs, tags any) *MockInstanceCreateServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockInstance)(nil).CreateServer), ctx, zone, name, commercialType, imageID, placementGroupID, securityGroupID, rootVolumeSize, rootVolumeType, publicIPs, tags)
	return &MockInstanceCreateServerCall{Call: call}
}

// MockInstanceCreateServerCall wrap *gomock.Call
type MockInstanceCreateServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceCreateServerCall) Return(arg0 *instance.Server, arg1 error) *MockInstanceCreateServerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceCreateServerCall) Do(f func(context.Context, scw.Zone, string, string, string, *string, *string, scw.Size, instance.VolumeVolumeType, []string, []string) (*instance.Server, error)) *MockInstanceCreateServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceCreateServerCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, string, *string, *string, scw.Size, instance.VolumeVolumeType, []string, []string) (*instance.Server, error)) *MockInstanceCreateServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteIP mocks base method.
func (m *MockInstance) DeleteIP(ctx context.Context, zone scw.Zone, ipID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIP", ctx, zone, ipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIP indicates an expected call of DeleteIP.
func (mr *MockInstanceMockRecorder) DeleteIP(ctx, zone, ipID any) *MockInstanceDeleteIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIP", reflect.TypeOf((*MockInstance)(nil).DeleteIP), ctx, zone, ipID)
	return &MockInstanceDeleteIPCall{Call: call}
}

// MockInstanceDeleteIPCall wrap *gomock.Call
type MockInstanceDeleteIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceDeleteIPCall) Return(arg0 error) *MockInstanceDeleteIPCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceDeleteIPCall) Do(f func(context.Context, scw.Zone, string) error) *MockInstanceDeleteIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceDeleteIPCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockInstanceDeleteIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInstanceVolume mocks base method.
func (m *MockInstance) DeleteInstanceVolume(ctx context.Context, zone scw.Zone, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceVolume", ctx, zone, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceVolume indicates an expected call of DeleteInstanceVolume.
func (mr *MockInstanceMockRecorder) DeleteInstanceVolume(ctx, zone, volumeID any) *MockInstanceDeleteInstanceVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceVolume", reflect.TypeOf((*MockInstance)(nil).DeleteInstanceVolume), ctx, zone, volumeID)
	return &MockInstanceDeleteInstanceVolumeCall{Call: call}
}

// MockInstanceDeleteInstanceVolumeCall wrap *gomock.Call
type MockInstanceDeleteInstanceVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceDeleteInstanceVolumeCall) Return(arg0 error) *MockInstanceDeleteInstanceVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceDeleteInstanceVolumeCall) Do(f func(context.Context, scw.Zone, string) error) *MockInstanceDeleteInstanceVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceDeleteInstanceVolumeCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockInstanceDeleteInstanceVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteServer mocks base method.
func (m *MockInstance) DeleteServer(ctx context.Context, zone scw.Zone, serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", ctx, zone, serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockInstanceMockRecorder) DeleteServer(ctx, zone, serverID any) *MockInstanceDeleteServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockInstance)(nil).DeleteServer), ctx, zone, serverID)
	return &MockInstanceDeleteServerCall{Call: call}
}

// MockInstanceDeleteServerCall wrap *gomock.Call
type MockInstanceDeleteServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceDeleteServerCall) Return(arg0 error) *MockInstanceDeleteServerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceDeleteServerCall) Do(f func(context.Context, scw.Zone, string) error) *MockInstanceDeleteServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceDeleteServerCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockInstanceDeleteServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteServerUserData mocks base method.
func (m *MockInstance) DeleteServerUserData(ctx context.Context, zone scw.Zone, serverID, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerUserData", ctx, zone, serverID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerUserData indicates an expected call of DeleteServerUserData.
func (mr *MockInstanceMockRecorder) DeleteServerUserData(ctx, zone, serverID, key any) *MockInstanceDeleteServerUserDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerUserData", reflect.TypeOf((*MockInstance)(nil).DeleteServerUserData), ctx, zone, serverID, key)
	return &MockInstanceDeleteServerUserDataCall{Call: call}
}

// MockInstanceDeleteServerUserDataCall wrap *gomock.Call
type MockInstanceDeleteServerUserDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceDeleteServerUserDataCall) Return(arg0 error) *MockInstanceDeleteServerUserDataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceDeleteServerUserDataCall) Do(f func(context.Context, scw.Zone, string, string) error) *MockInstanceDeleteServerUserDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceDeleteServerUserDataCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) error) *MockInstanceDeleteServerUserDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachVolume mocks base method.
func (m *MockInstance) DetachVolume(ctx context.Context, zone scw.Zone, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolume", ctx, zone, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachVolume indicates an expected call of DetachVolume.
func (mr *MockInstanceMockRecorder) DetachVolume(ctx, zone, volumeID any) *MockInstanceDetachVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume", reflect.TypeOf((*MockInstance)(nil).DetachVolume), ctx, zone, volumeID)
	return &MockInstanceDetachVolumeCall{Call: call}
}

// MockInstanceDetachVolumeCall wrap *gomock.Call
type MockInstanceDetachVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceDetachVolumeCall) Return(arg0 error) *MockInstanceDetachVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceDetachVolumeCall) Do(f func(context.Context, scw.Zone, string) error) *MockInstanceDetachVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceDetachVolumeCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockInstanceDetachVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindIPs mocks base method.
func (m *MockInstance) FindIPs(ctx context.Context, zone scw.Zone, tags []string) ([]*instance.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIPs", ctx, zone, tags)
	ret0, _ := ret[0].([]*instance.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIPs indicates an expected call of FindIPs.
func (mr *MockInstanceMockRecorder) FindIPs(ctx, zone, tags any) *MockInstanceFindIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIPs", reflect.TypeOf((*MockInstance)(nil).FindIPs), ctx, zone, tags)
	return &MockInstanceFindIPsCall{Call: call}
}

// MockInstanceFindIPsCall wrap *gomock.Call
type MockInstanceFindIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceFindIPsCall) Return(arg0 []*instance.IP, arg1 error) *MockInstanceFindIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceFindIPsCall) Do(f func(context.Context, scw.Zone, []string) ([]*instance.IP, error)) *MockInstanceFindIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceFindIPsCall) DoAndReturn(f func(context.Context, scw.Zone, []string) ([]*instance.IP, error)) *MockInstanceFindIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindImage mocks base method.
func (m *MockInstance) FindImage(ctx context.Context, zone scw.Zone, name string) (*instance.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindImage", ctx, zone, name)
	ret0, _ := ret[0].(*instance.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindImage indicates an expected call of FindImage.
func (mr *MockInstanceMockRecorder) FindImage(ctx, zone, name any) *MockInstanceFindImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindImage", reflect.TypeOf((*MockInstance)(nil).FindImage), ctx, zone, name)
	return &MockInstanceFindImageCall{Call: call}
}

// MockInstanceFindImageCall wrap *gomock.Call
type MockInstanceFindImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceFindImageCall) Return(arg0 *instance.Image, arg1 error) *MockInstanceFindImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceFindImageCall) Do(f func(context.Context, scw.Zone, string) (*instance.Image, error)) *MockInstanceFindImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceFindImageCall) DoAndReturn(f func(context.Context, scw.Zone, string) (*instance.Image, error)) *MockInstanceFindImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindInstanceVolume mocks base method.
func (m *MockInstance) FindInstanceVolume(ctx context.Context, zone scw.Zone, tags []string) (*instance.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInstanceVolume", ctx, zone, tags)
	ret0, _ := ret[0].(*instance.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInstanceVolume indicates an expected call of FindInstanceVolume.
func (mr *MockInstanceMockRecorder) FindInstanceVolume(ctx, zone, tags any) *MockInstanceFindInstanceVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInstanceVolume", reflect.TypeOf((*MockInstance)(nil).FindInstanceVolume), ctx, zone, tags)
	return &MockInstanceFindInstanceVolumeCall{Call: call}
}

// MockInstanceFindInstanceVolumeCall wrap *gomock.Call
type MockInstanceFindInstanceVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceFindInstanceVolumeCall) Return(arg0 *instance.Volume, arg1 error) *MockInstanceFindInstanceVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceFindInstanceVolumeCall) Do(f func(context.Context, scw.Zone, []string) (*instance.Volume, error)) *MockInstanceFindInstanceVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceFindInstanceVolumeCall) DoAndReturn(f func(context.Context, scw.Zone, []string) (*instance.Volume, error)) *MockInstanceFindInstanceVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindPlacementGroup mocks base method.
func (m *MockInstance) FindPlacementGroup(ctx context.Context, zone scw.Zone, name string) (*instance.PlacementGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlacementGroup", ctx, zone, name)
	ret0, _ := ret[0].(*instance.PlacementGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPlacementGroup indicates an expected call of FindPlacementGroup.
func (mr *MockInstanceMockRecorder) FindPlacementGroup(ctx, zone, name any) *MockInstanceFindPlacementGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlacementGroup", reflect.TypeOf((*MockInstance)(nil).FindPlacementGroup), ctx, zone, name)
	return &MockInstanceFindPlacementGroupCall{Call: call}
}

// MockInstanceFindPlacementGroupCall wrap *gomock.Call
type MockInstanceFindPlacementGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceFindPlacementGroupCall) Return(arg0 *instance.PlacementGroup, arg1 error) *MockInstanceFindPlacementGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceFindPlacementGroupCall) Do(f func(context.Context, scw.Zone, string) (*instance.PlacementGroup, error)) *MockInstanceFindPlacementGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceFindPlacementGroupCall) DoAndReturn(f func(context.Context, scw.Zone, string) (*instance.PlacementGroup, error)) *MockInstanceFindPlacementGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindSecurityGroup mocks base method.
func (m *MockInstance) FindSecurityGroup(ctx context.Context, zone scw.Zone, name string) (*instance.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSecurityGroup", ctx, zone, name)
	ret0, _ := ret[0].(*instance.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSecurityGroup indicates an expected call of FindSecurityGroup.
func (mr *MockInstanceMockRecorder) FindSecurityGroup(ctx, zone, name any) *MockInstanceFindSecurityGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSecurityGroup", reflect.TypeOf((*MockInstance)(nil).FindSecurityGroup), ctx, zone, name)
	return &MockInstanceFindSecurityGroupCall{Call: call}
}

// MockInstanceFindSecurityGroupCall wrap *gomock.Call
type MockInstanceFindSecurityGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceFindSecurityGroupCall) Return(arg0 *instance.SecurityGroup, arg1 error) *MockInstanceFindSecurityGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceFindSecurityGroupCall) Do(f func(context.Context, scw.Zone, string) (*instance.SecurityGroup, error)) *MockInstanceFindSecurityGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceFindSecurityGroupCall) DoAndReturn(f func(context.Context, scw.Zone, string) (*instance.SecurityGroup, error)) *MockInstanceFindSecurityGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindServer mocks base method.
func (m *MockInstance) FindServer(ctx context.Context, zone scw.Zone, tags []string) (*instance.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServer", ctx, zone, tags)
	ret0, _ := ret[0].(*instance.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServer indicates an expected call of FindServer.
func (mr *MockInstanceMockRecorder) FindServer(ctx, zone, tags any) *MockInstanceFindServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServer", reflect.TypeOf((*MockInstance)(nil).FindServer), ctx, zone, tags)
	return &MockInstanceFindServerCall{Call: call}
}

// MockInstanceFindServerCall wrap *gomock.Call
type MockInstanceFindServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceFindServerCall) Return(arg0 *instance.Server, arg1 error) *MockInstanceFindServerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceFindServerCall) Do(f func(context.Context, scw.Zone, []string) (*instance.Server, error)) *MockInstanceFindServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceFindServerCall) DoAndReturn(f func(context.Context, scw.Zone, []string) (*instance.Server, error)) *MockInstanceFindServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllServerUserData mocks base method.
func (m *MockInstance) GetAllServerUserData(ctx context.Context, zone scw.Zone, serverID string) (map[string]io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServerUserData", ctx, zone, serverID)
	ret0, _ := ret[0].(map[string]io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServerUserData indicates an expected call of GetAllServerUserData.
func (mr *MockInstanceMockRecorder) GetAllServerUserData(ctx, zone, serverID any) *MockInstanceGetAllServerUserDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServerUserData", reflect.TypeOf((*MockInstance)(nil).GetAllServerUserData), ctx, zone, serverID)
	return &MockInstanceGetAllServerUserDataCall{Call: call}
}

// MockInstanceGetAllServerUserDataCall wrap *gomock.Call
type MockInstanceGetAllServerUserDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceGetAllServerUserDataCall) Return(arg0 map[string]io.Reader, arg1 error) *MockInstanceGetAllServerUserDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceGetAllServerUserDataCall) Do(f func(context.Context, scw.Zone, string) (map[string]io.Reader, error)) *MockInstanceGetAllServerUserDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceGetAllServerUserDataCall) DoAndReturn(f func(context.Context, scw.Zone, string) (map[string]io.Reader, error)) *MockInstanceGetAllServerUserDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerAction mocks base method.
func (m *MockInstance) ServerAction(ctx context.Context, zone scw.Zone, serverID string, action instance.ServerAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerAction", ctx, zone, serverID, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerAction indicates an expected call of ServerAction.
func (mr *MockInstanceMockRecorder) ServerAction(ctx, zone, serverID, action any) *MockInstanceServerActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerAction", reflect.TypeOf((*MockInstance)(nil).ServerAction), ctx, zone, serverID, action)
	return &MockInstanceServerActionCall{Call: call}
}

// MockInstanceServerActionCall wrap *gomock.Call
type MockInstanceServerActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServerActionCall) Return(arg0 error) *MockInstanceServerActionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServerActionCall) Do(f func(context.Context, scw.Zone, string, instance.ServerAction) error) *MockInstanceServerActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServerActionCall) DoAndReturn(f func(context.Context, scw.Zone, string, instance.ServerAction) error) *MockInstanceServerActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetServerUserData mocks base method.
func (m *MockInstance) SetServerUserData(ctx context.Context, zone scw.Zone, serverID, key, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServerUserData", ctx, zone, serverID, key, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServerUserData indicates an expected call of SetServerUserData.
func (mr *MockInstanceMockRecorder) SetServerUserData(ctx, zone, serverID, key, content any) *MockInstanceSetServerUserDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServerUserData", reflect.TypeOf((*MockInstance)(nil).SetServerUserData), ctx, zone, serverID, key, content)
	return &MockInstanceSetServerUserDataCall{Call: call}
}

// MockInstanceSetServerUserDataCall wrap *gomock.Call
type MockInstanceSetServerUserDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceSetServerUserDataCall) Return(arg0 error) *MockInstanceSetServerUserDataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceSetServerUserDataCall) Do(f func(context.Context, scw.Zone, string, string, string) error) *MockInstanceSetServerUserDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceSetServerUserDataCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, string) error) *MockInstanceSetServerUserDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateInstanceVolumeTags mocks base method.
func (m *MockInstance) UpdateInstanceVolumeTags(ctx context.Context, zone scw.Zone, volumeID string, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceVolumeTags", ctx, zone, volumeID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceVolumeTags indicates an expected call of UpdateInstanceVolumeTags.
func (mr *MockInstanceMockRecorder) UpdateInstanceVolumeTags(ctx, zone, volumeID, tags any) *MockInstanceUpdateInstanceVolumeTagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceVolumeTags", reflect.TypeOf((*MockInstance)(nil).UpdateInstanceVolumeTags), ctx, zone, volumeID, tags)
	return &MockInstanceUpdateInstanceVolumeTagsCall{Call: call}
}

// MockInstanceUpdateInstanceVolumeTagsCall wrap *gomock.Call
type MockInstanceUpdateInstanceVolumeTagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceUpdateInstanceVolumeTagsCall) Return(arg0 error) *MockInstanceUpdateInstanceVolumeTagsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceUpdateInstanceVolumeTagsCall) Do(f func(context.Context, scw.Zone, string, []string) error) *MockInstanceUpdateInstanceVolumeTagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceUpdateInstanceVolumeTagsCall) DoAndReturn(f func(context.Context, scw.Zone, string, []string) error) *MockInstanceUpdateInstanceVolumeTagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
