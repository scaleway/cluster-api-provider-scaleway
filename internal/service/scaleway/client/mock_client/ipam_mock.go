// Code generated by MockGen. DO NOT EDIT.
// Source: ../ipam.go
//
// Generated by this command:
//
//	mockgen -destination ipam_mock.go -package mock_client -source ../ipam.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	ipam "github.com/scaleway/scaleway-sdk-go/api/ipam/v1"
	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockIPAMAPI is a mock of IPAMAPI interface.
type MockIPAMAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIPAMAPIMockRecorder
	isgomock struct{}
}

// MockIPAMAPIMockRecorder is the mock recorder for MockIPAMAPI.
type MockIPAMAPIMockRecorder struct {
	mock *MockIPAMAPI
}

// NewMockIPAMAPI creates a new mock instance.
func NewMockIPAMAPI(ctrl *gomock.Controller) *MockIPAMAPI {
	mock := &MockIPAMAPI{ctrl: ctrl}
	mock.recorder = &MockIPAMAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPAMAPI) EXPECT() *MockIPAMAPIMockRecorder {
	return m.recorder
}

// ListIPs mocks base method.
func (m *MockIPAMAPI) ListIPs(req *ipam.ListIPsRequest, opts ...scw.RequestOption) (*ipam.ListIPsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIPs", varargs...)
	ret0, _ := ret[0].(*ipam.ListIPsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPs indicates an expected call of ListIPs.
func (mr *MockIPAMAPIMockRecorder) ListIPs(req any, opts ...any) *MockIPAMAPIListIPsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPs", reflect.TypeOf((*MockIPAMAPI)(nil).ListIPs), varargs...)
	return &MockIPAMAPIListIPsCall{Call: call}
}

// MockIPAMAPIListIPsCall wrap *gomock.Call
type MockIPAMAPIListIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIPAMAPIListIPsCall) Return(arg0 *ipam.ListIPsResponse, arg1 error) *MockIPAMAPIListIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIPAMAPIListIPsCall) Do(f func(*ipam.ListIPsRequest, ...scw.RequestOption) (*ipam.ListIPsResponse, error)) *MockIPAMAPIListIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIPAMAPIListIPsCall) DoAndReturn(f func(*ipam.ListIPsRequest, ...scw.RequestOption) (*ipam.ListIPsResponse, error)) *MockIPAMAPIListIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReleaseIPSet mocks base method.
func (m *MockIPAMAPI) ReleaseIPSet(req *ipam.ReleaseIPSetRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseIPSet", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseIPSet indicates an expected call of ReleaseIPSet.
func (mr *MockIPAMAPIMockRecorder) ReleaseIPSet(req any, opts ...any) *MockIPAMAPIReleaseIPSetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIPSet", reflect.TypeOf((*MockIPAMAPI)(nil).ReleaseIPSet), varargs...)
	return &MockIPAMAPIReleaseIPSetCall{Call: call}
}

// MockIPAMAPIReleaseIPSetCall wrap *gomock.Call
type MockIPAMAPIReleaseIPSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIPAMAPIReleaseIPSetCall) Return(arg0 error) *MockIPAMAPIReleaseIPSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIPAMAPIReleaseIPSetCall) Do(f func(*ipam.ReleaseIPSetRequest, ...scw.RequestOption) error) *MockIPAMAPIReleaseIPSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIPAMAPIReleaseIPSetCall) DoAndReturn(f func(*ipam.ReleaseIPSetRequest, ...scw.RequestOption) error) *MockIPAMAPIReleaseIPSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockIPAM is a mock of IPAM interface.
type MockIPAM struct {
	ctrl     *gomock.Controller
	recorder *MockIPAMMockRecorder
	isgomock struct{}
}

// MockIPAMMockRecorder is the mock recorder for MockIPAM.
type MockIPAMMockRecorder struct {
	mock *MockIPAM
}

// NewMockIPAM creates a new mock instance.
func NewMockIPAM(ctrl *gomock.Controller) *MockIPAM {
	mock := &MockIPAM{ctrl: ctrl}
	mock.recorder = &MockIPAMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPAM) EXPECT() *MockIPAMMockRecorder {
	return m.recorder
}

// CleanAvailableIPs mocks base method.
func (m *MockIPAM) CleanAvailableIPs(ctx context.Context, privateNetworkID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanAvailableIPs", ctx, privateNetworkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanAvailableIPs indicates an expected call of CleanAvailableIPs.
func (mr *MockIPAMMockRecorder) CleanAvailableIPs(ctx, privateNetworkID any) *MockIPAMCleanAvailableIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanAvailableIPs", reflect.TypeOf((*MockIPAM)(nil).CleanAvailableIPs), ctx, privateNetworkID)
	return &MockIPAMCleanAvailableIPsCall{Call: call}
}

// MockIPAMCleanAvailableIPsCall wrap *gomock.Call
type MockIPAMCleanAvailableIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIPAMCleanAvailableIPsCall) Return(arg0 error) *MockIPAMCleanAvailableIPsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIPAMCleanAvailableIPsCall) Do(f func(context.Context, string) error) *MockIPAMCleanAvailableIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIPAMCleanAvailableIPsCall) DoAndReturn(f func(context.Context, string) error) *MockIPAMCleanAvailableIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindAvailableIPs mocks base method.
func (m *MockIPAM) FindAvailableIPs(ctx context.Context, privateNetworkID string) ([]*ipam.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAvailableIPs", ctx, privateNetworkID)
	ret0, _ := ret[0].([]*ipam.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAvailableIPs indicates an expected call of FindAvailableIPs.
func (mr *MockIPAMMockRecorder) FindAvailableIPs(ctx, privateNetworkID any) *MockIPAMFindAvailableIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAvailableIPs", reflect.TypeOf((*MockIPAM)(nil).FindAvailableIPs), ctx, privateNetworkID)
	return &MockIPAMFindAvailableIPsCall{Call: call}
}

// MockIPAMFindAvailableIPsCall wrap *gomock.Call
type MockIPAMFindAvailableIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIPAMFindAvailableIPsCall) Return(arg0 []*ipam.IP, arg1 error) *MockIPAMFindAvailableIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIPAMFindAvailableIPsCall) Do(f func(context.Context, string) ([]*ipam.IP, error)) *MockIPAMFindAvailableIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIPAMFindAvailableIPsCall) DoAndReturn(f func(context.Context, string) ([]*ipam.IP, error)) *MockIPAMFindAvailableIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLBServersIPs mocks base method.
func (m *MockIPAM) FindLBServersIPs(ctx context.Context, privateNetworkID string, lbIDs []string) ([]*ipam.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLBServersIPs", ctx, privateNetworkID, lbIDs)
	ret0, _ := ret[0].([]*ipam.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLBServersIPs indicates an expected call of FindLBServersIPs.
func (mr *MockIPAMMockRecorder) FindLBServersIPs(ctx, privateNetworkID, lbIDs any) *MockIPAMFindLBServersIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLBServersIPs", reflect.TypeOf((*MockIPAM)(nil).FindLBServersIPs), ctx, privateNetworkID, lbIDs)
	return &MockIPAMFindLBServersIPsCall{Call: call}
}

// MockIPAMFindLBServersIPsCall wrap *gomock.Call
type MockIPAMFindLBServersIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIPAMFindLBServersIPsCall) Return(arg0 []*ipam.IP, arg1 error) *MockIPAMFindLBServersIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIPAMFindLBServersIPsCall) Do(f func(context.Context, string, []string) ([]*ipam.IP, error)) *MockIPAMFindLBServersIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIPAMFindLBServersIPsCall) DoAndReturn(f func(context.Context, string, []string) ([]*ipam.IP, error)) *MockIPAMFindLBServersIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindPrivateNICIPs mocks base method.
func (m *MockIPAM) FindPrivateNICIPs(ctx context.Context, privateNICID string) ([]*ipam.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrivateNICIPs", ctx, privateNICID)
	ret0, _ := ret[0].([]*ipam.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrivateNICIPs indicates an expected call of FindPrivateNICIPs.
func (mr *MockIPAMMockRecorder) FindPrivateNICIPs(ctx, privateNICID any) *MockIPAMFindPrivateNICIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrivateNICIPs", reflect.TypeOf((*MockIPAM)(nil).FindPrivateNICIPs), ctx, privateNICID)
	return &MockIPAMFindPrivateNICIPsCall{Call: call}
}

// MockIPAMFindPrivateNICIPsCall wrap *gomock.Call
type MockIPAMFindPrivateNICIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIPAMFindPrivateNICIPsCall) Return(arg0 []*ipam.IP, arg1 error) *MockIPAMFindPrivateNICIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIPAMFindPrivateNICIPsCall) Do(f func(context.Context, string) ([]*ipam.IP, error)) *MockIPAMFindPrivateNICIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIPAMFindPrivateNICIPsCall) DoAndReturn(f func(context.Context, string) ([]*ipam.IP, error)) *MockIPAMFindPrivateNICIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
