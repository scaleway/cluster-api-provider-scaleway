// Code generated by MockGen. DO NOT EDIT.
// Source: ../lb.go
//
// Generated by this command:
//
//	mockgen -destination lb_mock.go -package mock_client -source ../lb.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	lb "github.com/scaleway/scaleway-sdk-go/api/lb/v1"
	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockLBAPI is a mock of LBAPI interface.
type MockLBAPI struct {
	ctrl     *gomock.Controller
	recorder *MockLBAPIMockRecorder
	isgomock struct{}
}

// MockLBAPIMockRecorder is the mock recorder for MockLBAPI.
type MockLBAPIMockRecorder struct {
	mock *MockLBAPI
}

// NewMockLBAPI creates a new mock instance.
func NewMockLBAPI(ctrl *gomock.Controller) *MockLBAPI {
	mock := &MockLBAPI{ctrl: ctrl}
	mock.recorder = &MockLBAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLBAPI) EXPECT() *MockLBAPIMockRecorder {
	return m.recorder
}

// AddBackendServers mocks base method.
func (m *MockLBAPI) AddBackendServers(req *lb.ZonedAPIAddBackendServersRequest, opts ...scw.RequestOption) (*lb.Backend, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddBackendServers", varargs...)
	ret0, _ := ret[0].(*lb.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBackendServers indicates an expected call of AddBackendServers.
func (mr *MockLBAPIMockRecorder) AddBackendServers(req any, opts ...any) *MockLBAPIAddBackendServersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBackendServers", reflect.TypeOf((*MockLBAPI)(nil).AddBackendServers), varargs...)
	return &MockLBAPIAddBackendServersCall{Call: call}
}

// MockLBAPIAddBackendServersCall wrap *gomock.Call
type MockLBAPIAddBackendServersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIAddBackendServersCall) Return(arg0 *lb.Backend, arg1 error) *MockLBAPIAddBackendServersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIAddBackendServersCall) Do(f func(*lb.ZonedAPIAddBackendServersRequest, ...scw.RequestOption) (*lb.Backend, error)) *MockLBAPIAddBackendServersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIAddBackendServersCall) DoAndReturn(f func(*lb.ZonedAPIAddBackendServersRequest, ...scw.RequestOption) (*lb.Backend, error)) *MockLBAPIAddBackendServersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AttachPrivateNetwork mocks base method.
func (m *MockLBAPI) AttachPrivateNetwork(req *lb.ZonedAPIAttachPrivateNetworkRequest, opts ...scw.RequestOption) (*lb.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachPrivateNetwork", varargs...)
	ret0, _ := ret[0].(*lb.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPrivateNetwork indicates an expected call of AttachPrivateNetwork.
func (mr *MockLBAPIMockRecorder) AttachPrivateNetwork(req any, opts ...any) *MockLBAPIAttachPrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPrivateNetwork", reflect.TypeOf((*MockLBAPI)(nil).AttachPrivateNetwork), varargs...)
	return &MockLBAPIAttachPrivateNetworkCall{Call: call}
}

// MockLBAPIAttachPrivateNetworkCall wrap *gomock.Call
type MockLBAPIAttachPrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIAttachPrivateNetworkCall) Return(arg0 *lb.PrivateNetwork, arg1 error) *MockLBAPIAttachPrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIAttachPrivateNetworkCall) Do(f func(*lb.ZonedAPIAttachPrivateNetworkRequest, ...scw.RequestOption) (*lb.PrivateNetwork, error)) *MockLBAPIAttachPrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIAttachPrivateNetworkCall) DoAndReturn(f func(*lb.ZonedAPIAttachPrivateNetworkRequest, ...scw.RequestOption) (*lb.PrivateNetwork, error)) *MockLBAPIAttachPrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateACL mocks base method.
func (m *MockLBAPI) CreateACL(req *lb.ZonedAPICreateACLRequest, opts ...scw.RequestOption) (*lb.ACL, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateACL", varargs...)
	ret0, _ := ret[0].(*lb.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateACL indicates an expected call of CreateACL.
func (mr *MockLBAPIMockRecorder) CreateACL(req any, opts ...any) *MockLBAPICreateACLCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateACL", reflect.TypeOf((*MockLBAPI)(nil).CreateACL), varargs...)
	return &MockLBAPICreateACLCall{Call: call}
}

// MockLBAPICreateACLCall wrap *gomock.Call
type MockLBAPICreateACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPICreateACLCall) Return(arg0 *lb.ACL, arg1 error) *MockLBAPICreateACLCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPICreateACLCall) Do(f func(*lb.ZonedAPICreateACLRequest, ...scw.RequestOption) (*lb.ACL, error)) *MockLBAPICreateACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPICreateACLCall) DoAndReturn(f func(*lb.ZonedAPICreateACLRequest, ...scw.RequestOption) (*lb.ACL, error)) *MockLBAPICreateACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateBackend mocks base method.
func (m *MockLBAPI) CreateBackend(req *lb.ZonedAPICreateBackendRequest, opts ...scw.RequestOption) (*lb.Backend, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBackend", varargs...)
	ret0, _ := ret[0].(*lb.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackend indicates an expected call of CreateBackend.
func (mr *MockLBAPIMockRecorder) CreateBackend(req any, opts ...any) *MockLBAPICreateBackendCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackend", reflect.TypeOf((*MockLBAPI)(nil).CreateBackend), varargs...)
	return &MockLBAPICreateBackendCall{Call: call}
}

// MockLBAPICreateBackendCall wrap *gomock.Call
type MockLBAPICreateBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPICreateBackendCall) Return(arg0 *lb.Backend, arg1 error) *MockLBAPICreateBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPICreateBackendCall) Do(f func(*lb.ZonedAPICreateBackendRequest, ...scw.RequestOption) (*lb.Backend, error)) *MockLBAPICreateBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPICreateBackendCall) DoAndReturn(f func(*lb.ZonedAPICreateBackendRequest, ...scw.RequestOption) (*lb.Backend, error)) *MockLBAPICreateBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateFrontend mocks base method.
func (m *MockLBAPI) CreateFrontend(req *lb.ZonedAPICreateFrontendRequest, opts ...scw.RequestOption) (*lb.Frontend, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFrontend", varargs...)
	ret0, _ := ret[0].(*lb.Frontend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFrontend indicates an expected call of CreateFrontend.
func (mr *MockLBAPIMockRecorder) CreateFrontend(req any, opts ...any) *MockLBAPICreateFrontendCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFrontend", reflect.TypeOf((*MockLBAPI)(nil).CreateFrontend), varargs...)
	return &MockLBAPICreateFrontendCall{Call: call}
}

// MockLBAPICreateFrontendCall wrap *gomock.Call
type MockLBAPICreateFrontendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPICreateFrontendCall) Return(arg0 *lb.Frontend, arg1 error) *MockLBAPICreateFrontendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPICreateFrontendCall) Do(f func(*lb.ZonedAPICreateFrontendRequest, ...scw.RequestOption) (*lb.Frontend, error)) *MockLBAPICreateFrontendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPICreateFrontendCall) DoAndReturn(f func(*lb.ZonedAPICreateFrontendRequest, ...scw.RequestOption) (*lb.Frontend, error)) *MockLBAPICreateFrontendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateLB mocks base method.
func (m *MockLBAPI) CreateLB(req *lb.ZonedAPICreateLBRequest, opts ...scw.RequestOption) (*lb.LB, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLB", varargs...)
	ret0, _ := ret[0].(*lb.LB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLB indicates an expected call of CreateLB.
func (mr *MockLBAPIMockRecorder) CreateLB(req any, opts ...any) *MockLBAPICreateLBCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLB", reflect.TypeOf((*MockLBAPI)(nil).CreateLB), varargs...)
	return &MockLBAPICreateLBCall{Call: call}
}

// MockLBAPICreateLBCall wrap *gomock.Call
type MockLBAPICreateLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPICreateLBCall) Return(arg0 *lb.LB, arg1 error) *MockLBAPICreateLBCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPICreateLBCall) Do(f func(*lb.ZonedAPICreateLBRequest, ...scw.RequestOption) (*lb.LB, error)) *MockLBAPICreateLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPICreateLBCall) DoAndReturn(f func(*lb.ZonedAPICreateLBRequest, ...scw.RequestOption) (*lb.LB, error)) *MockLBAPICreateLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteACL mocks base method.
func (m *MockLBAPI) DeleteACL(req *lb.ZonedAPIDeleteACLRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteACL", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteACL indicates an expected call of DeleteACL.
func (mr *MockLBAPIMockRecorder) DeleteACL(req any, opts ...any) *MockLBAPIDeleteACLCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteACL", reflect.TypeOf((*MockLBAPI)(nil).DeleteACL), varargs...)
	return &MockLBAPIDeleteACLCall{Call: call}
}

// MockLBAPIDeleteACLCall wrap *gomock.Call
type MockLBAPIDeleteACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIDeleteACLCall) Return(arg0 error) *MockLBAPIDeleteACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIDeleteACLCall) Do(f func(*lb.ZonedAPIDeleteACLRequest, ...scw.RequestOption) error) *MockLBAPIDeleteACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIDeleteACLCall) DoAndReturn(f func(*lb.ZonedAPIDeleteACLRequest, ...scw.RequestOption) error) *MockLBAPIDeleteACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteLB mocks base method.
func (m *MockLBAPI) DeleteLB(req *lb.ZonedAPIDeleteLBRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLB", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLB indicates an expected call of DeleteLB.
func (mr *MockLBAPIMockRecorder) DeleteLB(req any, opts ...any) *MockLBAPIDeleteLBCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLB", reflect.TypeOf((*MockLBAPI)(nil).DeleteLB), varargs...)
	return &MockLBAPIDeleteLBCall{Call: call}
}

// MockLBAPIDeleteLBCall wrap *gomock.Call
type MockLBAPIDeleteLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIDeleteLBCall) Return(arg0 error) *MockLBAPIDeleteLBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIDeleteLBCall) Do(f func(*lb.ZonedAPIDeleteLBRequest, ...scw.RequestOption) error) *MockLBAPIDeleteLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIDeleteLBCall) DoAndReturn(f func(*lb.ZonedAPIDeleteLBRequest, ...scw.RequestOption) error) *MockLBAPIDeleteLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListACLs mocks base method.
func (m *MockLBAPI) ListACLs(req *lb.ZonedAPIListACLsRequest, opts ...scw.RequestOption) (*lb.ListACLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListACLs", varargs...)
	ret0, _ := ret[0].(*lb.ListACLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListACLs indicates an expected call of ListACLs.
func (mr *MockLBAPIMockRecorder) ListACLs(req any, opts ...any) *MockLBAPIListACLsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListACLs", reflect.TypeOf((*MockLBAPI)(nil).ListACLs), varargs...)
	return &MockLBAPIListACLsCall{Call: call}
}

// MockLBAPIListACLsCall wrap *gomock.Call
type MockLBAPIListACLsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIListACLsCall) Return(arg0 *lb.ListACLResponse, arg1 error) *MockLBAPIListACLsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIListACLsCall) Do(f func(*lb.ZonedAPIListACLsRequest, ...scw.RequestOption) (*lb.ListACLResponse, error)) *MockLBAPIListACLsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIListACLsCall) DoAndReturn(f func(*lb.ZonedAPIListACLsRequest, ...scw.RequestOption) (*lb.ListACLResponse, error)) *MockLBAPIListACLsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListBackends mocks base method.
func (m *MockLBAPI) ListBackends(req *lb.ZonedAPIListBackendsRequest, opts ...scw.RequestOption) (*lb.ListBackendsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBackends", varargs...)
	ret0, _ := ret[0].(*lb.ListBackendsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackends indicates an expected call of ListBackends.
func (mr *MockLBAPIMockRecorder) ListBackends(req any, opts ...any) *MockLBAPIListBackendsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackends", reflect.TypeOf((*MockLBAPI)(nil).ListBackends), varargs...)
	return &MockLBAPIListBackendsCall{Call: call}
}

// MockLBAPIListBackendsCall wrap *gomock.Call
type MockLBAPIListBackendsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIListBackendsCall) Return(arg0 *lb.ListBackendsResponse, arg1 error) *MockLBAPIListBackendsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIListBackendsCall) Do(f func(*lb.ZonedAPIListBackendsRequest, ...scw.RequestOption) (*lb.ListBackendsResponse, error)) *MockLBAPIListBackendsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIListBackendsCall) DoAndReturn(f func(*lb.ZonedAPIListBackendsRequest, ...scw.RequestOption) (*lb.ListBackendsResponse, error)) *MockLBAPIListBackendsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFrontends mocks base method.
func (m *MockLBAPI) ListFrontends(req *lb.ZonedAPIListFrontendsRequest, opts ...scw.RequestOption) (*lb.ListFrontendsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFrontends", varargs...)
	ret0, _ := ret[0].(*lb.ListFrontendsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFrontends indicates an expected call of ListFrontends.
func (mr *MockLBAPIMockRecorder) ListFrontends(req any, opts ...any) *MockLBAPIListFrontendsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFrontends", reflect.TypeOf((*MockLBAPI)(nil).ListFrontends), varargs...)
	return &MockLBAPIListFrontendsCall{Call: call}
}

// MockLBAPIListFrontendsCall wrap *gomock.Call
type MockLBAPIListFrontendsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIListFrontendsCall) Return(arg0 *lb.ListFrontendsResponse, arg1 error) *MockLBAPIListFrontendsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIListFrontendsCall) Do(f func(*lb.ZonedAPIListFrontendsRequest, ...scw.RequestOption) (*lb.ListFrontendsResponse, error)) *MockLBAPIListFrontendsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIListFrontendsCall) DoAndReturn(f func(*lb.ZonedAPIListFrontendsRequest, ...scw.RequestOption) (*lb.ListFrontendsResponse, error)) *MockLBAPIListFrontendsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListIPs mocks base method.
func (m *MockLBAPI) ListIPs(req *lb.ZonedAPIListIPsRequest, opts ...scw.RequestOption) (*lb.ListIPsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIPs", varargs...)
	ret0, _ := ret[0].(*lb.ListIPsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPs indicates an expected call of ListIPs.
func (mr *MockLBAPIMockRecorder) ListIPs(req any, opts ...any) *MockLBAPIListIPsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPs", reflect.TypeOf((*MockLBAPI)(nil).ListIPs), varargs...)
	return &MockLBAPIListIPsCall{Call: call}
}

// MockLBAPIListIPsCall wrap *gomock.Call
type MockLBAPIListIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIListIPsCall) Return(arg0 *lb.ListIPsResponse, arg1 error) *MockLBAPIListIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIListIPsCall) Do(f func(*lb.ZonedAPIListIPsRequest, ...scw.RequestOption) (*lb.ListIPsResponse, error)) *MockLBAPIListIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIListIPsCall) DoAndReturn(f func(*lb.ZonedAPIListIPsRequest, ...scw.RequestOption) (*lb.ListIPsResponse, error)) *MockLBAPIListIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLBPrivateNetworks mocks base method.
func (m *MockLBAPI) ListLBPrivateNetworks(req *lb.ZonedAPIListLBPrivateNetworksRequest, opts ...scw.RequestOption) (*lb.ListLBPrivateNetworksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLBPrivateNetworks", varargs...)
	ret0, _ := ret[0].(*lb.ListLBPrivateNetworksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLBPrivateNetworks indicates an expected call of ListLBPrivateNetworks.
func (mr *MockLBAPIMockRecorder) ListLBPrivateNetworks(req any, opts ...any) *MockLBAPIListLBPrivateNetworksCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLBPrivateNetworks", reflect.TypeOf((*MockLBAPI)(nil).ListLBPrivateNetworks), varargs...)
	return &MockLBAPIListLBPrivateNetworksCall{Call: call}
}

// MockLBAPIListLBPrivateNetworksCall wrap *gomock.Call
type MockLBAPIListLBPrivateNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIListLBPrivateNetworksCall) Return(arg0 *lb.ListLBPrivateNetworksResponse, arg1 error) *MockLBAPIListLBPrivateNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIListLBPrivateNetworksCall) Do(f func(*lb.ZonedAPIListLBPrivateNetworksRequest, ...scw.RequestOption) (*lb.ListLBPrivateNetworksResponse, error)) *MockLBAPIListLBPrivateNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIListLBPrivateNetworksCall) DoAndReturn(f func(*lb.ZonedAPIListLBPrivateNetworksRequest, ...scw.RequestOption) (*lb.ListLBPrivateNetworksResponse, error)) *MockLBAPIListLBPrivateNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLBs mocks base method.
func (m *MockLBAPI) ListLBs(req *lb.ZonedAPIListLBsRequest, opts ...scw.RequestOption) (*lb.ListLBsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLBs", varargs...)
	ret0, _ := ret[0].(*lb.ListLBsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLBs indicates an expected call of ListLBs.
func (mr *MockLBAPIMockRecorder) ListLBs(req any, opts ...any) *MockLBAPIListLBsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLBs", reflect.TypeOf((*MockLBAPI)(nil).ListLBs), varargs...)
	return &MockLBAPIListLBsCall{Call: call}
}

// MockLBAPIListLBsCall wrap *gomock.Call
type MockLBAPIListLBsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIListLBsCall) Return(arg0 *lb.ListLBsResponse, arg1 error) *MockLBAPIListLBsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIListLBsCall) Do(f func(*lb.ZonedAPIListLBsRequest, ...scw.RequestOption) (*lb.ListLBsResponse, error)) *MockLBAPIListLBsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIListLBsCall) DoAndReturn(f func(*lb.ZonedAPIListLBsRequest, ...scw.RequestOption) (*lb.ListLBsResponse, error)) *MockLBAPIListLBsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MigrateLB mocks base method.
func (m *MockLBAPI) MigrateLB(req *lb.ZonedAPIMigrateLBRequest, opts ...scw.RequestOption) (*lb.LB, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateLB", varargs...)
	ret0, _ := ret[0].(*lb.LB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateLB indicates an expected call of MigrateLB.
func (mr *MockLBAPIMockRecorder) MigrateLB(req any, opts ...any) *MockLBAPIMigrateLBCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateLB", reflect.TypeOf((*MockLBAPI)(nil).MigrateLB), varargs...)
	return &MockLBAPIMigrateLBCall{Call: call}
}

// MockLBAPIMigrateLBCall wrap *gomock.Call
type MockLBAPIMigrateLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIMigrateLBCall) Return(arg0 *lb.LB, arg1 error) *MockLBAPIMigrateLBCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIMigrateLBCall) Do(f func(*lb.ZonedAPIMigrateLBRequest, ...scw.RequestOption) (*lb.LB, error)) *MockLBAPIMigrateLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIMigrateLBCall) DoAndReturn(f func(*lb.ZonedAPIMigrateLBRequest, ...scw.RequestOption) (*lb.LB, error)) *MockLBAPIMigrateLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveBackendServers mocks base method.
func (m *MockLBAPI) RemoveBackendServers(req *lb.ZonedAPIRemoveBackendServersRequest, opts ...scw.RequestOption) (*lb.Backend, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveBackendServers", varargs...)
	ret0, _ := ret[0].(*lb.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveBackendServers indicates an expected call of RemoveBackendServers.
func (mr *MockLBAPIMockRecorder) RemoveBackendServers(req any, opts ...any) *MockLBAPIRemoveBackendServersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBackendServers", reflect.TypeOf((*MockLBAPI)(nil).RemoveBackendServers), varargs...)
	return &MockLBAPIRemoveBackendServersCall{Call: call}
}

// MockLBAPIRemoveBackendServersCall wrap *gomock.Call
type MockLBAPIRemoveBackendServersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIRemoveBackendServersCall) Return(arg0 *lb.Backend, arg1 error) *MockLBAPIRemoveBackendServersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIRemoveBackendServersCall) Do(f func(*lb.ZonedAPIRemoveBackendServersRequest, ...scw.RequestOption) (*lb.Backend, error)) *MockLBAPIRemoveBackendServersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIRemoveBackendServersCall) DoAndReturn(f func(*lb.ZonedAPIRemoveBackendServersRequest, ...scw.RequestOption) (*lb.Backend, error)) *MockLBAPIRemoveBackendServersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetACLs mocks base method.
func (m *MockLBAPI) SetACLs(req *lb.ZonedAPISetACLsRequest, opts ...scw.RequestOption) (*lb.SetACLsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetACLs", varargs...)
	ret0, _ := ret[0].(*lb.SetACLsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetACLs indicates an expected call of SetACLs.
func (mr *MockLBAPIMockRecorder) SetACLs(req any, opts ...any) *MockLBAPISetACLsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetACLs", reflect.TypeOf((*MockLBAPI)(nil).SetACLs), varargs...)
	return &MockLBAPISetACLsCall{Call: call}
}

// MockLBAPISetACLsCall wrap *gomock.Call
type MockLBAPISetACLsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPISetACLsCall) Return(arg0 *lb.SetACLsResponse, arg1 error) *MockLBAPISetACLsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPISetACLsCall) Do(f func(*lb.ZonedAPISetACLsRequest, ...scw.RequestOption) (*lb.SetACLsResponse, error)) *MockLBAPISetACLsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPISetACLsCall) DoAndReturn(f func(*lb.ZonedAPISetACLsRequest, ...scw.RequestOption) (*lb.SetACLsResponse, error)) *MockLBAPISetACLsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetBackendServers mocks base method.
func (m *MockLBAPI) SetBackendServers(req *lb.ZonedAPISetBackendServersRequest, opts ...scw.RequestOption) (*lb.Backend, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBackendServers", varargs...)
	ret0, _ := ret[0].(*lb.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBackendServers indicates an expected call of SetBackendServers.
func (mr *MockLBAPIMockRecorder) SetBackendServers(req any, opts ...any) *MockLBAPISetBackendServersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackendServers", reflect.TypeOf((*MockLBAPI)(nil).SetBackendServers), varargs...)
	return &MockLBAPISetBackendServersCall{Call: call}
}

// MockLBAPISetBackendServersCall wrap *gomock.Call
type MockLBAPISetBackendServersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPISetBackendServersCall) Return(arg0 *lb.Backend, arg1 error) *MockLBAPISetBackendServersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPISetBackendServersCall) Do(f func(*lb.ZonedAPISetBackendServersRequest, ...scw.RequestOption) (*lb.Backend, error)) *MockLBAPISetBackendServersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPISetBackendServersCall) DoAndReturn(f func(*lb.ZonedAPISetBackendServersRequest, ...scw.RequestOption) (*lb.Backend, error)) *MockLBAPISetBackendServersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateACL mocks base method.
func (m *MockLBAPI) UpdateACL(req *lb.ZonedAPIUpdateACLRequest, opts ...scw.RequestOption) (*lb.ACL, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateACL", varargs...)
	ret0, _ := ret[0].(*lb.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateACL indicates an expected call of UpdateACL.
func (mr *MockLBAPIMockRecorder) UpdateACL(req any, opts ...any) *MockLBAPIUpdateACLCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateACL", reflect.TypeOf((*MockLBAPI)(nil).UpdateACL), varargs...)
	return &MockLBAPIUpdateACLCall{Call: call}
}

// MockLBAPIUpdateACLCall wrap *gomock.Call
type MockLBAPIUpdateACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIUpdateACLCall) Return(arg0 *lb.ACL, arg1 error) *MockLBAPIUpdateACLCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIUpdateACLCall) Do(f func(*lb.ZonedAPIUpdateACLRequest, ...scw.RequestOption) (*lb.ACL, error)) *MockLBAPIUpdateACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIUpdateACLCall) DoAndReturn(f func(*lb.ZonedAPIUpdateACLRequest, ...scw.RequestOption) (*lb.ACL, error)) *MockLBAPIUpdateACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Zones mocks base method.
func (m *MockLBAPI) Zones() []scw.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zones")
	ret0, _ := ret[0].([]scw.Zone)
	return ret0
}

// Zones indicates an expected call of Zones.
func (mr *MockLBAPIMockRecorder) Zones() *MockLBAPIZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zones", reflect.TypeOf((*MockLBAPI)(nil).Zones))
	return &MockLBAPIZonesCall{Call: call}
}

// MockLBAPIZonesCall wrap *gomock.Call
type MockLBAPIZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAPIZonesCall) Return(arg0 []scw.Zone) *MockLBAPIZonesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAPIZonesCall) Do(f func() []scw.Zone) *MockLBAPIZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAPIZonesCall) DoAndReturn(f func() []scw.Zone) *MockLBAPIZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLB is a mock of LB interface.
type MockLB struct {
	ctrl     *gomock.Controller
	recorder *MockLBMockRecorder
	isgomock struct{}
}

// MockLBMockRecorder is the mock recorder for MockLB.
type MockLBMockRecorder struct {
	mock *MockLB
}

// NewMockLB creates a new mock instance.
func NewMockLB(ctrl *gomock.Controller) *MockLB {
	mock := &MockLB{ctrl: ctrl}
	mock.recorder = &MockLBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLB) EXPECT() *MockLBMockRecorder {
	return m.recorder
}

// AddBackendServer mocks base method.
func (m *MockLB) AddBackendServer(ctx context.Context, zone scw.Zone, backendID, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBackendServer", ctx, zone, backendID, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBackendServer indicates an expected call of AddBackendServer.
func (mr *MockLBMockRecorder) AddBackendServer(ctx, zone, backendID, ip any) *MockLBAddBackendServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBackendServer", reflect.TypeOf((*MockLB)(nil).AddBackendServer), ctx, zone, backendID, ip)
	return &MockLBAddBackendServerCall{Call: call}
}

// MockLBAddBackendServerCall wrap *gomock.Call
type MockLBAddBackendServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAddBackendServerCall) Return(arg0 error) *MockLBAddBackendServerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAddBackendServerCall) Do(f func(context.Context, scw.Zone, string, string) error) *MockLBAddBackendServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAddBackendServerCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) error) *MockLBAddBackendServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AttachLBPrivateNetwork mocks base method.
func (m *MockLB) AttachLBPrivateNetwork(ctx context.Context, zone scw.Zone, lbID, privateNetworkID string, ipID *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachLBPrivateNetwork", ctx, zone, lbID, privateNetworkID, ipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachLBPrivateNetwork indicates an expected call of AttachLBPrivateNetwork.
func (mr *MockLBMockRecorder) AttachLBPrivateNetwork(ctx, zone, lbID, privateNetworkID, ipID any) *MockLBAttachLBPrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachLBPrivateNetwork", reflect.TypeOf((*MockLB)(nil).AttachLBPrivateNetwork), ctx, zone, lbID, privateNetworkID, ipID)
	return &MockLBAttachLBPrivateNetworkCall{Call: call}
}

// MockLBAttachLBPrivateNetworkCall wrap *gomock.Call
type MockLBAttachLBPrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBAttachLBPrivateNetworkCall) Return(arg0 error) *MockLBAttachLBPrivateNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBAttachLBPrivateNetworkCall) Do(f func(context.Context, scw.Zone, string, string, *string) error) *MockLBAttachLBPrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBAttachLBPrivateNetworkCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, *string) error) *MockLBAttachLBPrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateBackend mocks base method.
func (m *MockLB) CreateBackend(ctx context.Context, zone scw.Zone, lbID, name string, servers []string, port int32) (*lb.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackend", ctx, zone, lbID, name, servers, port)
	ret0, _ := ret[0].(*lb.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackend indicates an expected call of CreateBackend.
func (mr *MockLBMockRecorder) CreateBackend(ctx, zone, lbID, name, servers, port any) *MockLBCreateBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackend", reflect.TypeOf((*MockLB)(nil).CreateBackend), ctx, zone, lbID, name, servers, port)
	return &MockLBCreateBackendCall{Call: call}
}

// MockLBCreateBackendCall wrap *gomock.Call
type MockLBCreateBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBCreateBackendCall) Return(arg0 *lb.Backend, arg1 error) *MockLBCreateBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBCreateBackendCall) Do(f func(context.Context, scw.Zone, string, string, []string, int32) (*lb.Backend, error)) *MockLBCreateBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBCreateBackendCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, []string, int32) (*lb.Backend, error)) *MockLBCreateBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateFrontend mocks base method.
func (m *MockLB) CreateFrontend(ctx context.Context, zone scw.Zone, lbID, name, backendID string, port int32) (*lb.Frontend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFrontend", ctx, zone, lbID, name, backendID, port)
	ret0, _ := ret[0].(*lb.Frontend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFrontend indicates an expected call of CreateFrontend.
func (mr *MockLBMockRecorder) CreateFrontend(ctx, zone, lbID, name, backendID, port any) *MockLBCreateFrontendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFrontend", reflect.TypeOf((*MockLB)(nil).CreateFrontend), ctx, zone, lbID, name, backendID, port)
	return &MockLBCreateFrontendCall{Call: call}
}

// MockLBCreateFrontendCall wrap *gomock.Call
type MockLBCreateFrontendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBCreateFrontendCall) Return(arg0 *lb.Frontend, arg1 error) *MockLBCreateFrontendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBCreateFrontendCall) Do(f func(context.Context, scw.Zone, string, string, string, int32) (*lb.Frontend, error)) *MockLBCreateFrontendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBCreateFrontendCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, string, int32) (*lb.Frontend, error)) *MockLBCreateFrontendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateLB mocks base method.
func (m *MockLB) CreateLB(ctx context.Context, zone scw.Zone, name, lbType string, ipID *string, private bool, tags []string) (*lb.LB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLB", ctx, zone, name, lbType, ipID, private, tags)
	ret0, _ := ret[0].(*lb.LB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLB indicates an expected call of CreateLB.
func (mr *MockLBMockRecorder) CreateLB(ctx, zone, name, lbType, ipID, private, tags any) *MockLBCreateLBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLB", reflect.TypeOf((*MockLB)(nil).CreateLB), ctx, zone, name, lbType, ipID, private, tags)
	return &MockLBCreateLBCall{Call: call}
}

// MockLBCreateLBCall wrap *gomock.Call
type MockLBCreateLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBCreateLBCall) Return(arg0 *lb.LB, arg1 error) *MockLBCreateLBCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBCreateLBCall) Do(f func(context.Context, scw.Zone, string, string, *string, bool, []string) (*lb.LB, error)) *MockLBCreateLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBCreateLBCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, *string, bool, []string) (*lb.LB, error)) *MockLBCreateLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateLBACL mocks base method.
func (m *MockLB) CreateLBACL(ctx context.Context, zone scw.Zone, frontendID, name string, index int32, action lb.ACLActionType, matchedSubnets []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLBACL", ctx, zone, frontendID, name, index, action, matchedSubnets)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLBACL indicates an expected call of CreateLBACL.
func (mr *MockLBMockRecorder) CreateLBACL(ctx, zone, frontendID, name, index, action, matchedSubnets any) *MockLBCreateLBACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLBACL", reflect.TypeOf((*MockLB)(nil).CreateLBACL), ctx, zone, frontendID, name, index, action, matchedSubnets)
	return &MockLBCreateLBACLCall{Call: call}
}

// MockLBCreateLBACLCall wrap *gomock.Call
type MockLBCreateLBACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBCreateLBACLCall) Return(arg0 error) *MockLBCreateLBACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBCreateLBACLCall) Do(f func(context.Context, scw.Zone, string, string, int32, lb.ACLActionType, []string) error) *MockLBCreateLBACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBCreateLBACLCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, int32, lb.ACLActionType, []string) error) *MockLBCreateLBACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteLB mocks base method.
func (m *MockLB) DeleteLB(ctx context.Context, zone scw.Zone, id string, releaseIP bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLB", ctx, zone, id, releaseIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLB indicates an expected call of DeleteLB.
func (mr *MockLBMockRecorder) DeleteLB(ctx, zone, id, releaseIP any) *MockLBDeleteLBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLB", reflect.TypeOf((*MockLB)(nil).DeleteLB), ctx, zone, id, releaseIP)
	return &MockLBDeleteLBCall{Call: call}
}

// MockLBDeleteLBCall wrap *gomock.Call
type MockLBDeleteLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBDeleteLBCall) Return(arg0 error) *MockLBDeleteLBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBDeleteLBCall) Do(f func(context.Context, scw.Zone, string, bool) error) *MockLBDeleteLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBDeleteLBCall) DoAndReturn(f func(context.Context, scw.Zone, string, bool) error) *MockLBDeleteLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteLBACL mocks base method.
func (m *MockLB) DeleteLBACL(ctx context.Context, zone scw.Zone, aclID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLBACL", ctx, zone, aclID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLBACL indicates an expected call of DeleteLBACL.
func (mr *MockLBMockRecorder) DeleteLBACL(ctx, zone, aclID any) *MockLBDeleteLBACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLBACL", reflect.TypeOf((*MockLB)(nil).DeleteLBACL), ctx, zone, aclID)
	return &MockLBDeleteLBACLCall{Call: call}
}

// MockLBDeleteLBACLCall wrap *gomock.Call
type MockLBDeleteLBACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBDeleteLBACLCall) Return(arg0 error) *MockLBDeleteLBACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBDeleteLBACLCall) Do(f func(context.Context, scw.Zone, string) error) *MockLBDeleteLBACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBDeleteLBACLCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockLBDeleteLBACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindBackend mocks base method.
func (m *MockLB) FindBackend(ctx context.Context, zone scw.Zone, lbID, name string) (*lb.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBackend", ctx, zone, lbID, name)
	ret0, _ := ret[0].(*lb.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBackend indicates an expected call of FindBackend.
func (mr *MockLBMockRecorder) FindBackend(ctx, zone, lbID, name any) *MockLBFindBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBackend", reflect.TypeOf((*MockLB)(nil).FindBackend), ctx, zone, lbID, name)
	return &MockLBFindBackendCall{Call: call}
}

// MockLBFindBackendCall wrap *gomock.Call
type MockLBFindBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBFindBackendCall) Return(arg0 *lb.Backend, arg1 error) *MockLBFindBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBFindBackendCall) Do(f func(context.Context, scw.Zone, string, string) (*lb.Backend, error)) *MockLBFindBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBFindBackendCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*lb.Backend, error)) *MockLBFindBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindFrontend mocks base method.
func (m *MockLB) FindFrontend(ctx context.Context, zone scw.Zone, lbID, name string) (*lb.Frontend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFrontend", ctx, zone, lbID, name)
	ret0, _ := ret[0].(*lb.Frontend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFrontend indicates an expected call of FindFrontend.
func (mr *MockLBMockRecorder) FindFrontend(ctx, zone, lbID, name any) *MockLBFindFrontendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFrontend", reflect.TypeOf((*MockLB)(nil).FindFrontend), ctx, zone, lbID, name)
	return &MockLBFindFrontendCall{Call: call}
}

// MockLBFindFrontendCall wrap *gomock.Call
type MockLBFindFrontendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBFindFrontendCall) Return(arg0 *lb.Frontend, arg1 error) *MockLBFindFrontendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBFindFrontendCall) Do(f func(context.Context, scw.Zone, string, string) (*lb.Frontend, error)) *MockLBFindFrontendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBFindFrontendCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*lb.Frontend, error)) *MockLBFindFrontendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLB mocks base method.
func (m *MockLB) FindLB(ctx context.Context, zone scw.Zone, tags []string) (*lb.LB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLB", ctx, zone, tags)
	ret0, _ := ret[0].(*lb.LB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLB indicates an expected call of FindLB.
func (mr *MockLBMockRecorder) FindLB(ctx, zone, tags any) *MockLBFindLBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLB", reflect.TypeOf((*MockLB)(nil).FindLB), ctx, zone, tags)
	return &MockLBFindLBCall{Call: call}
}

// MockLBFindLBCall wrap *gomock.Call
type MockLBFindLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBFindLBCall) Return(arg0 *lb.LB, arg1 error) *MockLBFindLBCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBFindLBCall) Do(f func(context.Context, scw.Zone, []string) (*lb.LB, error)) *MockLBFindLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBFindLBCall) DoAndReturn(f func(context.Context, scw.Zone, []string) (*lb.LB, error)) *MockLBFindLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLBACLByName mocks base method.
func (m *MockLB) FindLBACLByName(ctx context.Context, zone scw.Zone, frontendID, name string) (*lb.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLBACLByName", ctx, zone, frontendID, name)
	ret0, _ := ret[0].(*lb.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLBACLByName indicates an expected call of FindLBACLByName.
func (mr *MockLBMockRecorder) FindLBACLByName(ctx, zone, frontendID, name any) *MockLBFindLBACLByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLBACLByName", reflect.TypeOf((*MockLB)(nil).FindLBACLByName), ctx, zone, frontendID, name)
	return &MockLBFindLBACLByNameCall{Call: call}
}

// MockLBFindLBACLByNameCall wrap *gomock.Call
type MockLBFindLBACLByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBFindLBACLByNameCall) Return(arg0 *lb.ACL, arg1 error) *MockLBFindLBACLByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBFindLBACLByNameCall) Do(f func(context.Context, scw.Zone, string, string) (*lb.ACL, error)) *MockLBFindLBACLByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBFindLBACLByNameCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*lb.ACL, error)) *MockLBFindLBACLByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLBIP mocks base method.
func (m *MockLB) FindLBIP(ctx context.Context, zone scw.Zone, ip string) (*lb.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLBIP", ctx, zone, ip)
	ret0, _ := ret[0].(*lb.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLBIP indicates an expected call of FindLBIP.
func (mr *MockLBMockRecorder) FindLBIP(ctx, zone, ip any) *MockLBFindLBIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLBIP", reflect.TypeOf((*MockLB)(nil).FindLBIP), ctx, zone, ip)
	return &MockLBFindLBIPCall{Call: call}
}

// MockLBFindLBIPCall wrap *gomock.Call
type MockLBFindLBIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBFindLBIPCall) Return(arg0 *lb.IP, arg1 error) *MockLBFindLBIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBFindLBIPCall) Do(f func(context.Context, scw.Zone, string) (*lb.IP, error)) *MockLBFindLBIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBFindLBIPCall) DoAndReturn(f func(context.Context, scw.Zone, string) (*lb.IP, error)) *MockLBFindLBIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLBPrivateNetwork mocks base method.
func (m *MockLB) FindLBPrivateNetwork(ctx context.Context, zone scw.Zone, lbID, privateNetworkID string) (*lb.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLBPrivateNetwork", ctx, zone, lbID, privateNetworkID)
	ret0, _ := ret[0].(*lb.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLBPrivateNetwork indicates an expected call of FindLBPrivateNetwork.
func (mr *MockLBMockRecorder) FindLBPrivateNetwork(ctx, zone, lbID, privateNetworkID any) *MockLBFindLBPrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLBPrivateNetwork", reflect.TypeOf((*MockLB)(nil).FindLBPrivateNetwork), ctx, zone, lbID, privateNetworkID)
	return &MockLBFindLBPrivateNetworkCall{Call: call}
}

// MockLBFindLBPrivateNetworkCall wrap *gomock.Call
type MockLBFindLBPrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBFindLBPrivateNetworkCall) Return(arg0 *lb.PrivateNetwork, arg1 error) *MockLBFindLBPrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBFindLBPrivateNetworkCall) Do(f func(context.Context, scw.Zone, string, string) (*lb.PrivateNetwork, error)) *MockLBFindLBPrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBFindLBPrivateNetworkCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*lb.PrivateNetwork, error)) *MockLBFindLBPrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLBs mocks base method.
func (m *MockLB) FindLBs(ctx context.Context, tags []string) ([]*lb.LB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLBs", ctx, tags)
	ret0, _ := ret[0].([]*lb.LB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLBs indicates an expected call of FindLBs.
func (mr *MockLBMockRecorder) FindLBs(ctx, tags any) *MockLBFindLBsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLBs", reflect.TypeOf((*MockLB)(nil).FindLBs), ctx, tags)
	return &MockLBFindLBsCall{Call: call}
}

// MockLBFindLBsCall wrap *gomock.Call
type MockLBFindLBsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBFindLBsCall) Return(arg0 []*lb.LB, arg1 error) *MockLBFindLBsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBFindLBsCall) Do(f func(context.Context, []string) ([]*lb.LB, error)) *MockLBFindLBsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBFindLBsCall) DoAndReturn(f func(context.Context, []string) ([]*lb.LB, error)) *MockLBFindLBsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLBACLs mocks base method.
func (m *MockLB) ListLBACLs(ctx context.Context, zone scw.Zone, frontendID string) ([]*lb.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLBACLs", ctx, zone, frontendID)
	ret0, _ := ret[0].([]*lb.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLBACLs indicates an expected call of ListLBACLs.
func (mr *MockLBMockRecorder) ListLBACLs(ctx, zone, frontendID any) *MockLBListLBACLsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLBACLs", reflect.TypeOf((*MockLB)(nil).ListLBACLs), ctx, zone, frontendID)
	return &MockLBListLBACLsCall{Call: call}
}

// MockLBListLBACLsCall wrap *gomock.Call
type MockLBListLBACLsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBListLBACLsCall) Return(arg0 []*lb.ACL, arg1 error) *MockLBListLBACLsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBListLBACLsCall) Do(f func(context.Context, scw.Zone, string) ([]*lb.ACL, error)) *MockLBListLBACLsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBListLBACLsCall) DoAndReturn(f func(context.Context, scw.Zone, string) ([]*lb.ACL, error)) *MockLBListLBACLsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MigrateLB mocks base method.
func (m *MockLB) MigrateLB(ctx context.Context, zone scw.Zone, id, newType string) (*lb.LB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateLB", ctx, zone, id, newType)
	ret0, _ := ret[0].(*lb.LB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateLB indicates an expected call of MigrateLB.
func (mr *MockLBMockRecorder) MigrateLB(ctx, zone, id, newType any) *MockLBMigrateLBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateLB", reflect.TypeOf((*MockLB)(nil).MigrateLB), ctx, zone, id, newType)
	return &MockLBMigrateLBCall{Call: call}
}

// MockLBMigrateLBCall wrap *gomock.Call
type MockLBMigrateLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBMigrateLBCall) Return(arg0 *lb.LB, arg1 error) *MockLBMigrateLBCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBMigrateLBCall) Do(f func(context.Context, scw.Zone, string, string) (*lb.LB, error)) *MockLBMigrateLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBMigrateLBCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*lb.LB, error)) *MockLBMigrateLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveBackendServer mocks base method.
func (m *MockLB) RemoveBackendServer(ctx context.Context, zone scw.Zone, backendID, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBackendServer", ctx, zone, backendID, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBackendServer indicates an expected call of RemoveBackendServer.
func (mr *MockLBMockRecorder) RemoveBackendServer(ctx, zone, backendID, ip any) *MockLBRemoveBackendServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBackendServer", reflect.TypeOf((*MockLB)(nil).RemoveBackendServer), ctx, zone, backendID, ip)
	return &MockLBRemoveBackendServerCall{Call: call}
}

// MockLBRemoveBackendServerCall wrap *gomock.Call
type MockLBRemoveBackendServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBRemoveBackendServerCall) Return(arg0 error) *MockLBRemoveBackendServerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBRemoveBackendServerCall) Do(f func(context.Context, scw.Zone, string, string) error) *MockLBRemoveBackendServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBRemoveBackendServerCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) error) *MockLBRemoveBackendServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetBackendServers mocks base method.
func (m *MockLB) SetBackendServers(ctx context.Context, zone scw.Zone, backendID string, servers []string) (*lb.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBackendServers", ctx, zone, backendID, servers)
	ret0, _ := ret[0].(*lb.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBackendServers indicates an expected call of SetBackendServers.
func (mr *MockLBMockRecorder) SetBackendServers(ctx, zone, backendID, servers any) *MockLBSetBackendServersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackendServers", reflect.TypeOf((*MockLB)(nil).SetBackendServers), ctx, zone, backendID, servers)
	return &MockLBSetBackendServersCall{Call: call}
}

// MockLBSetBackendServersCall wrap *gomock.Call
type MockLBSetBackendServersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBSetBackendServersCall) Return(arg0 *lb.Backend, arg1 error) *MockLBSetBackendServersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBSetBackendServersCall) Do(f func(context.Context, scw.Zone, string, []string) (*lb.Backend, error)) *MockLBSetBackendServersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBSetBackendServersCall) DoAndReturn(f func(context.Context, scw.Zone, string, []string) (*lb.Backend, error)) *MockLBSetBackendServersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetLBACLs mocks base method.
func (m *MockLB) SetLBACLs(ctx context.Context, zone scw.Zone, frontendID string, acls []*lb.ACLSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLBACLs", ctx, zone, frontendID, acls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLBACLs indicates an expected call of SetLBACLs.
func (mr *MockLBMockRecorder) SetLBACLs(ctx, zone, frontendID, acls any) *MockLBSetLBACLsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLBACLs", reflect.TypeOf((*MockLB)(nil).SetLBACLs), ctx, zone, frontendID, acls)
	return &MockLBSetLBACLsCall{Call: call}
}

// MockLBSetLBACLsCall wrap *gomock.Call
type MockLBSetLBACLsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBSetLBACLsCall) Return(arg0 error) *MockLBSetLBACLsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBSetLBACLsCall) Do(f func(context.Context, scw.Zone, string, []*lb.ACLSpec) error) *MockLBSetLBACLsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBSetLBACLsCall) DoAndReturn(f func(context.Context, scw.Zone, string, []*lb.ACLSpec) error) *MockLBSetLBACLsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateLBACL mocks base method.
func (m *MockLB) UpdateLBACL(ctx context.Context, zone scw.Zone, aclID, name string, index int32, action lb.ACLActionType, matchedSubnets []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLBACL", ctx, zone, aclID, name, index, action, matchedSubnets)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLBACL indicates an expected call of UpdateLBACL.
func (mr *MockLBMockRecorder) UpdateLBACL(ctx, zone, aclID, name, index, action, matchedSubnets any) *MockLBUpdateLBACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLBACL", reflect.TypeOf((*MockLB)(nil).UpdateLBACL), ctx, zone, aclID, name, index, action, matchedSubnets)
	return &MockLBUpdateLBACLCall{Call: call}
}

// MockLBUpdateLBACLCall wrap *gomock.Call
type MockLBUpdateLBACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLBUpdateLBACLCall) Return(arg0 error) *MockLBUpdateLBACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLBUpdateLBACLCall) Do(f func(context.Context, scw.Zone, string, string, int32, lb.ACLActionType, []string) error) *MockLBUpdateLBACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLBUpdateLBACLCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, int32, lb.ACLActionType, []string) error) *MockLBUpdateLBACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
