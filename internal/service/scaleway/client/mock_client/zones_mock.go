// Code generated by MockGen. DO NOT EDIT.
// Source: ../zones.go
//
// Generated by this command:
//
//	mockgen -destination zones_mock.go -package mock_client -source ../zones.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockZones is a mock of Zones interface.
type MockZones struct {
	ctrl     *gomock.Controller
	recorder *MockZonesMockRecorder
	isgomock struct{}
}

// MockZonesMockRecorder is the mock recorder for MockZones.
type MockZonesMockRecorder struct {
	mock *MockZones
}

// NewMockZones creates a new mock instance.
func NewMockZones(ctrl *gomock.Controller) *MockZones {
	mock := &MockZones{ctrl: ctrl}
	mock.recorder = &MockZonesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZones) EXPECT() *MockZonesMockRecorder {
	return m.recorder
}

// DefaultZone mocks base method.
func (m *MockZones) DefaultZone() scw.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultZone")
	ret0, _ := ret[0].(scw.Zone)
	return ret0
}

// DefaultZone indicates an expected call of DefaultZone.
func (mr *MockZonesMockRecorder) DefaultZone() *MockZonesDefaultZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultZone", reflect.TypeOf((*MockZones)(nil).DefaultZone))
	return &MockZonesDefaultZoneCall{Call: call}
}

// MockZonesDefaultZoneCall wrap *gomock.Call
type MockZonesDefaultZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonesDefaultZoneCall) Return(arg0 scw.Zone) *MockZonesDefaultZoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonesDefaultZoneCall) Do(f func() scw.Zone) *MockZonesDefaultZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonesDefaultZoneCall) DoAndReturn(f func() scw.Zone) *MockZonesDefaultZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControlPlaneZones mocks base method.
func (m *MockZones) GetControlPlaneZones() []scw.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlPlaneZones")
	ret0, _ := ret[0].([]scw.Zone)
	return ret0
}

// GetControlPlaneZones indicates an expected call of GetControlPlaneZones.
func (mr *MockZonesMockRecorder) GetControlPlaneZones() *MockZonesGetControlPlaneZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlPlaneZones", reflect.TypeOf((*MockZones)(nil).GetControlPlaneZones))
	return &MockZonesGetControlPlaneZonesCall{Call: call}
}

// MockZonesGetControlPlaneZonesCall wrap *gomock.Call
type MockZonesGetControlPlaneZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonesGetControlPlaneZonesCall) Return(arg0 []scw.Zone) *MockZonesGetControlPlaneZonesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonesGetControlPlaneZonesCall) Do(f func() []scw.Zone) *MockZonesGetControlPlaneZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonesGetControlPlaneZonesCall) DoAndReturn(f func() []scw.Zone) *MockZonesGetControlPlaneZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetZoneOrDefault mocks base method.
func (m *MockZones) GetZoneOrDefault(zone *string) (scw.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneOrDefault", zone)
	ret0, _ := ret[0].(scw.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneOrDefault indicates an expected call of GetZoneOrDefault.
func (mr *MockZonesMockRecorder) GetZoneOrDefault(zone any) *MockZonesGetZoneOrDefaultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneOrDefault", reflect.TypeOf((*MockZones)(nil).GetZoneOrDefault), zone)
	return &MockZonesGetZoneOrDefaultCall{Call: call}
}

// MockZonesGetZoneOrDefaultCall wrap *gomock.Call
type MockZonesGetZoneOrDefaultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockZonesGetZoneOrDefaultCall) Return(arg0 scw.Zone, arg1 error) *MockZonesGetZoneOrDefaultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockZonesGetZoneOrDefaultCall) Do(f func(*string) (scw.Zone, error)) *MockZonesGetZoneOrDefaultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockZonesGetZoneOrDefaultCall) DoAndReturn(f func(*string) (scw.Zone, error)) *MockZonesGetZoneOrDefaultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockzonesGetter is a mock of zonesGetter interface.
type MockzonesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockzonesGetterMockRecorder
	isgomock struct{}
}

// MockzonesGetterMockRecorder is the mock recorder for MockzonesGetter.
type MockzonesGetterMockRecorder struct {
	mock *MockzonesGetter
}

// NewMockzonesGetter creates a new mock instance.
func NewMockzonesGetter(ctrl *gomock.Controller) *MockzonesGetter {
	mock := &MockzonesGetter{ctrl: ctrl}
	mock.recorder = &MockzonesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockzonesGetter) EXPECT() *MockzonesGetterMockRecorder {
	return m.recorder
}

// Zones mocks base method.
func (m *MockzonesGetter) Zones() []scw.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zones")
	ret0, _ := ret[0].([]scw.Zone)
	return ret0
}

// Zones indicates an expected call of Zones.
func (mr *MockzonesGetterMockRecorder) Zones() *MockzonesGetterZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zones", reflect.TypeOf((*MockzonesGetter)(nil).Zones))
	return &MockzonesGetterZonesCall{Call: call}
}

// MockzonesGetterZonesCall wrap *gomock.Call
type MockzonesGetterZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockzonesGetterZonesCall) Return(arg0 []scw.Zone) *MockzonesGetterZonesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockzonesGetterZonesCall) Do(f func() []scw.Zone) *MockzonesGetterZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockzonesGetterZonesCall) DoAndReturn(f func() []scw.Zone) *MockzonesGetterZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
