// Code generated by MockGen. DO NOT EDIT.
// Source: ../interface.go
//
// Generated by this command:
//
//	mockgen -destination client_mock.go -package mock_client -source ../interface.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	io "io"
	reflect "reflect"

	block "github.com/scaleway/scaleway-sdk-go/api/block/v1"
	domain "github.com/scaleway/scaleway-sdk-go/api/domain/v2beta1"
	instance "github.com/scaleway/scaleway-sdk-go/api/instance/v1"
	ipam "github.com/scaleway/scaleway-sdk-go/api/ipam/v1"
	lb "github.com/scaleway/scaleway-sdk-go/api/lb/v1"
	marketplace "github.com/scaleway/scaleway-sdk-go/api/marketplace/v2"
	vpc "github.com/scaleway/scaleway-sdk-go/api/vpc/v2"
	vpcgw "github.com/scaleway/scaleway-sdk-go/api/vpcgw/v2"
	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AddBackendServer mocks base method.
func (m *MockInterface) AddBackendServer(ctx context.Context, zone scw.Zone, backendID, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBackendServer", ctx, zone, backendID, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBackendServer indicates an expected call of AddBackendServer.
func (mr *MockInterfaceMockRecorder) AddBackendServer(ctx, zone, backendID, ip any) *MockInterfaceAddBackendServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBackendServer", reflect.TypeOf((*MockInterface)(nil).AddBackendServer), ctx, zone, backendID, ip)
	return &MockInterfaceAddBackendServerCall{Call: call}
}

// MockInterfaceAddBackendServerCall wrap *gomock.Call
type MockInterfaceAddBackendServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceAddBackendServerCall) Return(arg0 error) *MockInterfaceAddBackendServerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceAddBackendServerCall) Do(f func(context.Context, scw.Zone, string, string) error) *MockInterfaceAddBackendServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceAddBackendServerCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) error) *MockInterfaceAddBackendServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AttachLBPrivateNetwork mocks base method.
func (m *MockInterface) AttachLBPrivateNetwork(ctx context.Context, zone scw.Zone, lbID, privateNetworkID string, ipID *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachLBPrivateNetwork", ctx, zone, lbID, privateNetworkID, ipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AttachLBPrivateNetwork indicates an expected call of AttachLBPrivateNetwork.
func (mr *MockInterfaceMockRecorder) AttachLBPrivateNetwork(ctx, zone, lbID, privateNetworkID, ipID any) *MockInterfaceAttachLBPrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachLBPrivateNetwork", reflect.TypeOf((*MockInterface)(nil).AttachLBPrivateNetwork), ctx, zone, lbID, privateNetworkID, ipID)
	return &MockInterfaceAttachLBPrivateNetworkCall{Call: call}
}

// MockInterfaceAttachLBPrivateNetworkCall wrap *gomock.Call
type MockInterfaceAttachLBPrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceAttachLBPrivateNetworkCall) Return(arg0 error) *MockInterfaceAttachLBPrivateNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceAttachLBPrivateNetworkCall) Do(f func(context.Context, scw.Zone, string, string, *string) error) *MockInterfaceAttachLBPrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceAttachLBPrivateNetworkCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, *string) error) *MockInterfaceAttachLBPrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CleanAvailableIPs mocks base method.
func (m *MockInterface) CleanAvailableIPs(ctx context.Context, privateNetworkID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanAvailableIPs", ctx, privateNetworkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanAvailableIPs indicates an expected call of CleanAvailableIPs.
func (mr *MockInterfaceMockRecorder) CleanAvailableIPs(ctx, privateNetworkID any) *MockInterfaceCleanAvailableIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanAvailableIPs", reflect.TypeOf((*MockInterface)(nil).CleanAvailableIPs), ctx, privateNetworkID)
	return &MockInterfaceCleanAvailableIPsCall{Call: call}
}

// MockInterfaceCleanAvailableIPsCall wrap *gomock.Call
type MockInterfaceCleanAvailableIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCleanAvailableIPsCall) Return(arg0 error) *MockInterfaceCleanAvailableIPsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCleanAvailableIPsCall) Do(f func(context.Context, string) error) *MockInterfaceCleanAvailableIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCleanAvailableIPsCall) DoAndReturn(f func(context.Context, string) error) *MockInterfaceCleanAvailableIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateBackend mocks base method.
func (m *MockInterface) CreateBackend(ctx context.Context, zone scw.Zone, lbID, name string, servers []string, port int32) (*lb.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackend", ctx, zone, lbID, name, servers, port)
	ret0, _ := ret[0].(*lb.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackend indicates an expected call of CreateBackend.
func (mr *MockInterfaceMockRecorder) CreateBackend(ctx, zone, lbID, name, servers, port any) *MockInterfaceCreateBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackend", reflect.TypeOf((*MockInterface)(nil).CreateBackend), ctx, zone, lbID, name, servers, port)
	return &MockInterfaceCreateBackendCall{Call: call}
}

// MockInterfaceCreateBackendCall wrap *gomock.Call
type MockInterfaceCreateBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCreateBackendCall) Return(arg0 *lb.Backend, arg1 error) *MockInterfaceCreateBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCreateBackendCall) Do(f func(context.Context, scw.Zone, string, string, []string, int32) (*lb.Backend, error)) *MockInterfaceCreateBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCreateBackendCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, []string, int32) (*lb.Backend, error)) *MockInterfaceCreateBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateFrontend mocks base method.
func (m *MockInterface) CreateFrontend(ctx context.Context, zone scw.Zone, lbID, name, backendID string, port int32) (*lb.Frontend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFrontend", ctx, zone, lbID, name, backendID, port)
	ret0, _ := ret[0].(*lb.Frontend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFrontend indicates an expected call of CreateFrontend.
func (mr *MockInterfaceMockRecorder) CreateFrontend(ctx, zone, lbID, name, backendID, port any) *MockInterfaceCreateFrontendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFrontend", reflect.TypeOf((*MockInterface)(nil).CreateFrontend), ctx, zone, lbID, name, backendID, port)
	return &MockInterfaceCreateFrontendCall{Call: call}
}

// MockInterfaceCreateFrontendCall wrap *gomock.Call
type MockInterfaceCreateFrontendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCreateFrontendCall) Return(arg0 *lb.Frontend, arg1 error) *MockInterfaceCreateFrontendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCreateFrontendCall) Do(f func(context.Context, scw.Zone, string, string, string, int32) (*lb.Frontend, error)) *MockInterfaceCreateFrontendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCreateFrontendCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, string, int32) (*lb.Frontend, error)) *MockInterfaceCreateFrontendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGateway mocks base method.
func (m *MockInterface) CreateGateway(ctx context.Context, zone scw.Zone, name, gwType string, tags []string, ipID *string) (*vpcgw.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGateway", ctx, zone, name, gwType, tags, ipID)
	ret0, _ := ret[0].(*vpcgw.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGateway indicates an expected call of CreateGateway.
func (mr *MockInterfaceMockRecorder) CreateGateway(ctx, zone, name, gwType, tags, ipID any) *MockInterfaceCreateGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGateway", reflect.TypeOf((*MockInterface)(nil).CreateGateway), ctx, zone, name, gwType, tags, ipID)
	return &MockInterfaceCreateGatewayCall{Call: call}
}

// MockInterfaceCreateGatewayCall wrap *gomock.Call
type MockInterfaceCreateGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCreateGatewayCall) Return(arg0 *vpcgw.Gateway, arg1 error) *MockInterfaceCreateGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCreateGatewayCall) Do(f func(context.Context, scw.Zone, string, string, []string, *string) (*vpcgw.Gateway, error)) *MockInterfaceCreateGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCreateGatewayCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, []string, *string) (*vpcgw.Gateway, error)) *MockInterfaceCreateGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGatewayNetwork mocks base method.
func (m *MockInterface) CreateGatewayNetwork(ctx context.Context, zone scw.Zone, gatewayID, privateNetworkID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGatewayNetwork", ctx, zone, gatewayID, privateNetworkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGatewayNetwork indicates an expected call of CreateGatewayNetwork.
func (mr *MockInterfaceMockRecorder) CreateGatewayNetwork(ctx, zone, gatewayID, privateNetworkID any) *MockInterfaceCreateGatewayNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayNetwork", reflect.TypeOf((*MockInterface)(nil).CreateGatewayNetwork), ctx, zone, gatewayID, privateNetworkID)
	return &MockInterfaceCreateGatewayNetworkCall{Call: call}
}

// MockInterfaceCreateGatewayNetworkCall wrap *gomock.Call
type MockInterfaceCreateGatewayNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCreateGatewayNetworkCall) Return(arg0 error) *MockInterfaceCreateGatewayNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCreateGatewayNetworkCall) Do(f func(context.Context, scw.Zone, string, string) error) *MockInterfaceCreateGatewayNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCreateGatewayNetworkCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) error) *MockInterfaceCreateGatewayNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateIP mocks base method.
func (m *MockInterface) CreateIP(ctx context.Context, zone scw.Zone, ipType instance.IPType, tags []string) (*instance.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIP", ctx, zone, ipType, tags)
	ret0, _ := ret[0].(*instance.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIP indicates an expected call of CreateIP.
func (mr *MockInterfaceMockRecorder) CreateIP(ctx, zone, ipType, tags any) *MockInterfaceCreateIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIP", reflect.TypeOf((*MockInterface)(nil).CreateIP), ctx, zone, ipType, tags)
	return &MockInterfaceCreateIPCall{Call: call}
}

// MockInterfaceCreateIPCall wrap *gomock.Call
type MockInterfaceCreateIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCreateIPCall) Return(arg0 *instance.IP, arg1 error) *MockInterfaceCreateIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCreateIPCall) Do(f func(context.Context, scw.Zone, instance.IPType, []string) (*instance.IP, error)) *MockInterfaceCreateIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCreateIPCall) DoAndReturn(f func(context.Context, scw.Zone, instance.IPType, []string) (*instance.IP, error)) *MockInterfaceCreateIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateLB mocks base method.
func (m *MockInterface) CreateLB(ctx context.Context, zone scw.Zone, name, lbType string, ipID *string, private bool, tags []string) (*lb.LB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLB", ctx, zone, name, lbType, ipID, private, tags)
	ret0, _ := ret[0].(*lb.LB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLB indicates an expected call of CreateLB.
func (mr *MockInterfaceMockRecorder) CreateLB(ctx, zone, name, lbType, ipID, private, tags any) *MockInterfaceCreateLBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLB", reflect.TypeOf((*MockInterface)(nil).CreateLB), ctx, zone, name, lbType, ipID, private, tags)
	return &MockInterfaceCreateLBCall{Call: call}
}

// MockInterfaceCreateLBCall wrap *gomock.Call
type MockInterfaceCreateLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCreateLBCall) Return(arg0 *lb.LB, arg1 error) *MockInterfaceCreateLBCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCreateLBCall) Do(f func(context.Context, scw.Zone, string, string, *string, bool, []string) (*lb.LB, error)) *MockInterfaceCreateLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCreateLBCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, *string, bool, []string) (*lb.LB, error)) *MockInterfaceCreateLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateLBACL mocks base method.
func (m *MockInterface) CreateLBACL(ctx context.Context, zone scw.Zone, frontendID, name string, index int32, action lb.ACLActionType, matchedSubnets []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLBACL", ctx, zone, frontendID, name, index, action, matchedSubnets)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLBACL indicates an expected call of CreateLBACL.
func (mr *MockInterfaceMockRecorder) CreateLBACL(ctx, zone, frontendID, name, index, action, matchedSubnets any) *MockInterfaceCreateLBACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLBACL", reflect.TypeOf((*MockInterface)(nil).CreateLBACL), ctx, zone, frontendID, name, index, action, matchedSubnets)
	return &MockInterfaceCreateLBACLCall{Call: call}
}

// MockInterfaceCreateLBACLCall wrap *gomock.Call
type MockInterfaceCreateLBACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCreateLBACLCall) Return(arg0 error) *MockInterfaceCreateLBACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCreateLBACLCall) Do(f func(context.Context, scw.Zone, string, string, int32, lb.ACLActionType, []string) error) *MockInterfaceCreateLBACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCreateLBACLCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, int32, lb.ACLActionType, []string) error) *MockInterfaceCreateLBACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePrivateNIC mocks base method.
func (m *MockInterface) CreatePrivateNIC(ctx context.Context, zone scw.Zone, serverID, privateNetworkID string) (*instance.PrivateNIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateNIC", ctx, zone, serverID, privateNetworkID)
	ret0, _ := ret[0].(*instance.PrivateNIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateNIC indicates an expected call of CreatePrivateNIC.
func (mr *MockInterfaceMockRecorder) CreatePrivateNIC(ctx, zone, serverID, privateNetworkID any) *MockInterfaceCreatePrivateNICCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateNIC", reflect.TypeOf((*MockInterface)(nil).CreatePrivateNIC), ctx, zone, serverID, privateNetworkID)
	return &MockInterfaceCreatePrivateNICCall{Call: call}
}

// MockInterfaceCreatePrivateNICCall wrap *gomock.Call
type MockInterfaceCreatePrivateNICCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCreatePrivateNICCall) Return(arg0 *instance.PrivateNIC, arg1 error) *MockInterfaceCreatePrivateNICCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCreatePrivateNICCall) Do(f func(context.Context, scw.Zone, string, string) (*instance.PrivateNIC, error)) *MockInterfaceCreatePrivateNICCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCreatePrivateNICCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*instance.PrivateNIC, error)) *MockInterfaceCreatePrivateNICCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePrivateNetwork mocks base method.
func (m *MockInterface) CreatePrivateNetwork(ctx context.Context, name string, vpcID, subnet *string, tags []string) (*vpc.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateNetwork", ctx, name, vpcID, subnet, tags)
	ret0, _ := ret[0].(*vpc.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateNetwork indicates an expected call of CreatePrivateNetwork.
func (mr *MockInterfaceMockRecorder) CreatePrivateNetwork(ctx, name, vpcID, subnet, tags any) *MockInterfaceCreatePrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateNetwork", reflect.TypeOf((*MockInterface)(nil).CreatePrivateNetwork), ctx, name, vpcID, subnet, tags)
	return &MockInterfaceCreatePrivateNetworkCall{Call: call}
}

// MockInterfaceCreatePrivateNetworkCall wrap *gomock.Call
type MockInterfaceCreatePrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCreatePrivateNetworkCall) Return(arg0 *vpc.PrivateNetwork, arg1 error) *MockInterfaceCreatePrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCreatePrivateNetworkCall) Do(f func(context.Context, string, *string, *string, []string) (*vpc.PrivateNetwork, error)) *MockInterfaceCreatePrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCreatePrivateNetworkCall) DoAndReturn(f func(context.Context, string, *string, *string, []string) (*vpc.PrivateNetwork, error)) *MockInterfaceCreatePrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateServer mocks base method.
func (m *MockInterface) CreateServer(ctx context.Context, zone scw.Zone, name, commercialType, imageID string, placementGroupID, securityGroupID *string, rootVolumeSize scw.Size, rootVolumeType instance.VolumeVolumeType, publicIPs, tags []string) (*instance.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, zone, name, commercialType, imageID, placementGroupID, securityGroupID, rootVolumeSize, rootVolumeType, publicIPs, tags)
	ret0, _ := ret[0].(*instance.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockInterfaceMockRecorder) CreateServer(ctx, zone, name, commercialType, imageID, placementGroupID, securityGroupID, rootVolumeSize, rootVolumeType, publicIPs, tags any) *MockInterfaceCreateServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockInterface)(nil).CreateServer), ctx, zone, name, commercialType, imageID, placementGroupID, securityGroupID, rootVolumeSize, rootVolumeType, publicIPs, tags)
	return &MockInterfaceCreateServerCall{Call: call}
}

// MockInterfaceCreateServerCall wrap *gomock.Call
type MockInterfaceCreateServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceCreateServerCall) Return(arg0 *instance.Server, arg1 error) *MockInterfaceCreateServerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceCreateServerCall) Do(f func(context.Context, scw.Zone, string, string, string, *string, *string, scw.Size, instance.VolumeVolumeType, []string, []string) (*instance.Server, error)) *MockInterfaceCreateServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceCreateServerCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, string, *string, *string, scw.Size, instance.VolumeVolumeType, []string, []string) (*instance.Server, error)) *MockInterfaceCreateServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DefaultZone mocks base method.
func (m *MockInterface) DefaultZone() scw.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultZone")
	ret0, _ := ret[0].(scw.Zone)
	return ret0
}

// DefaultZone indicates an expected call of DefaultZone.
func (mr *MockInterfaceMockRecorder) DefaultZone() *MockInterfaceDefaultZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultZone", reflect.TypeOf((*MockInterface)(nil).DefaultZone))
	return &MockInterfaceDefaultZoneCall{Call: call}
}

// MockInterfaceDefaultZoneCall wrap *gomock.Call
type MockInterfaceDefaultZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDefaultZoneCall) Return(arg0 scw.Zone) *MockInterfaceDefaultZoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDefaultZoneCall) Do(f func() scw.Zone) *MockInterfaceDefaultZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDefaultZoneCall) DoAndReturn(f func() scw.Zone) *MockInterfaceDefaultZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDNSZoneRecords mocks base method.
func (m *MockInterface) DeleteDNSZoneRecords(ctx context.Context, zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNSZoneRecords", ctx, zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDNSZoneRecords indicates an expected call of DeleteDNSZoneRecords.
func (mr *MockInterfaceMockRecorder) DeleteDNSZoneRecords(ctx, zone, name any) *MockInterfaceDeleteDNSZoneRecordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNSZoneRecords", reflect.TypeOf((*MockInterface)(nil).DeleteDNSZoneRecords), ctx, zone, name)
	return &MockInterfaceDeleteDNSZoneRecordsCall{Call: call}
}

// MockInterfaceDeleteDNSZoneRecordsCall wrap *gomock.Call
type MockInterfaceDeleteDNSZoneRecordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteDNSZoneRecordsCall) Return(arg0 error) *MockInterfaceDeleteDNSZoneRecordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteDNSZoneRecordsCall) Do(f func(context.Context, string, string) error) *MockInterfaceDeleteDNSZoneRecordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteDNSZoneRecordsCall) DoAndReturn(f func(context.Context, string, string) error) *MockInterfaceDeleteDNSZoneRecordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGateway mocks base method.
func (m *MockInterface) DeleteGateway(ctx context.Context, zone scw.Zone, id string, deleteIP bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGateway", ctx, zone, id, deleteIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGateway indicates an expected call of DeleteGateway.
func (mr *MockInterfaceMockRecorder) DeleteGateway(ctx, zone, id, deleteIP any) *MockInterfaceDeleteGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockInterface)(nil).DeleteGateway), ctx, zone, id, deleteIP)
	return &MockInterfaceDeleteGatewayCall{Call: call}
}

// MockInterfaceDeleteGatewayCall wrap *gomock.Call
type MockInterfaceDeleteGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteGatewayCall) Return(arg0 error) *MockInterfaceDeleteGatewayCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteGatewayCall) Do(f func(context.Context, scw.Zone, string, bool) error) *MockInterfaceDeleteGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteGatewayCall) DoAndReturn(f func(context.Context, scw.Zone, string, bool) error) *MockInterfaceDeleteGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteIP mocks base method.
func (m *MockInterface) DeleteIP(ctx context.Context, zone scw.Zone, ipID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIP", ctx, zone, ipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIP indicates an expected call of DeleteIP.
func (mr *MockInterfaceMockRecorder) DeleteIP(ctx, zone, ipID any) *MockInterfaceDeleteIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIP", reflect.TypeOf((*MockInterface)(nil).DeleteIP), ctx, zone, ipID)
	return &MockInterfaceDeleteIPCall{Call: call}
}

// MockInterfaceDeleteIPCall wrap *gomock.Call
type MockInterfaceDeleteIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteIPCall) Return(arg0 error) *MockInterfaceDeleteIPCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteIPCall) Do(f func(context.Context, scw.Zone, string) error) *MockInterfaceDeleteIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteIPCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockInterfaceDeleteIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteInstanceVolume mocks base method.
func (m *MockInterface) DeleteInstanceVolume(ctx context.Context, zone scw.Zone, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceVolume", ctx, zone, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceVolume indicates an expected call of DeleteInstanceVolume.
func (mr *MockInterfaceMockRecorder) DeleteInstanceVolume(ctx, zone, volumeID any) *MockInterfaceDeleteInstanceVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceVolume", reflect.TypeOf((*MockInterface)(nil).DeleteInstanceVolume), ctx, zone, volumeID)
	return &MockInterfaceDeleteInstanceVolumeCall{Call: call}
}

// MockInterfaceDeleteInstanceVolumeCall wrap *gomock.Call
type MockInterfaceDeleteInstanceVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteInstanceVolumeCall) Return(arg0 error) *MockInterfaceDeleteInstanceVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteInstanceVolumeCall) Do(f func(context.Context, scw.Zone, string) error) *MockInterfaceDeleteInstanceVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteInstanceVolumeCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockInterfaceDeleteInstanceVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteLB mocks base method.
func (m *MockInterface) DeleteLB(ctx context.Context, zone scw.Zone, id string, releaseIP bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLB", ctx, zone, id, releaseIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLB indicates an expected call of DeleteLB.
func (mr *MockInterfaceMockRecorder) DeleteLB(ctx, zone, id, releaseIP any) *MockInterfaceDeleteLBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLB", reflect.TypeOf((*MockInterface)(nil).DeleteLB), ctx, zone, id, releaseIP)
	return &MockInterfaceDeleteLBCall{Call: call}
}

// MockInterfaceDeleteLBCall wrap *gomock.Call
type MockInterfaceDeleteLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteLBCall) Return(arg0 error) *MockInterfaceDeleteLBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteLBCall) Do(f func(context.Context, scw.Zone, string, bool) error) *MockInterfaceDeleteLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteLBCall) DoAndReturn(f func(context.Context, scw.Zone, string, bool) error) *MockInterfaceDeleteLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteLBACL mocks base method.
func (m *MockInterface) DeleteLBACL(ctx context.Context, zone scw.Zone, aclID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLBACL", ctx, zone, aclID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLBACL indicates an expected call of DeleteLBACL.
func (mr *MockInterfaceMockRecorder) DeleteLBACL(ctx, zone, aclID any) *MockInterfaceDeleteLBACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLBACL", reflect.TypeOf((*MockInterface)(nil).DeleteLBACL), ctx, zone, aclID)
	return &MockInterfaceDeleteLBACLCall{Call: call}
}

// MockInterfaceDeleteLBACLCall wrap *gomock.Call
type MockInterfaceDeleteLBACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteLBACLCall) Return(arg0 error) *MockInterfaceDeleteLBACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteLBACLCall) Do(f func(context.Context, scw.Zone, string) error) *MockInterfaceDeleteLBACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteLBACLCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockInterfaceDeleteLBACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePrivateNetwork mocks base method.
func (m *MockInterface) DeletePrivateNetwork(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateNetwork", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrivateNetwork indicates an expected call of DeletePrivateNetwork.
func (mr *MockInterfaceMockRecorder) DeletePrivateNetwork(ctx, id any) *MockInterfaceDeletePrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateNetwork", reflect.TypeOf((*MockInterface)(nil).DeletePrivateNetwork), ctx, id)
	return &MockInterfaceDeletePrivateNetworkCall{Call: call}
}

// MockInterfaceDeletePrivateNetworkCall wrap *gomock.Call
type MockInterfaceDeletePrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeletePrivateNetworkCall) Return(arg0 error) *MockInterfaceDeletePrivateNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeletePrivateNetworkCall) Do(f func(context.Context, string) error) *MockInterfaceDeletePrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeletePrivateNetworkCall) DoAndReturn(f func(context.Context, string) error) *MockInterfaceDeletePrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteServer mocks base method.
func (m *MockInterface) DeleteServer(ctx context.Context, zone scw.Zone, serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", ctx, zone, serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockInterfaceMockRecorder) DeleteServer(ctx, zone, serverID any) *MockInterfaceDeleteServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockInterface)(nil).DeleteServer), ctx, zone, serverID)
	return &MockInterfaceDeleteServerCall{Call: call}
}

// MockInterfaceDeleteServerCall wrap *gomock.Call
type MockInterfaceDeleteServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteServerCall) Return(arg0 error) *MockInterfaceDeleteServerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteServerCall) Do(f func(context.Context, scw.Zone, string) error) *MockInterfaceDeleteServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteServerCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockInterfaceDeleteServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteServerUserData mocks base method.
func (m *MockInterface) DeleteServerUserData(ctx context.Context, zone scw.Zone, serverID, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerUserData", ctx, zone, serverID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerUserData indicates an expected call of DeleteServerUserData.
func (mr *MockInterfaceMockRecorder) DeleteServerUserData(ctx, zone, serverID, key any) *MockInterfaceDeleteServerUserDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerUserData", reflect.TypeOf((*MockInterface)(nil).DeleteServerUserData), ctx, zone, serverID, key)
	return &MockInterfaceDeleteServerUserDataCall{Call: call}
}

// MockInterfaceDeleteServerUserDataCall wrap *gomock.Call
type MockInterfaceDeleteServerUserDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteServerUserDataCall) Return(arg0 error) *MockInterfaceDeleteServerUserDataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteServerUserDataCall) Do(f func(context.Context, scw.Zone, string, string) error) *MockInterfaceDeleteServerUserDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteServerUserDataCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) error) *MockInterfaceDeleteServerUserDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteVolume mocks base method.
func (m *MockInterface) DeleteVolume(ctx context.Context, zone scw.Zone, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, zone, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockInterfaceMockRecorder) DeleteVolume(ctx, zone, volumeID any) *MockInterfaceDeleteVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockInterface)(nil).DeleteVolume), ctx, zone, volumeID)
	return &MockInterfaceDeleteVolumeCall{Call: call}
}

// MockInterfaceDeleteVolumeCall wrap *gomock.Call
type MockInterfaceDeleteVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDeleteVolumeCall) Return(arg0 error) *MockInterfaceDeleteVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDeleteVolumeCall) Do(f func(context.Context, scw.Zone, string) error) *MockInterfaceDeleteVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDeleteVolumeCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockInterfaceDeleteVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DetachVolume mocks base method.
func (m *MockInterface) DetachVolume(ctx context.Context, zone scw.Zone, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolume", ctx, zone, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachVolume indicates an expected call of DetachVolume.
func (mr *MockInterfaceMockRecorder) DetachVolume(ctx, zone, volumeID any) *MockInterfaceDetachVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume", reflect.TypeOf((*MockInterface)(nil).DetachVolume), ctx, zone, volumeID)
	return &MockInterfaceDetachVolumeCall{Call: call}
}

// MockInterfaceDetachVolumeCall wrap *gomock.Call
type MockInterfaceDetachVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceDetachVolumeCall) Return(arg0 error) *MockInterfaceDetachVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceDetachVolumeCall) Do(f func(context.Context, scw.Zone, string) error) *MockInterfaceDetachVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceDetachVolumeCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockInterfaceDetachVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindAvailableIPs mocks base method.
func (m *MockInterface) FindAvailableIPs(ctx context.Context, privateNetworkID string) ([]*ipam.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAvailableIPs", ctx, privateNetworkID)
	ret0, _ := ret[0].([]*ipam.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAvailableIPs indicates an expected call of FindAvailableIPs.
func (mr *MockInterfaceMockRecorder) FindAvailableIPs(ctx, privateNetworkID any) *MockInterfaceFindAvailableIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAvailableIPs", reflect.TypeOf((*MockInterface)(nil).FindAvailableIPs), ctx, privateNetworkID)
	return &MockInterfaceFindAvailableIPsCall{Call: call}
}

// MockInterfaceFindAvailableIPsCall wrap *gomock.Call
type MockInterfaceFindAvailableIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindAvailableIPsCall) Return(arg0 []*ipam.IP, arg1 error) *MockInterfaceFindAvailableIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindAvailableIPsCall) Do(f func(context.Context, string) ([]*ipam.IP, error)) *MockInterfaceFindAvailableIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindAvailableIPsCall) DoAndReturn(f func(context.Context, string) ([]*ipam.IP, error)) *MockInterfaceFindAvailableIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindBackend mocks base method.
func (m *MockInterface) FindBackend(ctx context.Context, zone scw.Zone, lbID, name string) (*lb.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBackend", ctx, zone, lbID, name)
	ret0, _ := ret[0].(*lb.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBackend indicates an expected call of FindBackend.
func (mr *MockInterfaceMockRecorder) FindBackend(ctx, zone, lbID, name any) *MockInterfaceFindBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBackend", reflect.TypeOf((*MockInterface)(nil).FindBackend), ctx, zone, lbID, name)
	return &MockInterfaceFindBackendCall{Call: call}
}

// MockInterfaceFindBackendCall wrap *gomock.Call
type MockInterfaceFindBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindBackendCall) Return(arg0 *lb.Backend, arg1 error) *MockInterfaceFindBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindBackendCall) Do(f func(context.Context, scw.Zone, string, string) (*lb.Backend, error)) *MockInterfaceFindBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindBackendCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*lb.Backend, error)) *MockInterfaceFindBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindFrontend mocks base method.
func (m *MockInterface) FindFrontend(ctx context.Context, zone scw.Zone, lbID, name string) (*lb.Frontend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFrontend", ctx, zone, lbID, name)
	ret0, _ := ret[0].(*lb.Frontend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFrontend indicates an expected call of FindFrontend.
func (mr *MockInterfaceMockRecorder) FindFrontend(ctx, zone, lbID, name any) *MockInterfaceFindFrontendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFrontend", reflect.TypeOf((*MockInterface)(nil).FindFrontend), ctx, zone, lbID, name)
	return &MockInterfaceFindFrontendCall{Call: call}
}

// MockInterfaceFindFrontendCall wrap *gomock.Call
type MockInterfaceFindFrontendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindFrontendCall) Return(arg0 *lb.Frontend, arg1 error) *MockInterfaceFindFrontendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindFrontendCall) Do(f func(context.Context, scw.Zone, string, string) (*lb.Frontend, error)) *MockInterfaceFindFrontendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindFrontendCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*lb.Frontend, error)) *MockInterfaceFindFrontendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindGatewayIP mocks base method.
func (m *MockInterface) FindGatewayIP(ctx context.Context, zone scw.Zone, ip string) (*vpcgw.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGatewayIP", ctx, zone, ip)
	ret0, _ := ret[0].(*vpcgw.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGatewayIP indicates an expected call of FindGatewayIP.
func (mr *MockInterfaceMockRecorder) FindGatewayIP(ctx, zone, ip any) *MockInterfaceFindGatewayIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGatewayIP", reflect.TypeOf((*MockInterface)(nil).FindGatewayIP), ctx, zone, ip)
	return &MockInterfaceFindGatewayIPCall{Call: call}
}

// MockInterfaceFindGatewayIPCall wrap *gomock.Call
type MockInterfaceFindGatewayIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindGatewayIPCall) Return(arg0 *vpcgw.IP, arg1 error) *MockInterfaceFindGatewayIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindGatewayIPCall) Do(f func(context.Context, scw.Zone, string) (*vpcgw.IP, error)) *MockInterfaceFindGatewayIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindGatewayIPCall) DoAndReturn(f func(context.Context, scw.Zone, string) (*vpcgw.IP, error)) *MockInterfaceFindGatewayIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindGateways mocks base method.
func (m *MockInterface) FindGateways(ctx context.Context, tags []string) ([]*vpcgw.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGateways", ctx, tags)
	ret0, _ := ret[0].([]*vpcgw.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGateways indicates an expected call of FindGateways.
func (mr *MockInterfaceMockRecorder) FindGateways(ctx, tags any) *MockInterfaceFindGatewaysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGateways", reflect.TypeOf((*MockInterface)(nil).FindGateways), ctx, tags)
	return &MockInterfaceFindGatewaysCall{Call: call}
}

// MockInterfaceFindGatewaysCall wrap *gomock.Call
type MockInterfaceFindGatewaysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindGatewaysCall) Return(arg0 []*vpcgw.Gateway, arg1 error) *MockInterfaceFindGatewaysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindGatewaysCall) Do(f func(context.Context, []string) ([]*vpcgw.Gateway, error)) *MockInterfaceFindGatewaysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindGatewaysCall) DoAndReturn(f func(context.Context, []string) ([]*vpcgw.Gateway, error)) *MockInterfaceFindGatewaysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindIPs mocks base method.
func (m *MockInterface) FindIPs(ctx context.Context, zone scw.Zone, tags []string) ([]*instance.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIPs", ctx, zone, tags)
	ret0, _ := ret[0].([]*instance.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIPs indicates an expected call of FindIPs.
func (mr *MockInterfaceMockRecorder) FindIPs(ctx, zone, tags any) *MockInterfaceFindIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIPs", reflect.TypeOf((*MockInterface)(nil).FindIPs), ctx, zone, tags)
	return &MockInterfaceFindIPsCall{Call: call}
}

// MockInterfaceFindIPsCall wrap *gomock.Call
type MockInterfaceFindIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindIPsCall) Return(arg0 []*instance.IP, arg1 error) *MockInterfaceFindIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindIPsCall) Do(f func(context.Context, scw.Zone, []string) ([]*instance.IP, error)) *MockInterfaceFindIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindIPsCall) DoAndReturn(f func(context.Context, scw.Zone, []string) ([]*instance.IP, error)) *MockInterfaceFindIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindImage mocks base method.
func (m *MockInterface) FindImage(ctx context.Context, zone scw.Zone, name string) (*instance.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindImage", ctx, zone, name)
	ret0, _ := ret[0].(*instance.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindImage indicates an expected call of FindImage.
func (mr *MockInterfaceMockRecorder) FindImage(ctx, zone, name any) *MockInterfaceFindImageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindImage", reflect.TypeOf((*MockInterface)(nil).FindImage), ctx, zone, name)
	return &MockInterfaceFindImageCall{Call: call}
}

// MockInterfaceFindImageCall wrap *gomock.Call
type MockInterfaceFindImageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindImageCall) Return(arg0 *instance.Image, arg1 error) *MockInterfaceFindImageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindImageCall) Do(f func(context.Context, scw.Zone, string) (*instance.Image, error)) *MockInterfaceFindImageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindImageCall) DoAndReturn(f func(context.Context, scw.Zone, string) (*instance.Image, error)) *MockInterfaceFindImageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindInstanceVolume mocks base method.
func (m *MockInterface) FindInstanceVolume(ctx context.Context, zone scw.Zone, tags []string) (*instance.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInstanceVolume", ctx, zone, tags)
	ret0, _ := ret[0].(*instance.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInstanceVolume indicates an expected call of FindInstanceVolume.
func (mr *MockInterfaceMockRecorder) FindInstanceVolume(ctx, zone, tags any) *MockInterfaceFindInstanceVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInstanceVolume", reflect.TypeOf((*MockInterface)(nil).FindInstanceVolume), ctx, zone, tags)
	return &MockInterfaceFindInstanceVolumeCall{Call: call}
}

// MockInterfaceFindInstanceVolumeCall wrap *gomock.Call
type MockInterfaceFindInstanceVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindInstanceVolumeCall) Return(arg0 *instance.Volume, arg1 error) *MockInterfaceFindInstanceVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindInstanceVolumeCall) Do(f func(context.Context, scw.Zone, []string) (*instance.Volume, error)) *MockInterfaceFindInstanceVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindInstanceVolumeCall) DoAndReturn(f func(context.Context, scw.Zone, []string) (*instance.Volume, error)) *MockInterfaceFindInstanceVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLB mocks base method.
func (m *MockInterface) FindLB(ctx context.Context, zone scw.Zone, tags []string) (*lb.LB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLB", ctx, zone, tags)
	ret0, _ := ret[0].(*lb.LB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLB indicates an expected call of FindLB.
func (mr *MockInterfaceMockRecorder) FindLB(ctx, zone, tags any) *MockInterfaceFindLBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLB", reflect.TypeOf((*MockInterface)(nil).FindLB), ctx, zone, tags)
	return &MockInterfaceFindLBCall{Call: call}
}

// MockInterfaceFindLBCall wrap *gomock.Call
type MockInterfaceFindLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindLBCall) Return(arg0 *lb.LB, arg1 error) *MockInterfaceFindLBCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindLBCall) Do(f func(context.Context, scw.Zone, []string) (*lb.LB, error)) *MockInterfaceFindLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindLBCall) DoAndReturn(f func(context.Context, scw.Zone, []string) (*lb.LB, error)) *MockInterfaceFindLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLBACLByName mocks base method.
func (m *MockInterface) FindLBACLByName(ctx context.Context, zone scw.Zone, frontendID, name string) (*lb.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLBACLByName", ctx, zone, frontendID, name)
	ret0, _ := ret[0].(*lb.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLBACLByName indicates an expected call of FindLBACLByName.
func (mr *MockInterfaceMockRecorder) FindLBACLByName(ctx, zone, frontendID, name any) *MockInterfaceFindLBACLByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLBACLByName", reflect.TypeOf((*MockInterface)(nil).FindLBACLByName), ctx, zone, frontendID, name)
	return &MockInterfaceFindLBACLByNameCall{Call: call}
}

// MockInterfaceFindLBACLByNameCall wrap *gomock.Call
type MockInterfaceFindLBACLByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindLBACLByNameCall) Return(arg0 *lb.ACL, arg1 error) *MockInterfaceFindLBACLByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindLBACLByNameCall) Do(f func(context.Context, scw.Zone, string, string) (*lb.ACL, error)) *MockInterfaceFindLBACLByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindLBACLByNameCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*lb.ACL, error)) *MockInterfaceFindLBACLByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLBIP mocks base method.
func (m *MockInterface) FindLBIP(ctx context.Context, zone scw.Zone, ip string) (*lb.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLBIP", ctx, zone, ip)
	ret0, _ := ret[0].(*lb.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLBIP indicates an expected call of FindLBIP.
func (mr *MockInterfaceMockRecorder) FindLBIP(ctx, zone, ip any) *MockInterfaceFindLBIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLBIP", reflect.TypeOf((*MockInterface)(nil).FindLBIP), ctx, zone, ip)
	return &MockInterfaceFindLBIPCall{Call: call}
}

// MockInterfaceFindLBIPCall wrap *gomock.Call
type MockInterfaceFindLBIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindLBIPCall) Return(arg0 *lb.IP, arg1 error) *MockInterfaceFindLBIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindLBIPCall) Do(f func(context.Context, scw.Zone, string) (*lb.IP, error)) *MockInterfaceFindLBIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindLBIPCall) DoAndReturn(f func(context.Context, scw.Zone, string) (*lb.IP, error)) *MockInterfaceFindLBIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLBPrivateNetwork mocks base method.
func (m *MockInterface) FindLBPrivateNetwork(ctx context.Context, zone scw.Zone, lbID, privateNetworkID string) (*lb.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLBPrivateNetwork", ctx, zone, lbID, privateNetworkID)
	ret0, _ := ret[0].(*lb.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLBPrivateNetwork indicates an expected call of FindLBPrivateNetwork.
func (mr *MockInterfaceMockRecorder) FindLBPrivateNetwork(ctx, zone, lbID, privateNetworkID any) *MockInterfaceFindLBPrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLBPrivateNetwork", reflect.TypeOf((*MockInterface)(nil).FindLBPrivateNetwork), ctx, zone, lbID, privateNetworkID)
	return &MockInterfaceFindLBPrivateNetworkCall{Call: call}
}

// MockInterfaceFindLBPrivateNetworkCall wrap *gomock.Call
type MockInterfaceFindLBPrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindLBPrivateNetworkCall) Return(arg0 *lb.PrivateNetwork, arg1 error) *MockInterfaceFindLBPrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindLBPrivateNetworkCall) Do(f func(context.Context, scw.Zone, string, string) (*lb.PrivateNetwork, error)) *MockInterfaceFindLBPrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindLBPrivateNetworkCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*lb.PrivateNetwork, error)) *MockInterfaceFindLBPrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLBServersIPs mocks base method.
func (m *MockInterface) FindLBServersIPs(ctx context.Context, privateNetworkID string, lbIDs []string) ([]*ipam.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLBServersIPs", ctx, privateNetworkID, lbIDs)
	ret0, _ := ret[0].([]*ipam.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLBServersIPs indicates an expected call of FindLBServersIPs.
func (mr *MockInterfaceMockRecorder) FindLBServersIPs(ctx, privateNetworkID, lbIDs any) *MockInterfaceFindLBServersIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLBServersIPs", reflect.TypeOf((*MockInterface)(nil).FindLBServersIPs), ctx, privateNetworkID, lbIDs)
	return &MockInterfaceFindLBServersIPsCall{Call: call}
}

// MockInterfaceFindLBServersIPsCall wrap *gomock.Call
type MockInterfaceFindLBServersIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindLBServersIPsCall) Return(arg0 []*ipam.IP, arg1 error) *MockInterfaceFindLBServersIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindLBServersIPsCall) Do(f func(context.Context, string, []string) ([]*ipam.IP, error)) *MockInterfaceFindLBServersIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindLBServersIPsCall) DoAndReturn(f func(context.Context, string, []string) ([]*ipam.IP, error)) *MockInterfaceFindLBServersIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindLBs mocks base method.
func (m *MockInterface) FindLBs(ctx context.Context, tags []string) ([]*lb.LB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLBs", ctx, tags)
	ret0, _ := ret[0].([]*lb.LB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLBs indicates an expected call of FindLBs.
func (mr *MockInterfaceMockRecorder) FindLBs(ctx, tags any) *MockInterfaceFindLBsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLBs", reflect.TypeOf((*MockInterface)(nil).FindLBs), ctx, tags)
	return &MockInterfaceFindLBsCall{Call: call}
}

// MockInterfaceFindLBsCall wrap *gomock.Call
type MockInterfaceFindLBsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindLBsCall) Return(arg0 []*lb.LB, arg1 error) *MockInterfaceFindLBsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindLBsCall) Do(f func(context.Context, []string) ([]*lb.LB, error)) *MockInterfaceFindLBsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindLBsCall) DoAndReturn(f func(context.Context, []string) ([]*lb.LB, error)) *MockInterfaceFindLBsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindPlacementGroup mocks base method.
func (m *MockInterface) FindPlacementGroup(ctx context.Context, zone scw.Zone, name string) (*instance.PlacementGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlacementGroup", ctx, zone, name)
	ret0, _ := ret[0].(*instance.PlacementGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPlacementGroup indicates an expected call of FindPlacementGroup.
func (mr *MockInterfaceMockRecorder) FindPlacementGroup(ctx, zone, name any) *MockInterfaceFindPlacementGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlacementGroup", reflect.TypeOf((*MockInterface)(nil).FindPlacementGroup), ctx, zone, name)
	return &MockInterfaceFindPlacementGroupCall{Call: call}
}

// MockInterfaceFindPlacementGroupCall wrap *gomock.Call
type MockInterfaceFindPlacementGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindPlacementGroupCall) Return(arg0 *instance.PlacementGroup, arg1 error) *MockInterfaceFindPlacementGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindPlacementGroupCall) Do(f func(context.Context, scw.Zone, string) (*instance.PlacementGroup, error)) *MockInterfaceFindPlacementGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindPlacementGroupCall) DoAndReturn(f func(context.Context, scw.Zone, string) (*instance.PlacementGroup, error)) *MockInterfaceFindPlacementGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindPrivateNICIPs mocks base method.
func (m *MockInterface) FindPrivateNICIPs(ctx context.Context, privateNICID string) ([]*ipam.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrivateNICIPs", ctx, privateNICID)
	ret0, _ := ret[0].([]*ipam.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrivateNICIPs indicates an expected call of FindPrivateNICIPs.
func (mr *MockInterfaceMockRecorder) FindPrivateNICIPs(ctx, privateNICID any) *MockInterfaceFindPrivateNICIPsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrivateNICIPs", reflect.TypeOf((*MockInterface)(nil).FindPrivateNICIPs), ctx, privateNICID)
	return &MockInterfaceFindPrivateNICIPsCall{Call: call}
}

// MockInterfaceFindPrivateNICIPsCall wrap *gomock.Call
type MockInterfaceFindPrivateNICIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindPrivateNICIPsCall) Return(arg0 []*ipam.IP, arg1 error) *MockInterfaceFindPrivateNICIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindPrivateNICIPsCall) Do(f func(context.Context, string) ([]*ipam.IP, error)) *MockInterfaceFindPrivateNICIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindPrivateNICIPsCall) DoAndReturn(f func(context.Context, string) ([]*ipam.IP, error)) *MockInterfaceFindPrivateNICIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindPrivateNetwork mocks base method.
func (m *MockInterface) FindPrivateNetwork(ctx context.Context, tags []string, vpcID *string) (*vpc.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrivateNetwork", ctx, tags, vpcID)
	ret0, _ := ret[0].(*vpc.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrivateNetwork indicates an expected call of FindPrivateNetwork.
func (mr *MockInterfaceMockRecorder) FindPrivateNetwork(ctx, tags, vpcID any) *MockInterfaceFindPrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrivateNetwork", reflect.TypeOf((*MockInterface)(nil).FindPrivateNetwork), ctx, tags, vpcID)
	return &MockInterfaceFindPrivateNetworkCall{Call: call}
}

// MockInterfaceFindPrivateNetworkCall wrap *gomock.Call
type MockInterfaceFindPrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindPrivateNetworkCall) Return(arg0 *vpc.PrivateNetwork, arg1 error) *MockInterfaceFindPrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindPrivateNetworkCall) Do(f func(context.Context, []string, *string) (*vpc.PrivateNetwork, error)) *MockInterfaceFindPrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindPrivateNetworkCall) DoAndReturn(f func(context.Context, []string, *string) (*vpc.PrivateNetwork, error)) *MockInterfaceFindPrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindSecurityGroup mocks base method.
func (m *MockInterface) FindSecurityGroup(ctx context.Context, zone scw.Zone, name string) (*instance.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSecurityGroup", ctx, zone, name)
	ret0, _ := ret[0].(*instance.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSecurityGroup indicates an expected call of FindSecurityGroup.
func (mr *MockInterfaceMockRecorder) FindSecurityGroup(ctx, zone, name any) *MockInterfaceFindSecurityGroupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSecurityGroup", reflect.TypeOf((*MockInterface)(nil).FindSecurityGroup), ctx, zone, name)
	return &MockInterfaceFindSecurityGroupCall{Call: call}
}

// MockInterfaceFindSecurityGroupCall wrap *gomock.Call
type MockInterfaceFindSecurityGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindSecurityGroupCall) Return(arg0 *instance.SecurityGroup, arg1 error) *MockInterfaceFindSecurityGroupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindSecurityGroupCall) Do(f func(context.Context, scw.Zone, string) (*instance.SecurityGroup, error)) *MockInterfaceFindSecurityGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindSecurityGroupCall) DoAndReturn(f func(context.Context, scw.Zone, string) (*instance.SecurityGroup, error)) *MockInterfaceFindSecurityGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindServer mocks base method.
func (m *MockInterface) FindServer(ctx context.Context, zone scw.Zone, tags []string) (*instance.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServer", ctx, zone, tags)
	ret0, _ := ret[0].(*instance.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServer indicates an expected call of FindServer.
func (mr *MockInterfaceMockRecorder) FindServer(ctx, zone, tags any) *MockInterfaceFindServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServer", reflect.TypeOf((*MockInterface)(nil).FindServer), ctx, zone, tags)
	return &MockInterfaceFindServerCall{Call: call}
}

// MockInterfaceFindServerCall wrap *gomock.Call
type MockInterfaceFindServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindServerCall) Return(arg0 *instance.Server, arg1 error) *MockInterfaceFindServerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindServerCall) Do(f func(context.Context, scw.Zone, []string) (*instance.Server, error)) *MockInterfaceFindServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindServerCall) DoAndReturn(f func(context.Context, scw.Zone, []string) (*instance.Server, error)) *MockInterfaceFindServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindVolume mocks base method.
func (m *MockInterface) FindVolume(ctx context.Context, zone scw.Zone, tags []string) (*block.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVolume", ctx, zone, tags)
	ret0, _ := ret[0].(*block.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVolume indicates an expected call of FindVolume.
func (mr *MockInterfaceMockRecorder) FindVolume(ctx, zone, tags any) *MockInterfaceFindVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVolume", reflect.TypeOf((*MockInterface)(nil).FindVolume), ctx, zone, tags)
	return &MockInterfaceFindVolumeCall{Call: call}
}

// MockInterfaceFindVolumeCall wrap *gomock.Call
type MockInterfaceFindVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceFindVolumeCall) Return(arg0 *block.Volume, arg1 error) *MockInterfaceFindVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceFindVolumeCall) Do(f func(context.Context, scw.Zone, []string) (*block.Volume, error)) *MockInterfaceFindVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceFindVolumeCall) DoAndReturn(f func(context.Context, scw.Zone, []string) (*block.Volume, error)) *MockInterfaceFindVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllServerUserData mocks base method.
func (m *MockInterface) GetAllServerUserData(ctx context.Context, zone scw.Zone, serverID string) (map[string]io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServerUserData", ctx, zone, serverID)
	ret0, _ := ret[0].(map[string]io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServerUserData indicates an expected call of GetAllServerUserData.
func (mr *MockInterfaceMockRecorder) GetAllServerUserData(ctx, zone, serverID any) *MockInterfaceGetAllServerUserDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServerUserData", reflect.TypeOf((*MockInterface)(nil).GetAllServerUserData), ctx, zone, serverID)
	return &MockInterfaceGetAllServerUserDataCall{Call: call}
}

// MockInterfaceGetAllServerUserDataCall wrap *gomock.Call
type MockInterfaceGetAllServerUserDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceGetAllServerUserDataCall) Return(arg0 map[string]io.Reader, arg1 error) *MockInterfaceGetAllServerUserDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceGetAllServerUserDataCall) Do(f func(context.Context, scw.Zone, string) (map[string]io.Reader, error)) *MockInterfaceGetAllServerUserDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceGetAllServerUserDataCall) DoAndReturn(f func(context.Context, scw.Zone, string) (map[string]io.Reader, error)) *MockInterfaceGetAllServerUserDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControlPlaneZones mocks base method.
func (m *MockInterface) GetControlPlaneZones() []scw.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlPlaneZones")
	ret0, _ := ret[0].([]scw.Zone)
	return ret0
}

// GetControlPlaneZones indicates an expected call of GetControlPlaneZones.
func (mr *MockInterfaceMockRecorder) GetControlPlaneZones() *MockInterfaceGetControlPlaneZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlPlaneZones", reflect.TypeOf((*MockInterface)(nil).GetControlPlaneZones))
	return &MockInterfaceGetControlPlaneZonesCall{Call: call}
}

// MockInterfaceGetControlPlaneZonesCall wrap *gomock.Call
type MockInterfaceGetControlPlaneZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceGetControlPlaneZonesCall) Return(arg0 []scw.Zone) *MockInterfaceGetControlPlaneZonesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceGetControlPlaneZonesCall) Do(f func() []scw.Zone) *MockInterfaceGetControlPlaneZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceGetControlPlaneZonesCall) DoAndReturn(f func() []scw.Zone) *MockInterfaceGetControlPlaneZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLocalImageByLabel mocks base method.
func (m *MockInterface) GetLocalImageByLabel(ctx context.Context, zone scw.Zone, commercialType, imageLabel string, imageType marketplace.LocalImageType) (*marketplace.LocalImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalImageByLabel", ctx, zone, commercialType, imageLabel, imageType)
	ret0, _ := ret[0].(*marketplace.LocalImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalImageByLabel indicates an expected call of GetLocalImageByLabel.
func (mr *MockInterfaceMockRecorder) GetLocalImageByLabel(ctx, zone, commercialType, imageLabel, imageType any) *MockInterfaceGetLocalImageByLabelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalImageByLabel", reflect.TypeOf((*MockInterface)(nil).GetLocalImageByLabel), ctx, zone, commercialType, imageLabel, imageType)
	return &MockInterfaceGetLocalImageByLabelCall{Call: call}
}

// MockInterfaceGetLocalImageByLabelCall wrap *gomock.Call
type MockInterfaceGetLocalImageByLabelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceGetLocalImageByLabelCall) Return(arg0 *marketplace.LocalImage, arg1 error) *MockInterfaceGetLocalImageByLabelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceGetLocalImageByLabelCall) Do(f func(context.Context, scw.Zone, string, string, marketplace.LocalImageType) (*marketplace.LocalImage, error)) *MockInterfaceGetLocalImageByLabelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceGetLocalImageByLabelCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, marketplace.LocalImageType) (*marketplace.LocalImage, error)) *MockInterfaceGetLocalImageByLabelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPrivateNetwork mocks base method.
func (m *MockInterface) GetPrivateNetwork(ctx context.Context, privateNetworkID string) (*vpc.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateNetwork", ctx, privateNetworkID)
	ret0, _ := ret[0].(*vpc.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateNetwork indicates an expected call of GetPrivateNetwork.
func (mr *MockInterfaceMockRecorder) GetPrivateNetwork(ctx, privateNetworkID any) *MockInterfaceGetPrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateNetwork", reflect.TypeOf((*MockInterface)(nil).GetPrivateNetwork), ctx, privateNetworkID)
	return &MockInterfaceGetPrivateNetworkCall{Call: call}
}

// MockInterfaceGetPrivateNetworkCall wrap *gomock.Call
type MockInterfaceGetPrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceGetPrivateNetworkCall) Return(arg0 *vpc.PrivateNetwork, arg1 error) *MockInterfaceGetPrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceGetPrivateNetworkCall) Do(f func(context.Context, string) (*vpc.PrivateNetwork, error)) *MockInterfaceGetPrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceGetPrivateNetworkCall) DoAndReturn(f func(context.Context, string) (*vpc.PrivateNetwork, error)) *MockInterfaceGetPrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetZoneOrDefault mocks base method.
func (m *MockInterface) GetZoneOrDefault(zone *string) (scw.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoneOrDefault", zone)
	ret0, _ := ret[0].(scw.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoneOrDefault indicates an expected call of GetZoneOrDefault.
func (mr *MockInterfaceMockRecorder) GetZoneOrDefault(zone any) *MockInterfaceGetZoneOrDefaultCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoneOrDefault", reflect.TypeOf((*MockInterface)(nil).GetZoneOrDefault), zone)
	return &MockInterfaceGetZoneOrDefaultCall{Call: call}
}

// MockInterfaceGetZoneOrDefaultCall wrap *gomock.Call
type MockInterfaceGetZoneOrDefaultCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceGetZoneOrDefaultCall) Return(arg0 scw.Zone, arg1 error) *MockInterfaceGetZoneOrDefaultCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceGetZoneOrDefaultCall) Do(f func(*string) (scw.Zone, error)) *MockInterfaceGetZoneOrDefaultCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceGetZoneOrDefaultCall) DoAndReturn(f func(*string) (scw.Zone, error)) *MockInterfaceGetZoneOrDefaultCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListDNSZoneRecords mocks base method.
func (m *MockInterface) ListDNSZoneRecords(ctx context.Context, zone, name string) ([]*domain.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDNSZoneRecords", ctx, zone, name)
	ret0, _ := ret[0].([]*domain.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDNSZoneRecords indicates an expected call of ListDNSZoneRecords.
func (mr *MockInterfaceMockRecorder) ListDNSZoneRecords(ctx, zone, name any) *MockInterfaceListDNSZoneRecordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDNSZoneRecords", reflect.TypeOf((*MockInterface)(nil).ListDNSZoneRecords), ctx, zone, name)
	return &MockInterfaceListDNSZoneRecordsCall{Call: call}
}

// MockInterfaceListDNSZoneRecordsCall wrap *gomock.Call
type MockInterfaceListDNSZoneRecordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceListDNSZoneRecordsCall) Return(arg0 []*domain.Record, arg1 error) *MockInterfaceListDNSZoneRecordsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceListDNSZoneRecordsCall) Do(f func(context.Context, string, string) ([]*domain.Record, error)) *MockInterfaceListDNSZoneRecordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceListDNSZoneRecordsCall) DoAndReturn(f func(context.Context, string, string) ([]*domain.Record, error)) *MockInterfaceListDNSZoneRecordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGatewayTypes mocks base method.
func (m *MockInterface) ListGatewayTypes(ctx context.Context, zone scw.Zone) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGatewayTypes", ctx, zone)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGatewayTypes indicates an expected call of ListGatewayTypes.
func (mr *MockInterfaceMockRecorder) ListGatewayTypes(ctx, zone any) *MockInterfaceListGatewayTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewayTypes", reflect.TypeOf((*MockInterface)(nil).ListGatewayTypes), ctx, zone)
	return &MockInterfaceListGatewayTypesCall{Call: call}
}

// MockInterfaceListGatewayTypesCall wrap *gomock.Call
type MockInterfaceListGatewayTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceListGatewayTypesCall) Return(arg0 []string, arg1 error) *MockInterfaceListGatewayTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceListGatewayTypesCall) Do(f func(context.Context, scw.Zone) ([]string, error)) *MockInterfaceListGatewayTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceListGatewayTypesCall) DoAndReturn(f func(context.Context, scw.Zone) ([]string, error)) *MockInterfaceListGatewayTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLBACLs mocks base method.
func (m *MockInterface) ListLBACLs(ctx context.Context, zone scw.Zone, frontendID string) ([]*lb.ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLBACLs", ctx, zone, frontendID)
	ret0, _ := ret[0].([]*lb.ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLBACLs indicates an expected call of ListLBACLs.
func (mr *MockInterfaceMockRecorder) ListLBACLs(ctx, zone, frontendID any) *MockInterfaceListLBACLsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLBACLs", reflect.TypeOf((*MockInterface)(nil).ListLBACLs), ctx, zone, frontendID)
	return &MockInterfaceListLBACLsCall{Call: call}
}

// MockInterfaceListLBACLsCall wrap *gomock.Call
type MockInterfaceListLBACLsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceListLBACLsCall) Return(arg0 []*lb.ACL, arg1 error) *MockInterfaceListLBACLsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceListLBACLsCall) Do(f func(context.Context, scw.Zone, string) ([]*lb.ACL, error)) *MockInterfaceListLBACLsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceListLBACLsCall) DoAndReturn(f func(context.Context, scw.Zone, string) ([]*lb.ACL, error)) *MockInterfaceListLBACLsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MigrateLB mocks base method.
func (m *MockInterface) MigrateLB(ctx context.Context, zone scw.Zone, id, newType string) (*lb.LB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateLB", ctx, zone, id, newType)
	ret0, _ := ret[0].(*lb.LB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateLB indicates an expected call of MigrateLB.
func (mr *MockInterfaceMockRecorder) MigrateLB(ctx, zone, id, newType any) *MockInterfaceMigrateLBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateLB", reflect.TypeOf((*MockInterface)(nil).MigrateLB), ctx, zone, id, newType)
	return &MockInterfaceMigrateLBCall{Call: call}
}

// MockInterfaceMigrateLBCall wrap *gomock.Call
type MockInterfaceMigrateLBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceMigrateLBCall) Return(arg0 *lb.LB, arg1 error) *MockInterfaceMigrateLBCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceMigrateLBCall) Do(f func(context.Context, scw.Zone, string, string) (*lb.LB, error)) *MockInterfaceMigrateLBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceMigrateLBCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*lb.LB, error)) *MockInterfaceMigrateLBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveBackendServer mocks base method.
func (m *MockInterface) RemoveBackendServer(ctx context.Context, zone scw.Zone, backendID, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBackendServer", ctx, zone, backendID, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBackendServer indicates an expected call of RemoveBackendServer.
func (mr *MockInterfaceMockRecorder) RemoveBackendServer(ctx, zone, backendID, ip any) *MockInterfaceRemoveBackendServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBackendServer", reflect.TypeOf((*MockInterface)(nil).RemoveBackendServer), ctx, zone, backendID, ip)
	return &MockInterfaceRemoveBackendServerCall{Call: call}
}

// MockInterfaceRemoveBackendServerCall wrap *gomock.Call
type MockInterfaceRemoveBackendServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceRemoveBackendServerCall) Return(arg0 error) *MockInterfaceRemoveBackendServerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceRemoveBackendServerCall) Do(f func(context.Context, scw.Zone, string, string) error) *MockInterfaceRemoveBackendServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceRemoveBackendServerCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) error) *MockInterfaceRemoveBackendServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ServerAction mocks base method.
func (m *MockInterface) ServerAction(ctx context.Context, zone scw.Zone, serverID string, action instance.ServerAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerAction", ctx, zone, serverID, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerAction indicates an expected call of ServerAction.
func (mr *MockInterfaceMockRecorder) ServerAction(ctx, zone, serverID, action any) *MockInterfaceServerActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerAction", reflect.TypeOf((*MockInterface)(nil).ServerAction), ctx, zone, serverID, action)
	return &MockInterfaceServerActionCall{Call: call}
}

// MockInterfaceServerActionCall wrap *gomock.Call
type MockInterfaceServerActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceServerActionCall) Return(arg0 error) *MockInterfaceServerActionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceServerActionCall) Do(f func(context.Context, scw.Zone, string, instance.ServerAction) error) *MockInterfaceServerActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceServerActionCall) DoAndReturn(f func(context.Context, scw.Zone, string, instance.ServerAction) error) *MockInterfaceServerActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetBackendServers mocks base method.
func (m *MockInterface) SetBackendServers(ctx context.Context, zone scw.Zone, backendID string, servers []string) (*lb.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBackendServers", ctx, zone, backendID, servers)
	ret0, _ := ret[0].(*lb.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBackendServers indicates an expected call of SetBackendServers.
func (mr *MockInterfaceMockRecorder) SetBackendServers(ctx, zone, backendID, servers any) *MockInterfaceSetBackendServersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackendServers", reflect.TypeOf((*MockInterface)(nil).SetBackendServers), ctx, zone, backendID, servers)
	return &MockInterfaceSetBackendServersCall{Call: call}
}

// MockInterfaceSetBackendServersCall wrap *gomock.Call
type MockInterfaceSetBackendServersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceSetBackendServersCall) Return(arg0 *lb.Backend, arg1 error) *MockInterfaceSetBackendServersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceSetBackendServersCall) Do(f func(context.Context, scw.Zone, string, []string) (*lb.Backend, error)) *MockInterfaceSetBackendServersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceSetBackendServersCall) DoAndReturn(f func(context.Context, scw.Zone, string, []string) (*lb.Backend, error)) *MockInterfaceSetBackendServersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetDNSZoneRecords mocks base method.
func (m *MockInterface) SetDNSZoneRecords(ctx context.Context, zone, name string, ips []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDNSZoneRecords", ctx, zone, name, ips)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDNSZoneRecords indicates an expected call of SetDNSZoneRecords.
func (mr *MockInterfaceMockRecorder) SetDNSZoneRecords(ctx, zone, name, ips any) *MockInterfaceSetDNSZoneRecordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDNSZoneRecords", reflect.TypeOf((*MockInterface)(nil).SetDNSZoneRecords), ctx, zone, name, ips)
	return &MockInterfaceSetDNSZoneRecordsCall{Call: call}
}

// MockInterfaceSetDNSZoneRecordsCall wrap *gomock.Call
type MockInterfaceSetDNSZoneRecordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceSetDNSZoneRecordsCall) Return(arg0 error) *MockInterfaceSetDNSZoneRecordsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceSetDNSZoneRecordsCall) Do(f func(context.Context, string, string, []string) error) *MockInterfaceSetDNSZoneRecordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceSetDNSZoneRecordsCall) DoAndReturn(f func(context.Context, string, string, []string) error) *MockInterfaceSetDNSZoneRecordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetLBACLs mocks base method.
func (m *MockInterface) SetLBACLs(ctx context.Context, zone scw.Zone, frontendID string, acls []*lb.ACLSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLBACLs", ctx, zone, frontendID, acls)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLBACLs indicates an expected call of SetLBACLs.
func (mr *MockInterfaceMockRecorder) SetLBACLs(ctx, zone, frontendID, acls any) *MockInterfaceSetLBACLsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLBACLs", reflect.TypeOf((*MockInterface)(nil).SetLBACLs), ctx, zone, frontendID, acls)
	return &MockInterfaceSetLBACLsCall{Call: call}
}

// MockInterfaceSetLBACLsCall wrap *gomock.Call
type MockInterfaceSetLBACLsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceSetLBACLsCall) Return(arg0 error) *MockInterfaceSetLBACLsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceSetLBACLsCall) Do(f func(context.Context, scw.Zone, string, []*lb.ACLSpec) error) *MockInterfaceSetLBACLsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceSetLBACLsCall) DoAndReturn(f func(context.Context, scw.Zone, string, []*lb.ACLSpec) error) *MockInterfaceSetLBACLsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetServerUserData mocks base method.
func (m *MockInterface) SetServerUserData(ctx context.Context, zone scw.Zone, serverID, key, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServerUserData", ctx, zone, serverID, key, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServerUserData indicates an expected call of SetServerUserData.
func (mr *MockInterfaceMockRecorder) SetServerUserData(ctx, zone, serverID, key, content any) *MockInterfaceSetServerUserDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServerUserData", reflect.TypeOf((*MockInterface)(nil).SetServerUserData), ctx, zone, serverID, key, content)
	return &MockInterfaceSetServerUserDataCall{Call: call}
}

// MockInterfaceSetServerUserDataCall wrap *gomock.Call
type MockInterfaceSetServerUserDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceSetServerUserDataCall) Return(arg0 error) *MockInterfaceSetServerUserDataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceSetServerUserDataCall) Do(f func(context.Context, scw.Zone, string, string, string) error) *MockInterfaceSetServerUserDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceSetServerUserDataCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, string) error) *MockInterfaceSetServerUserDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateInstanceVolumeTags mocks base method.
func (m *MockInterface) UpdateInstanceVolumeTags(ctx context.Context, zone scw.Zone, volumeID string, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceVolumeTags", ctx, zone, volumeID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceVolumeTags indicates an expected call of UpdateInstanceVolumeTags.
func (mr *MockInterfaceMockRecorder) UpdateInstanceVolumeTags(ctx, zone, volumeID, tags any) *MockInterfaceUpdateInstanceVolumeTagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceVolumeTags", reflect.TypeOf((*MockInterface)(nil).UpdateInstanceVolumeTags), ctx, zone, volumeID, tags)
	return &MockInterfaceUpdateInstanceVolumeTagsCall{Call: call}
}

// MockInterfaceUpdateInstanceVolumeTagsCall wrap *gomock.Call
type MockInterfaceUpdateInstanceVolumeTagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceUpdateInstanceVolumeTagsCall) Return(arg0 error) *MockInterfaceUpdateInstanceVolumeTagsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceUpdateInstanceVolumeTagsCall) Do(f func(context.Context, scw.Zone, string, []string) error) *MockInterfaceUpdateInstanceVolumeTagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceUpdateInstanceVolumeTagsCall) DoAndReturn(f func(context.Context, scw.Zone, string, []string) error) *MockInterfaceUpdateInstanceVolumeTagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateLBACL mocks base method.
func (m *MockInterface) UpdateLBACL(ctx context.Context, zone scw.Zone, aclID, name string, index int32, action lb.ACLActionType, matchedSubnets []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLBACL", ctx, zone, aclID, name, index, action, matchedSubnets)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLBACL indicates an expected call of UpdateLBACL.
func (mr *MockInterfaceMockRecorder) UpdateLBACL(ctx, zone, aclID, name, index, action, matchedSubnets any) *MockInterfaceUpdateLBACLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLBACL", reflect.TypeOf((*MockInterface)(nil).UpdateLBACL), ctx, zone, aclID, name, index, action, matchedSubnets)
	return &MockInterfaceUpdateLBACLCall{Call: call}
}

// MockInterfaceUpdateLBACLCall wrap *gomock.Call
type MockInterfaceUpdateLBACLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceUpdateLBACLCall) Return(arg0 error) *MockInterfaceUpdateLBACLCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceUpdateLBACLCall) Do(f func(context.Context, scw.Zone, string, string, int32, lb.ACLActionType, []string) error) *MockInterfaceUpdateLBACLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceUpdateLBACLCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, int32, lb.ACLActionType, []string) error) *MockInterfaceUpdateLBACLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVolumeIOPS mocks base method.
func (m *MockInterface) UpdateVolumeIOPS(ctx context.Context, zone scw.Zone, volumeID string, iops int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeIOPS", ctx, zone, volumeID, iops)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolumeIOPS indicates an expected call of UpdateVolumeIOPS.
func (mr *MockInterfaceMockRecorder) UpdateVolumeIOPS(ctx, zone, volumeID, iops any) *MockInterfaceUpdateVolumeIOPSCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeIOPS", reflect.TypeOf((*MockInterface)(nil).UpdateVolumeIOPS), ctx, zone, volumeID, iops)
	return &MockInterfaceUpdateVolumeIOPSCall{Call: call}
}

// MockInterfaceUpdateVolumeIOPSCall wrap *gomock.Call
type MockInterfaceUpdateVolumeIOPSCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceUpdateVolumeIOPSCall) Return(arg0 error) *MockInterfaceUpdateVolumeIOPSCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceUpdateVolumeIOPSCall) Do(f func(context.Context, scw.Zone, string, int64) error) *MockInterfaceUpdateVolumeIOPSCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceUpdateVolumeIOPSCall) DoAndReturn(f func(context.Context, scw.Zone, string, int64) error) *MockInterfaceUpdateVolumeIOPSCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVolumeTags mocks base method.
func (m *MockInterface) UpdateVolumeTags(ctx context.Context, zone scw.Zone, volumeID string, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeTags", ctx, zone, volumeID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolumeTags indicates an expected call of UpdateVolumeTags.
func (mr *MockInterfaceMockRecorder) UpdateVolumeTags(ctx, zone, volumeID, tags any) *MockInterfaceUpdateVolumeTagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeTags", reflect.TypeOf((*MockInterface)(nil).UpdateVolumeTags), ctx, zone, volumeID, tags)
	return &MockInterfaceUpdateVolumeTagsCall{Call: call}
}

// MockInterfaceUpdateVolumeTagsCall wrap *gomock.Call
type MockInterfaceUpdateVolumeTagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceUpdateVolumeTagsCall) Return(arg0 error) *MockInterfaceUpdateVolumeTagsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceUpdateVolumeTagsCall) Do(f func(context.Context, scw.Zone, string, []string) error) *MockInterfaceUpdateVolumeTagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceUpdateVolumeTagsCall) DoAndReturn(f func(context.Context, scw.Zone, string, []string) error) *MockInterfaceUpdateVolumeTagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeGateway mocks base method.
func (m *MockInterface) UpgradeGateway(ctx context.Context, zone scw.Zone, gatewayID, newType string) (*vpcgw.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeGateway", ctx, zone, gatewayID, newType)
	ret0, _ := ret[0].(*vpcgw.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeGateway indicates an expected call of UpgradeGateway.
func (mr *MockInterfaceMockRecorder) UpgradeGateway(ctx, zone, gatewayID, newType any) *MockInterfaceUpgradeGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeGateway", reflect.TypeOf((*MockInterface)(nil).UpgradeGateway), ctx, zone, gatewayID, newType)
	return &MockInterfaceUpgradeGatewayCall{Call: call}
}

// MockInterfaceUpgradeGatewayCall wrap *gomock.Call
type MockInterfaceUpgradeGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInterfaceUpgradeGatewayCall) Return(arg0 *vpcgw.Gateway, arg1 error) *MockInterfaceUpgradeGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInterfaceUpgradeGatewayCall) Do(f func(context.Context, scw.Zone, string, string) (*vpcgw.Gateway, error)) *MockInterfaceUpgradeGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInterfaceUpgradeGatewayCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*vpcgw.Gateway, error)) *MockInterfaceUpgradeGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
