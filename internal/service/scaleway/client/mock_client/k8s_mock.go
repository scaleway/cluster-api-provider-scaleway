// Code generated by MockGen. DO NOT EDIT.
// Source: ../k8s.go
//
// Generated by this command:
//
//	mockgen -destination k8s_mock.go -package mock_client -source ../k8s.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	k8s "github.com/scaleway/scaleway-sdk-go/api/k8s/v1"
	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockK8sAPI is a mock of K8sAPI interface.
type MockK8sAPI struct {
	ctrl     *gomock.Controller
	recorder *MockK8sAPIMockRecorder
	isgomock struct{}
}

// MockK8sAPIMockRecorder is the mock recorder for MockK8sAPI.
type MockK8sAPIMockRecorder struct {
	mock *MockK8sAPI
}

// NewMockK8sAPI creates a new mock instance.
func NewMockK8sAPI(ctrl *gomock.Controller) *MockK8sAPI {
	mock := &MockK8sAPI{ctrl: ctrl}
	mock.recorder = &MockK8sAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8sAPI) EXPECT() *MockK8sAPIMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockK8sAPI) CreateCluster(req *k8s.CreateClusterRequest, opts ...scw.RequestOption) (*k8s.Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCluster", varargs...)
	ret0, _ := ret[0].(*k8s.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockK8sAPIMockRecorder) CreateCluster(req any, opts ...any) *MockK8sAPICreateClusterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockK8sAPI)(nil).CreateCluster), varargs...)
	return &MockK8sAPICreateClusterCall{Call: call}
}

// MockK8sAPICreateClusterCall wrap *gomock.Call
type MockK8sAPICreateClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPICreateClusterCall) Return(arg0 *k8s.Cluster, arg1 error) *MockK8sAPICreateClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPICreateClusterCall) Do(f func(*k8s.CreateClusterRequest, ...scw.RequestOption) (*k8s.Cluster, error)) *MockK8sAPICreateClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPICreateClusterCall) DoAndReturn(f func(*k8s.CreateClusterRequest, ...scw.RequestOption) (*k8s.Cluster, error)) *MockK8sAPICreateClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePool mocks base method.
func (m *MockK8sAPI) CreatePool(req *k8s.CreatePoolRequest, opts ...scw.RequestOption) (*k8s.Pool, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePool", varargs...)
	ret0, _ := ret[0].(*k8s.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockK8sAPIMockRecorder) CreatePool(req any, opts ...any) *MockK8sAPICreatePoolCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockK8sAPI)(nil).CreatePool), varargs...)
	return &MockK8sAPICreatePoolCall{Call: call}
}

// MockK8sAPICreatePoolCall wrap *gomock.Call
type MockK8sAPICreatePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPICreatePoolCall) Return(arg0 *k8s.Pool, arg1 error) *MockK8sAPICreatePoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPICreatePoolCall) Do(f func(*k8s.CreatePoolRequest, ...scw.RequestOption) (*k8s.Pool, error)) *MockK8sAPICreatePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPICreatePoolCall) DoAndReturn(f func(*k8s.CreatePoolRequest, ...scw.RequestOption) (*k8s.Pool, error)) *MockK8sAPICreatePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCluster mocks base method.
func (m *MockK8sAPI) DeleteCluster(req *k8s.DeleteClusterRequest, opts ...scw.RequestOption) (*k8s.Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*k8s.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockK8sAPIMockRecorder) DeleteCluster(req any, opts ...any) *MockK8sAPIDeleteClusterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockK8sAPI)(nil).DeleteCluster), varargs...)
	return &MockK8sAPIDeleteClusterCall{Call: call}
}

// MockK8sAPIDeleteClusterCall wrap *gomock.Call
type MockK8sAPIDeleteClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIDeleteClusterCall) Return(arg0 *k8s.Cluster, arg1 error) *MockK8sAPIDeleteClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIDeleteClusterCall) Do(f func(*k8s.DeleteClusterRequest, ...scw.RequestOption) (*k8s.Cluster, error)) *MockK8sAPIDeleteClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIDeleteClusterCall) DoAndReturn(f func(*k8s.DeleteClusterRequest, ...scw.RequestOption) (*k8s.Cluster, error)) *MockK8sAPIDeleteClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePool mocks base method.
func (m *MockK8sAPI) DeletePool(req *k8s.DeletePoolRequest, opts ...scw.RequestOption) (*k8s.Pool, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePool", varargs...)
	ret0, _ := ret[0].(*k8s.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePool indicates an expected call of DeletePool.
func (mr *MockK8sAPIMockRecorder) DeletePool(req any, opts ...any) *MockK8sAPIDeletePoolCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePool", reflect.TypeOf((*MockK8sAPI)(nil).DeletePool), varargs...)
	return &MockK8sAPIDeletePoolCall{Call: call}
}

// MockK8sAPIDeletePoolCall wrap *gomock.Call
type MockK8sAPIDeletePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIDeletePoolCall) Return(arg0 *k8s.Pool, arg1 error) *MockK8sAPIDeletePoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIDeletePoolCall) Do(f func(*k8s.DeletePoolRequest, ...scw.RequestOption) (*k8s.Pool, error)) *MockK8sAPIDeletePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIDeletePoolCall) DoAndReturn(f func(*k8s.DeletePoolRequest, ...scw.RequestOption) (*k8s.Pool, error)) *MockK8sAPIDeletePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterKubeConfig mocks base method.
func (m *MockK8sAPI) GetClusterKubeConfig(req *k8s.GetClusterKubeConfigRequest, opts ...scw.RequestOption) (*k8s.Kubeconfig, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterKubeConfig", varargs...)
	ret0, _ := ret[0].(*k8s.Kubeconfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterKubeConfig indicates an expected call of GetClusterKubeConfig.
func (mr *MockK8sAPIMockRecorder) GetClusterKubeConfig(req any, opts ...any) *MockK8sAPIGetClusterKubeConfigCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterKubeConfig", reflect.TypeOf((*MockK8sAPI)(nil).GetClusterKubeConfig), varargs...)
	return &MockK8sAPIGetClusterKubeConfigCall{Call: call}
}

// MockK8sAPIGetClusterKubeConfigCall wrap *gomock.Call
type MockK8sAPIGetClusterKubeConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIGetClusterKubeConfigCall) Return(arg0 *k8s.Kubeconfig, arg1 error) *MockK8sAPIGetClusterKubeConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIGetClusterKubeConfigCall) Do(f func(*k8s.GetClusterKubeConfigRequest, ...scw.RequestOption) (*k8s.Kubeconfig, error)) *MockK8sAPIGetClusterKubeConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIGetClusterKubeConfigCall) DoAndReturn(f func(*k8s.GetClusterKubeConfigRequest, ...scw.RequestOption) (*k8s.Kubeconfig, error)) *MockK8sAPIGetClusterKubeConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListClusterACLRules mocks base method.
func (m *MockK8sAPI) ListClusterACLRules(req *k8s.ListClusterACLRulesRequest, opts ...scw.RequestOption) (*k8s.ListClusterACLRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterACLRules", varargs...)
	ret0, _ := ret[0].(*k8s.ListClusterACLRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterACLRules indicates an expected call of ListClusterACLRules.
func (mr *MockK8sAPIMockRecorder) ListClusterACLRules(req any, opts ...any) *MockK8sAPIListClusterACLRulesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterACLRules", reflect.TypeOf((*MockK8sAPI)(nil).ListClusterACLRules), varargs...)
	return &MockK8sAPIListClusterACLRulesCall{Call: call}
}

// MockK8sAPIListClusterACLRulesCall wrap *gomock.Call
type MockK8sAPIListClusterACLRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIListClusterACLRulesCall) Return(arg0 *k8s.ListClusterACLRulesResponse, arg1 error) *MockK8sAPIListClusterACLRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIListClusterACLRulesCall) Do(f func(*k8s.ListClusterACLRulesRequest, ...scw.RequestOption) (*k8s.ListClusterACLRulesResponse, error)) *MockK8sAPIListClusterACLRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIListClusterACLRulesCall) DoAndReturn(f func(*k8s.ListClusterACLRulesRequest, ...scw.RequestOption) (*k8s.ListClusterACLRulesResponse, error)) *MockK8sAPIListClusterACLRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListClusters mocks base method.
func (m *MockK8sAPI) ListClusters(req *k8s.ListClustersRequest, opts ...scw.RequestOption) (*k8s.ListClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].(*k8s.ListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockK8sAPIMockRecorder) ListClusters(req any, opts ...any) *MockK8sAPIListClustersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockK8sAPI)(nil).ListClusters), varargs...)
	return &MockK8sAPIListClustersCall{Call: call}
}

// MockK8sAPIListClustersCall wrap *gomock.Call
type MockK8sAPIListClustersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIListClustersCall) Return(arg0 *k8s.ListClustersResponse, arg1 error) *MockK8sAPIListClustersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIListClustersCall) Do(f func(*k8s.ListClustersRequest, ...scw.RequestOption) (*k8s.ListClustersResponse, error)) *MockK8sAPIListClustersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIListClustersCall) DoAndReturn(f func(*k8s.ListClustersRequest, ...scw.RequestOption) (*k8s.ListClustersResponse, error)) *MockK8sAPIListClustersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListNodes mocks base method.
func (m *MockK8sAPI) ListNodes(req *k8s.ListNodesRequest, opts ...scw.RequestOption) (*k8s.ListNodesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodes", varargs...)
	ret0, _ := ret[0].(*k8s.ListNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockK8sAPIMockRecorder) ListNodes(req any, opts ...any) *MockK8sAPIListNodesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockK8sAPI)(nil).ListNodes), varargs...)
	return &MockK8sAPIListNodesCall{Call: call}
}

// MockK8sAPIListNodesCall wrap *gomock.Call
type MockK8sAPIListNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIListNodesCall) Return(arg0 *k8s.ListNodesResponse, arg1 error) *MockK8sAPIListNodesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIListNodesCall) Do(f func(*k8s.ListNodesRequest, ...scw.RequestOption) (*k8s.ListNodesResponse, error)) *MockK8sAPIListNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIListNodesCall) DoAndReturn(f func(*k8s.ListNodesRequest, ...scw.RequestOption) (*k8s.ListNodesResponse, error)) *MockK8sAPIListNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPools mocks base method.
func (m *MockK8sAPI) ListPools(req *k8s.ListPoolsRequest, opts ...scw.RequestOption) (*k8s.ListPoolsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPools", varargs...)
	ret0, _ := ret[0].(*k8s.ListPoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPools indicates an expected call of ListPools.
func (mr *MockK8sAPIMockRecorder) ListPools(req any, opts ...any) *MockK8sAPIListPoolsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPools", reflect.TypeOf((*MockK8sAPI)(nil).ListPools), varargs...)
	return &MockK8sAPIListPoolsCall{Call: call}
}

// MockK8sAPIListPoolsCall wrap *gomock.Call
type MockK8sAPIListPoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIListPoolsCall) Return(arg0 *k8s.ListPoolsResponse, arg1 error) *MockK8sAPIListPoolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIListPoolsCall) Do(f func(*k8s.ListPoolsRequest, ...scw.RequestOption) (*k8s.ListPoolsResponse, error)) *MockK8sAPIListPoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIListPoolsCall) DoAndReturn(f func(*k8s.ListPoolsRequest, ...scw.RequestOption) (*k8s.ListPoolsResponse, error)) *MockK8sAPIListPoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetClusterACLRules mocks base method.
func (m *MockK8sAPI) SetClusterACLRules(req *k8s.SetClusterACLRulesRequest, opts ...scw.RequestOption) (*k8s.SetClusterACLRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetClusterACLRules", varargs...)
	ret0, _ := ret[0].(*k8s.SetClusterACLRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetClusterACLRules indicates an expected call of SetClusterACLRules.
func (mr *MockK8sAPIMockRecorder) SetClusterACLRules(req any, opts ...any) *MockK8sAPISetClusterACLRulesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterACLRules", reflect.TypeOf((*MockK8sAPI)(nil).SetClusterACLRules), varargs...)
	return &MockK8sAPISetClusterACLRulesCall{Call: call}
}

// MockK8sAPISetClusterACLRulesCall wrap *gomock.Call
type MockK8sAPISetClusterACLRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPISetClusterACLRulesCall) Return(arg0 *k8s.SetClusterACLRulesResponse, arg1 error) *MockK8sAPISetClusterACLRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPISetClusterACLRulesCall) Do(f func(*k8s.SetClusterACLRulesRequest, ...scw.RequestOption) (*k8s.SetClusterACLRulesResponse, error)) *MockK8sAPISetClusterACLRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPISetClusterACLRulesCall) DoAndReturn(f func(*k8s.SetClusterACLRulesRequest, ...scw.RequestOption) (*k8s.SetClusterACLRulesResponse, error)) *MockK8sAPISetClusterACLRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetClusterType mocks base method.
func (m *MockK8sAPI) SetClusterType(req *k8s.SetClusterTypeRequest, opts ...scw.RequestOption) (*k8s.Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetClusterType", varargs...)
	ret0, _ := ret[0].(*k8s.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetClusterType indicates an expected call of SetClusterType.
func (mr *MockK8sAPIMockRecorder) SetClusterType(req any, opts ...any) *MockK8sAPISetClusterTypeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterType", reflect.TypeOf((*MockK8sAPI)(nil).SetClusterType), varargs...)
	return &MockK8sAPISetClusterTypeCall{Call: call}
}

// MockK8sAPISetClusterTypeCall wrap *gomock.Call
type MockK8sAPISetClusterTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPISetClusterTypeCall) Return(arg0 *k8s.Cluster, arg1 error) *MockK8sAPISetClusterTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPISetClusterTypeCall) Do(f func(*k8s.SetClusterTypeRequest, ...scw.RequestOption) (*k8s.Cluster, error)) *MockK8sAPISetClusterTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPISetClusterTypeCall) DoAndReturn(f func(*k8s.SetClusterTypeRequest, ...scw.RequestOption) (*k8s.Cluster, error)) *MockK8sAPISetClusterTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCluster mocks base method.
func (m *MockK8sAPI) UpdateCluster(req *k8s.UpdateClusterRequest, opts ...scw.RequestOption) (*k8s.Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCluster", varargs...)
	ret0, _ := ret[0].(*k8s.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockK8sAPIMockRecorder) UpdateCluster(req any, opts ...any) *MockK8sAPIUpdateClusterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockK8sAPI)(nil).UpdateCluster), varargs...)
	return &MockK8sAPIUpdateClusterCall{Call: call}
}

// MockK8sAPIUpdateClusterCall wrap *gomock.Call
type MockK8sAPIUpdateClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIUpdateClusterCall) Return(arg0 *k8s.Cluster, arg1 error) *MockK8sAPIUpdateClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIUpdateClusterCall) Do(f func(*k8s.UpdateClusterRequest, ...scw.RequestOption) (*k8s.Cluster, error)) *MockK8sAPIUpdateClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIUpdateClusterCall) DoAndReturn(f func(*k8s.UpdateClusterRequest, ...scw.RequestOption) (*k8s.Cluster, error)) *MockK8sAPIUpdateClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePool mocks base method.
func (m *MockK8sAPI) UpdatePool(req *k8s.UpdatePoolRequest, opts ...scw.RequestOption) (*k8s.Pool, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePool", varargs...)
	ret0, _ := ret[0].(*k8s.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePool indicates an expected call of UpdatePool.
func (mr *MockK8sAPIMockRecorder) UpdatePool(req any, opts ...any) *MockK8sAPIUpdatePoolCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePool", reflect.TypeOf((*MockK8sAPI)(nil).UpdatePool), varargs...)
	return &MockK8sAPIUpdatePoolCall{Call: call}
}

// MockK8sAPIUpdatePoolCall wrap *gomock.Call
type MockK8sAPIUpdatePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIUpdatePoolCall) Return(arg0 *k8s.Pool, arg1 error) *MockK8sAPIUpdatePoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIUpdatePoolCall) Do(f func(*k8s.UpdatePoolRequest, ...scw.RequestOption) (*k8s.Pool, error)) *MockK8sAPIUpdatePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIUpdatePoolCall) DoAndReturn(f func(*k8s.UpdatePoolRequest, ...scw.RequestOption) (*k8s.Pool, error)) *MockK8sAPIUpdatePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeCluster mocks base method.
func (m *MockK8sAPI) UpgradeCluster(req *k8s.UpgradeClusterRequest, opts ...scw.RequestOption) (*k8s.Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeCluster", varargs...)
	ret0, _ := ret[0].(*k8s.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeCluster indicates an expected call of UpgradeCluster.
func (mr *MockK8sAPIMockRecorder) UpgradeCluster(req any, opts ...any) *MockK8sAPIUpgradeClusterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeCluster", reflect.TypeOf((*MockK8sAPI)(nil).UpgradeCluster), varargs...)
	return &MockK8sAPIUpgradeClusterCall{Call: call}
}

// MockK8sAPIUpgradeClusterCall wrap *gomock.Call
type MockK8sAPIUpgradeClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIUpgradeClusterCall) Return(arg0 *k8s.Cluster, arg1 error) *MockK8sAPIUpgradeClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIUpgradeClusterCall) Do(f func(*k8s.UpgradeClusterRequest, ...scw.RequestOption) (*k8s.Cluster, error)) *MockK8sAPIUpgradeClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIUpgradeClusterCall) DoAndReturn(f func(*k8s.UpgradeClusterRequest, ...scw.RequestOption) (*k8s.Cluster, error)) *MockK8sAPIUpgradeClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradePool mocks base method.
func (m *MockK8sAPI) UpgradePool(req *k8s.UpgradePoolRequest, opts ...scw.RequestOption) (*k8s.Pool, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradePool", varargs...)
	ret0, _ := ret[0].(*k8s.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradePool indicates an expected call of UpgradePool.
func (mr *MockK8sAPIMockRecorder) UpgradePool(req any, opts ...any) *MockK8sAPIUpgradePoolCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradePool", reflect.TypeOf((*MockK8sAPI)(nil).UpgradePool), varargs...)
	return &MockK8sAPIUpgradePoolCall{Call: call}
}

// MockK8sAPIUpgradePoolCall wrap *gomock.Call
type MockK8sAPIUpgradePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sAPIUpgradePoolCall) Return(arg0 *k8s.Pool, arg1 error) *MockK8sAPIUpgradePoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sAPIUpgradePoolCall) Do(f func(*k8s.UpgradePoolRequest, ...scw.RequestOption) (*k8s.Pool, error)) *MockK8sAPIUpgradePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sAPIUpgradePoolCall) DoAndReturn(f func(*k8s.UpgradePoolRequest, ...scw.RequestOption) (*k8s.Pool, error)) *MockK8sAPIUpgradePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockK8s is a mock of K8s interface.
type MockK8s struct {
	ctrl     *gomock.Controller
	recorder *MockK8sMockRecorder
	isgomock struct{}
}

// MockK8sMockRecorder is the mock recorder for MockK8s.
type MockK8sMockRecorder struct {
	mock *MockK8s
}

// NewMockK8s creates a new mock instance.
func NewMockK8s(ctrl *gomock.Controller) *MockK8s {
	mock := &MockK8s{ctrl: ctrl}
	mock.recorder = &MockK8sMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8s) EXPECT() *MockK8sMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockK8s) CreateCluster(ctx context.Context, name, clusterType, version string, pnID *string, tags, featureGates, admissionPlugins, apiServerCertSANs []string, cni k8s.CNI, autoscalerConfig *k8s.CreateClusterRequestAutoscalerConfig, autoUpgrade *k8s.CreateClusterRequestAutoUpgrade, openIDConnectConfig *k8s.CreateClusterRequestOpenIDConnectConfig, podCIDR, serviceCIDR scw.IPNet) (*k8s.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, name, clusterType, version, pnID, tags, featureGates, admissionPlugins, apiServerCertSANs, cni, autoscalerConfig, autoUpgrade, openIDConnectConfig, podCIDR, serviceCIDR)
	ret0, _ := ret[0].(*k8s.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockK8sMockRecorder) CreateCluster(ctx, name, clusterType, version, pnID, tags, featureGates, admissionPlugins, apiServerCertSANs, cni, autoscalerConfig, autoUpgrade, openIDConnectConfig, podCIDR, serviceCIDR any) *MockK8sCreateClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockK8s)(nil).CreateCluster), ctx, name, clusterType, version, pnID, tags, featureGates, admissionPlugins, apiServerCertSANs, cni, autoscalerConfig, autoUpgrade, openIDConnectConfig, podCIDR, serviceCIDR)
	return &MockK8sCreateClusterCall{Call: call}
}

// MockK8sCreateClusterCall wrap *gomock.Call
type MockK8sCreateClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sCreateClusterCall) Return(arg0 *k8s.Cluster, arg1 error) *MockK8sCreateClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sCreateClusterCall) Do(f func(context.Context, string, string, string, *string, []string, []string, []string, []string, k8s.CNI, *k8s.CreateClusterRequestAutoscalerConfig, *k8s.CreateClusterRequestAutoUpgrade, *k8s.CreateClusterRequestOpenIDConnectConfig, scw.IPNet, scw.IPNet) (*k8s.Cluster, error)) *MockK8sCreateClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sCreateClusterCall) DoAndReturn(f func(context.Context, string, string, string, *string, []string, []string, []string, []string, k8s.CNI, *k8s.CreateClusterRequestAutoscalerConfig, *k8s.CreateClusterRequestAutoUpgrade, *k8s.CreateClusterRequestOpenIDConnectConfig, scw.IPNet, scw.IPNet) (*k8s.Cluster, error)) *MockK8sCreateClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePool mocks base method.
func (m *MockK8s) CreatePool(ctx context.Context, zone scw.Zone, clusterID, name, nodeType string, placementGroupID, securityGroupID *string, autoscaling, autohealing, publicIPDisabled bool, size uint32, minSize, maxSize *uint32, tags []string, kubeletArgs map[string]string, rootVolumeType k8s.PoolVolumeType, rootVolumeSizeGB *uint64, upgradePolicy *k8s.CreatePoolRequestUpgradePolicy) (*k8s.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", ctx, zone, clusterID, name, nodeType, placementGroupID, securityGroupID, autoscaling, autohealing, publicIPDisabled, size, minSize, maxSize, tags, kubeletArgs, rootVolumeType, rootVolumeSizeGB, upgradePolicy)
	ret0, _ := ret[0].(*k8s.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockK8sMockRecorder) CreatePool(ctx, zone, clusterID, name, nodeType, placementGroupID, securityGroupID, autoscaling, autohealing, publicIPDisabled, size, minSize, maxSize, tags, kubeletArgs, rootVolumeType, rootVolumeSizeGB, upgradePolicy any) *MockK8sCreatePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockK8s)(nil).CreatePool), ctx, zone, clusterID, name, nodeType, placementGroupID, securityGroupID, autoscaling, autohealing, publicIPDisabled, size, minSize, maxSize, tags, kubeletArgs, rootVolumeType, rootVolumeSizeGB, upgradePolicy)
	return &MockK8sCreatePoolCall{Call: call}
}

// MockK8sCreatePoolCall wrap *gomock.Call
type MockK8sCreatePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sCreatePoolCall) Return(arg0 *k8s.Pool, arg1 error) *MockK8sCreatePoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sCreatePoolCall) Do(f func(context.Context, scw.Zone, string, string, string, *string, *string, bool, bool, bool, uint32, *uint32, *uint32, []string, map[string]string, k8s.PoolVolumeType, *uint64, *k8s.CreatePoolRequestUpgradePolicy) (*k8s.Pool, error)) *MockK8sCreatePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sCreatePoolCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, string, *string, *string, bool, bool, bool, uint32, *uint32, *uint32, []string, map[string]string, k8s.PoolVolumeType, *uint64, *k8s.CreatePoolRequestUpgradePolicy) (*k8s.Pool, error)) *MockK8sCreatePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCluster mocks base method.
func (m *MockK8s) DeleteCluster(ctx context.Context, id string, withAdditionalResources bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, id, withAdditionalResources)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockK8sMockRecorder) DeleteCluster(ctx, id, withAdditionalResources any) *MockK8sDeleteClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockK8s)(nil).DeleteCluster), ctx, id, withAdditionalResources)
	return &MockK8sDeleteClusterCall{Call: call}
}

// MockK8sDeleteClusterCall wrap *gomock.Call
type MockK8sDeleteClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sDeleteClusterCall) Return(arg0 error) *MockK8sDeleteClusterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sDeleteClusterCall) Do(f func(context.Context, string, bool) error) *MockK8sDeleteClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sDeleteClusterCall) DoAndReturn(f func(context.Context, string, bool) error) *MockK8sDeleteClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePool mocks base method.
func (m *MockK8s) DeletePool(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePool", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePool indicates an expected call of DeletePool.
func (mr *MockK8sMockRecorder) DeletePool(ctx, id any) *MockK8sDeletePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePool", reflect.TypeOf((*MockK8s)(nil).DeletePool), ctx, id)
	return &MockK8sDeletePoolCall{Call: call}
}

// MockK8sDeletePoolCall wrap *gomock.Call
type MockK8sDeletePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sDeletePoolCall) Return(arg0 error) *MockK8sDeletePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sDeletePoolCall) Do(f func(context.Context, string) error) *MockK8sDeletePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sDeletePoolCall) DoAndReturn(f func(context.Context, string) error) *MockK8sDeletePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindCluster mocks base method.
func (m *MockK8s) FindCluster(ctx context.Context, name string) (*k8s.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCluster", ctx, name)
	ret0, _ := ret[0].(*k8s.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCluster indicates an expected call of FindCluster.
func (mr *MockK8sMockRecorder) FindCluster(ctx, name any) *MockK8sFindClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCluster", reflect.TypeOf((*MockK8s)(nil).FindCluster), ctx, name)
	return &MockK8sFindClusterCall{Call: call}
}

// MockK8sFindClusterCall wrap *gomock.Call
type MockK8sFindClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sFindClusterCall) Return(arg0 *k8s.Cluster, arg1 error) *MockK8sFindClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sFindClusterCall) Do(f func(context.Context, string) (*k8s.Cluster, error)) *MockK8sFindClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sFindClusterCall) DoAndReturn(f func(context.Context, string) (*k8s.Cluster, error)) *MockK8sFindClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindPool mocks base method.
func (m *MockK8s) FindPool(ctx context.Context, clusterID, name string) (*k8s.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPool", ctx, clusterID, name)
	ret0, _ := ret[0].(*k8s.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPool indicates an expected call of FindPool.
func (mr *MockK8sMockRecorder) FindPool(ctx, clusterID, name any) *MockK8sFindPoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPool", reflect.TypeOf((*MockK8s)(nil).FindPool), ctx, clusterID, name)
	return &MockK8sFindPoolCall{Call: call}
}

// MockK8sFindPoolCall wrap *gomock.Call
type MockK8sFindPoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sFindPoolCall) Return(arg0 *k8s.Pool, arg1 error) *MockK8sFindPoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sFindPoolCall) Do(f func(context.Context, string, string) (*k8s.Pool, error)) *MockK8sFindPoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sFindPoolCall) DoAndReturn(f func(context.Context, string, string) (*k8s.Pool, error)) *MockK8sFindPoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterKubeConfig mocks base method.
func (m *MockK8s) GetClusterKubeConfig(ctx context.Context, id string) (*k8s.Kubeconfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterKubeConfig", ctx, id)
	ret0, _ := ret[0].(*k8s.Kubeconfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterKubeConfig indicates an expected call of GetClusterKubeConfig.
func (mr *MockK8sMockRecorder) GetClusterKubeConfig(ctx, id any) *MockK8sGetClusterKubeConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterKubeConfig", reflect.TypeOf((*MockK8s)(nil).GetClusterKubeConfig), ctx, id)
	return &MockK8sGetClusterKubeConfigCall{Call: call}
}

// MockK8sGetClusterKubeConfigCall wrap *gomock.Call
type MockK8sGetClusterKubeConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sGetClusterKubeConfigCall) Return(arg0 *k8s.Kubeconfig, arg1 error) *MockK8sGetClusterKubeConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sGetClusterKubeConfigCall) Do(f func(context.Context, string) (*k8s.Kubeconfig, error)) *MockK8sGetClusterKubeConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sGetClusterKubeConfigCall) DoAndReturn(f func(context.Context, string) (*k8s.Kubeconfig, error)) *MockK8sGetClusterKubeConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListClusterACLRules mocks base method.
func (m *MockK8s) ListClusterACLRules(ctx context.Context, clusterID string) ([]*k8s.ACLRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusterACLRules", ctx, clusterID)
	ret0, _ := ret[0].([]*k8s.ACLRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterACLRules indicates an expected call of ListClusterACLRules.
func (mr *MockK8sMockRecorder) ListClusterACLRules(ctx, clusterID any) *MockK8sListClusterACLRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterACLRules", reflect.TypeOf((*MockK8s)(nil).ListClusterACLRules), ctx, clusterID)
	return &MockK8sListClusterACLRulesCall{Call: call}
}

// MockK8sListClusterACLRulesCall wrap *gomock.Call
type MockK8sListClusterACLRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sListClusterACLRulesCall) Return(arg0 []*k8s.ACLRule, arg1 error) *MockK8sListClusterACLRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sListClusterACLRulesCall) Do(f func(context.Context, string) ([]*k8s.ACLRule, error)) *MockK8sListClusterACLRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sListClusterACLRulesCall) DoAndReturn(f func(context.Context, string) ([]*k8s.ACLRule, error)) *MockK8sListClusterACLRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListNodes mocks base method.
func (m *MockK8s) ListNodes(ctx context.Context, clusterID, poolID string) ([]*k8s.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes", ctx, clusterID, poolID)
	ret0, _ := ret[0].([]*k8s.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockK8sMockRecorder) ListNodes(ctx, clusterID, poolID any) *MockK8sListNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockK8s)(nil).ListNodes), ctx, clusterID, poolID)
	return &MockK8sListNodesCall{Call: call}
}

// MockK8sListNodesCall wrap *gomock.Call
type MockK8sListNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sListNodesCall) Return(arg0 []*k8s.Node, arg1 error) *MockK8sListNodesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sListNodesCall) Do(f func(context.Context, string, string) ([]*k8s.Node, error)) *MockK8sListNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sListNodesCall) DoAndReturn(f func(context.Context, string, string) ([]*k8s.Node, error)) *MockK8sListNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetClusterACLRules mocks base method.
func (m *MockK8s) SetClusterACLRules(ctx context.Context, clusterID string, rules []*k8s.ACLRuleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClusterACLRules", ctx, clusterID, rules)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClusterACLRules indicates an expected call of SetClusterACLRules.
func (mr *MockK8sMockRecorder) SetClusterACLRules(ctx, clusterID, rules any) *MockK8sSetClusterACLRulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterACLRules", reflect.TypeOf((*MockK8s)(nil).SetClusterACLRules), ctx, clusterID, rules)
	return &MockK8sSetClusterACLRulesCall{Call: call}
}

// MockK8sSetClusterACLRulesCall wrap *gomock.Call
type MockK8sSetClusterACLRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sSetClusterACLRulesCall) Return(arg0 error) *MockK8sSetClusterACLRulesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sSetClusterACLRulesCall) Do(f func(context.Context, string, []*k8s.ACLRuleRequest) error) *MockK8sSetClusterACLRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sSetClusterACLRulesCall) DoAndReturn(f func(context.Context, string, []*k8s.ACLRuleRequest) error) *MockK8sSetClusterACLRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetClusterType mocks base method.
func (m *MockK8s) SetClusterType(ctx context.Context, id, clusterType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClusterType", ctx, id, clusterType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClusterType indicates an expected call of SetClusterType.
func (mr *MockK8sMockRecorder) SetClusterType(ctx, id, clusterType any) *MockK8sSetClusterTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClusterType", reflect.TypeOf((*MockK8s)(nil).SetClusterType), ctx, id, clusterType)
	return &MockK8sSetClusterTypeCall{Call: call}
}

// MockK8sSetClusterTypeCall wrap *gomock.Call
type MockK8sSetClusterTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sSetClusterTypeCall) Return(arg0 error) *MockK8sSetClusterTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sSetClusterTypeCall) Do(f func(context.Context, string, string) error) *MockK8sSetClusterTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sSetClusterTypeCall) DoAndReturn(f func(context.Context, string, string) error) *MockK8sSetClusterTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCluster mocks base method.
func (m *MockK8s) UpdateCluster(ctx context.Context, id string, tags, featureGates, admissionPlugins, apiServerCertSANs *[]string, autoscalerConfig *k8s.UpdateClusterRequestAutoscalerConfig, autoUpgrade *k8s.UpdateClusterRequestAutoUpgrade, openIDConnectConfig *k8s.UpdateClusterRequestOpenIDConnectConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, id, tags, featureGates, admissionPlugins, apiServerCertSANs, autoscalerConfig, autoUpgrade, openIDConnectConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockK8sMockRecorder) UpdateCluster(ctx, id, tags, featureGates, admissionPlugins, apiServerCertSANs, autoscalerConfig, autoUpgrade, openIDConnectConfig any) *MockK8sUpdateClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockK8s)(nil).UpdateCluster), ctx, id, tags, featureGates, admissionPlugins, apiServerCertSANs, autoscalerConfig, autoUpgrade, openIDConnectConfig)
	return &MockK8sUpdateClusterCall{Call: call}
}

// MockK8sUpdateClusterCall wrap *gomock.Call
type MockK8sUpdateClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sUpdateClusterCall) Return(arg0 error) *MockK8sUpdateClusterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sUpdateClusterCall) Do(f func(context.Context, string, *[]string, *[]string, *[]string, *[]string, *k8s.UpdateClusterRequestAutoscalerConfig, *k8s.UpdateClusterRequestAutoUpgrade, *k8s.UpdateClusterRequestOpenIDConnectConfig) error) *MockK8sUpdateClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sUpdateClusterCall) DoAndReturn(f func(context.Context, string, *[]string, *[]string, *[]string, *[]string, *k8s.UpdateClusterRequestAutoscalerConfig, *k8s.UpdateClusterRequestAutoUpgrade, *k8s.UpdateClusterRequestOpenIDConnectConfig) error) *MockK8sUpdateClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePool mocks base method.
func (m *MockK8s) UpdatePool(ctx context.Context, id string, autoscaling, autohealing *bool, size, minSize, maxSize *uint32, tags *[]string, kubeletArgs *map[string]string, upgradePolicy *k8s.UpdatePoolRequestUpgradePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePool", ctx, id, autoscaling, autohealing, size, minSize, maxSize, tags, kubeletArgs, upgradePolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePool indicates an expected call of UpdatePool.
func (mr *MockK8sMockRecorder) UpdatePool(ctx, id, autoscaling, autohealing, size, minSize, maxSize, tags, kubeletArgs, upgradePolicy any) *MockK8sUpdatePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePool", reflect.TypeOf((*MockK8s)(nil).UpdatePool), ctx, id, autoscaling, autohealing, size, minSize, maxSize, tags, kubeletArgs, upgradePolicy)
	return &MockK8sUpdatePoolCall{Call: call}
}

// MockK8sUpdatePoolCall wrap *gomock.Call
type MockK8sUpdatePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sUpdatePoolCall) Return(arg0 error) *MockK8sUpdatePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sUpdatePoolCall) Do(f func(context.Context, string, *bool, *bool, *uint32, *uint32, *uint32, *[]string, *map[string]string, *k8s.UpdatePoolRequestUpgradePolicy) error) *MockK8sUpdatePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sUpdatePoolCall) DoAndReturn(f func(context.Context, string, *bool, *bool, *uint32, *uint32, *uint32, *[]string, *map[string]string, *k8s.UpdatePoolRequestUpgradePolicy) error) *MockK8sUpdatePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeCluster mocks base method.
func (m *MockK8s) UpgradeCluster(ctx context.Context, id, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeCluster", ctx, id, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeCluster indicates an expected call of UpgradeCluster.
func (mr *MockK8sMockRecorder) UpgradeCluster(ctx, id, version any) *MockK8sUpgradeClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeCluster", reflect.TypeOf((*MockK8s)(nil).UpgradeCluster), ctx, id, version)
	return &MockK8sUpgradeClusterCall{Call: call}
}

// MockK8sUpgradeClusterCall wrap *gomock.Call
type MockK8sUpgradeClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sUpgradeClusterCall) Return(arg0 error) *MockK8sUpgradeClusterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sUpgradeClusterCall) Do(f func(context.Context, string, string) error) *MockK8sUpgradeClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sUpgradeClusterCall) DoAndReturn(f func(context.Context, string, string) error) *MockK8sUpgradeClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradePool mocks base method.
func (m *MockK8s) UpgradePool(ctx context.Context, id, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradePool", ctx, id, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradePool indicates an expected call of UpgradePool.
func (mr *MockK8sMockRecorder) UpgradePool(ctx, id, version any) *MockK8sUpgradePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradePool", reflect.TypeOf((*MockK8s)(nil).UpgradePool), ctx, id, version)
	return &MockK8sUpgradePoolCall{Call: call}
}

// MockK8sUpgradePoolCall wrap *gomock.Call
type MockK8sUpgradePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8sUpgradePoolCall) Return(arg0 error) *MockK8sUpgradePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8sUpgradePoolCall) Do(f func(context.Context, string, string) error) *MockK8sUpgradePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8sUpgradePoolCall) DoAndReturn(f func(context.Context, string, string) error) *MockK8sUpgradePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
