// Code generated by MockGen. DO NOT EDIT.
// Source: ../vpcgw.go
//
// Generated by this command:
//
//	mockgen -destination vpcgw_mock.go -package mock_client -source ../vpcgw.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	vpcgw "github.com/scaleway/scaleway-sdk-go/api/vpcgw/v2"
	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockVPCGWAPI is a mock of VPCGWAPI interface.
type MockVPCGWAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVPCGWAPIMockRecorder
	isgomock struct{}
}

// MockVPCGWAPIMockRecorder is the mock recorder for MockVPCGWAPI.
type MockVPCGWAPIMockRecorder struct {
	mock *MockVPCGWAPI
}

// NewMockVPCGWAPI creates a new mock instance.
func NewMockVPCGWAPI(ctrl *gomock.Controller) *MockVPCGWAPI {
	mock := &MockVPCGWAPI{ctrl: ctrl}
	mock.recorder = &MockVPCGWAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPCGWAPI) EXPECT() *MockVPCGWAPIMockRecorder {
	return m.recorder
}

// CreateGateway mocks base method.
func (m *MockVPCGWAPI) CreateGateway(req *vpcgw.CreateGatewayRequest, opts ...scw.RequestOption) (*vpcgw.Gateway, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGateway", varargs...)
	ret0, _ := ret[0].(*vpcgw.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGateway indicates an expected call of CreateGateway.
func (mr *MockVPCGWAPIMockRecorder) CreateGateway(req any, opts ...any) *MockVPCGWAPICreateGatewayCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGateway", reflect.TypeOf((*MockVPCGWAPI)(nil).CreateGateway), varargs...)
	return &MockVPCGWAPICreateGatewayCall{Call: call}
}

// MockVPCGWAPICreateGatewayCall wrap *gomock.Call
type MockVPCGWAPICreateGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWAPICreateGatewayCall) Return(arg0 *vpcgw.Gateway, arg1 error) *MockVPCGWAPICreateGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWAPICreateGatewayCall) Do(f func(*vpcgw.CreateGatewayRequest, ...scw.RequestOption) (*vpcgw.Gateway, error)) *MockVPCGWAPICreateGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWAPICreateGatewayCall) DoAndReturn(f func(*vpcgw.CreateGatewayRequest, ...scw.RequestOption) (*vpcgw.Gateway, error)) *MockVPCGWAPICreateGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGatewayNetwork mocks base method.
func (m *MockVPCGWAPI) CreateGatewayNetwork(req *vpcgw.CreateGatewayNetworkRequest, opts ...scw.RequestOption) (*vpcgw.GatewayNetwork, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGatewayNetwork", varargs...)
	ret0, _ := ret[0].(*vpcgw.GatewayNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGatewayNetwork indicates an expected call of CreateGatewayNetwork.
func (mr *MockVPCGWAPIMockRecorder) CreateGatewayNetwork(req any, opts ...any) *MockVPCGWAPICreateGatewayNetworkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayNetwork", reflect.TypeOf((*MockVPCGWAPI)(nil).CreateGatewayNetwork), varargs...)
	return &MockVPCGWAPICreateGatewayNetworkCall{Call: call}
}

// MockVPCGWAPICreateGatewayNetworkCall wrap *gomock.Call
type MockVPCGWAPICreateGatewayNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWAPICreateGatewayNetworkCall) Return(arg0 *vpcgw.GatewayNetwork, arg1 error) *MockVPCGWAPICreateGatewayNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWAPICreateGatewayNetworkCall) Do(f func(*vpcgw.CreateGatewayNetworkRequest, ...scw.RequestOption) (*vpcgw.GatewayNetwork, error)) *MockVPCGWAPICreateGatewayNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWAPICreateGatewayNetworkCall) DoAndReturn(f func(*vpcgw.CreateGatewayNetworkRequest, ...scw.RequestOption) (*vpcgw.GatewayNetwork, error)) *MockVPCGWAPICreateGatewayNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGateway mocks base method.
func (m *MockVPCGWAPI) DeleteGateway(req *vpcgw.DeleteGatewayRequest, opts ...scw.RequestOption) (*vpcgw.Gateway, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGateway", varargs...)
	ret0, _ := ret[0].(*vpcgw.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGateway indicates an expected call of DeleteGateway.
func (mr *MockVPCGWAPIMockRecorder) DeleteGateway(req any, opts ...any) *MockVPCGWAPIDeleteGatewayCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockVPCGWAPI)(nil).DeleteGateway), varargs...)
	return &MockVPCGWAPIDeleteGatewayCall{Call: call}
}

// MockVPCGWAPIDeleteGatewayCall wrap *gomock.Call
type MockVPCGWAPIDeleteGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWAPIDeleteGatewayCall) Return(arg0 *vpcgw.Gateway, arg1 error) *MockVPCGWAPIDeleteGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWAPIDeleteGatewayCall) Do(f func(*vpcgw.DeleteGatewayRequest, ...scw.RequestOption) (*vpcgw.Gateway, error)) *MockVPCGWAPIDeleteGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWAPIDeleteGatewayCall) DoAndReturn(f func(*vpcgw.DeleteGatewayRequest, ...scw.RequestOption) (*vpcgw.Gateway, error)) *MockVPCGWAPIDeleteGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGatewayTypes mocks base method.
func (m *MockVPCGWAPI) ListGatewayTypes(req *vpcgw.ListGatewayTypesRequest, opts ...scw.RequestOption) (*vpcgw.ListGatewayTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGatewayTypes", varargs...)
	ret0, _ := ret[0].(*vpcgw.ListGatewayTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGatewayTypes indicates an expected call of ListGatewayTypes.
func (mr *MockVPCGWAPIMockRecorder) ListGatewayTypes(req any, opts ...any) *MockVPCGWAPIListGatewayTypesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewayTypes", reflect.TypeOf((*MockVPCGWAPI)(nil).ListGatewayTypes), varargs...)
	return &MockVPCGWAPIListGatewayTypesCall{Call: call}
}

// MockVPCGWAPIListGatewayTypesCall wrap *gomock.Call
type MockVPCGWAPIListGatewayTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWAPIListGatewayTypesCall) Return(arg0 *vpcgw.ListGatewayTypesResponse, arg1 error) *MockVPCGWAPIListGatewayTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWAPIListGatewayTypesCall) Do(f func(*vpcgw.ListGatewayTypesRequest, ...scw.RequestOption) (*vpcgw.ListGatewayTypesResponse, error)) *MockVPCGWAPIListGatewayTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWAPIListGatewayTypesCall) DoAndReturn(f func(*vpcgw.ListGatewayTypesRequest, ...scw.RequestOption) (*vpcgw.ListGatewayTypesResponse, error)) *MockVPCGWAPIListGatewayTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGateways mocks base method.
func (m *MockVPCGWAPI) ListGateways(req *vpcgw.ListGatewaysRequest, opts ...scw.RequestOption) (*vpcgw.ListGatewaysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGateways", varargs...)
	ret0, _ := ret[0].(*vpcgw.ListGatewaysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGateways indicates an expected call of ListGateways.
func (mr *MockVPCGWAPIMockRecorder) ListGateways(req any, opts ...any) *MockVPCGWAPIListGatewaysCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGateways", reflect.TypeOf((*MockVPCGWAPI)(nil).ListGateways), varargs...)
	return &MockVPCGWAPIListGatewaysCall{Call: call}
}

// MockVPCGWAPIListGatewaysCall wrap *gomock.Call
type MockVPCGWAPIListGatewaysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWAPIListGatewaysCall) Return(arg0 *vpcgw.ListGatewaysResponse, arg1 error) *MockVPCGWAPIListGatewaysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWAPIListGatewaysCall) Do(f func(*vpcgw.ListGatewaysRequest, ...scw.RequestOption) (*vpcgw.ListGatewaysResponse, error)) *MockVPCGWAPIListGatewaysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWAPIListGatewaysCall) DoAndReturn(f func(*vpcgw.ListGatewaysRequest, ...scw.RequestOption) (*vpcgw.ListGatewaysResponse, error)) *MockVPCGWAPIListGatewaysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListIPs mocks base method.
func (m *MockVPCGWAPI) ListIPs(req *vpcgw.ListIPsRequest, opts ...scw.RequestOption) (*vpcgw.ListIPsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIPs", varargs...)
	ret0, _ := ret[0].(*vpcgw.ListIPsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPs indicates an expected call of ListIPs.
func (mr *MockVPCGWAPIMockRecorder) ListIPs(req any, opts ...any) *MockVPCGWAPIListIPsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPs", reflect.TypeOf((*MockVPCGWAPI)(nil).ListIPs), varargs...)
	return &MockVPCGWAPIListIPsCall{Call: call}
}

// MockVPCGWAPIListIPsCall wrap *gomock.Call
type MockVPCGWAPIListIPsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWAPIListIPsCall) Return(arg0 *vpcgw.ListIPsResponse, arg1 error) *MockVPCGWAPIListIPsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWAPIListIPsCall) Do(f func(*vpcgw.ListIPsRequest, ...scw.RequestOption) (*vpcgw.ListIPsResponse, error)) *MockVPCGWAPIListIPsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWAPIListIPsCall) DoAndReturn(f func(*vpcgw.ListIPsRequest, ...scw.RequestOption) (*vpcgw.ListIPsResponse, error)) *MockVPCGWAPIListIPsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeGateway mocks base method.
func (m *MockVPCGWAPI) UpgradeGateway(req *vpcgw.UpgradeGatewayRequest, opts ...scw.RequestOption) (*vpcgw.Gateway, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpgradeGateway", varargs...)
	ret0, _ := ret[0].(*vpcgw.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeGateway indicates an expected call of UpgradeGateway.
func (mr *MockVPCGWAPIMockRecorder) UpgradeGateway(req any, opts ...any) *MockVPCGWAPIUpgradeGatewayCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeGateway", reflect.TypeOf((*MockVPCGWAPI)(nil).UpgradeGateway), varargs...)
	return &MockVPCGWAPIUpgradeGatewayCall{Call: call}
}

// MockVPCGWAPIUpgradeGatewayCall wrap *gomock.Call
type MockVPCGWAPIUpgradeGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWAPIUpgradeGatewayCall) Return(arg0 *vpcgw.Gateway, arg1 error) *MockVPCGWAPIUpgradeGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWAPIUpgradeGatewayCall) Do(f func(*vpcgw.UpgradeGatewayRequest, ...scw.RequestOption) (*vpcgw.Gateway, error)) *MockVPCGWAPIUpgradeGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWAPIUpgradeGatewayCall) DoAndReturn(f func(*vpcgw.UpgradeGatewayRequest, ...scw.RequestOption) (*vpcgw.Gateway, error)) *MockVPCGWAPIUpgradeGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Zones mocks base method.
func (m *MockVPCGWAPI) Zones() []scw.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zones")
	ret0, _ := ret[0].([]scw.Zone)
	return ret0
}

// Zones indicates an expected call of Zones.
func (mr *MockVPCGWAPIMockRecorder) Zones() *MockVPCGWAPIZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zones", reflect.TypeOf((*MockVPCGWAPI)(nil).Zones))
	return &MockVPCGWAPIZonesCall{Call: call}
}

// MockVPCGWAPIZonesCall wrap *gomock.Call
type MockVPCGWAPIZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWAPIZonesCall) Return(arg0 []scw.Zone) *MockVPCGWAPIZonesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWAPIZonesCall) Do(f func() []scw.Zone) *MockVPCGWAPIZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWAPIZonesCall) DoAndReturn(f func() []scw.Zone) *MockVPCGWAPIZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockVPCGW is a mock of VPCGW interface.
type MockVPCGW struct {
	ctrl     *gomock.Controller
	recorder *MockVPCGWMockRecorder
	isgomock struct{}
}

// MockVPCGWMockRecorder is the mock recorder for MockVPCGW.
type MockVPCGWMockRecorder struct {
	mock *MockVPCGW
}

// NewMockVPCGW creates a new mock instance.
func NewMockVPCGW(ctrl *gomock.Controller) *MockVPCGW {
	mock := &MockVPCGW{ctrl: ctrl}
	mock.recorder = &MockVPCGWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPCGW) EXPECT() *MockVPCGWMockRecorder {
	return m.recorder
}

// CreateGateway mocks base method.
func (m *MockVPCGW) CreateGateway(ctx context.Context, zone scw.Zone, name, gwType string, tags []string, ipID *string) (*vpcgw.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGateway", ctx, zone, name, gwType, tags, ipID)
	ret0, _ := ret[0].(*vpcgw.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGateway indicates an expected call of CreateGateway.
func (mr *MockVPCGWMockRecorder) CreateGateway(ctx, zone, name, gwType, tags, ipID any) *MockVPCGWCreateGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGateway", reflect.TypeOf((*MockVPCGW)(nil).CreateGateway), ctx, zone, name, gwType, tags, ipID)
	return &MockVPCGWCreateGatewayCall{Call: call}
}

// MockVPCGWCreateGatewayCall wrap *gomock.Call
type MockVPCGWCreateGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWCreateGatewayCall) Return(arg0 *vpcgw.Gateway, arg1 error) *MockVPCGWCreateGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWCreateGatewayCall) Do(f func(context.Context, scw.Zone, string, string, []string, *string) (*vpcgw.Gateway, error)) *MockVPCGWCreateGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWCreateGatewayCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, []string, *string) (*vpcgw.Gateway, error)) *MockVPCGWCreateGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGatewayNetwork mocks base method.
func (m *MockVPCGW) CreateGatewayNetwork(ctx context.Context, zone scw.Zone, gatewayID, privateNetworkID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGatewayNetwork", ctx, zone, gatewayID, privateNetworkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGatewayNetwork indicates an expected call of CreateGatewayNetwork.
func (mr *MockVPCGWMockRecorder) CreateGatewayNetwork(ctx, zone, gatewayID, privateNetworkID any) *MockVPCGWCreateGatewayNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatewayNetwork", reflect.TypeOf((*MockVPCGW)(nil).CreateGatewayNetwork), ctx, zone, gatewayID, privateNetworkID)
	return &MockVPCGWCreateGatewayNetworkCall{Call: call}
}

// MockVPCGWCreateGatewayNetworkCall wrap *gomock.Call
type MockVPCGWCreateGatewayNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWCreateGatewayNetworkCall) Return(arg0 error) *MockVPCGWCreateGatewayNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWCreateGatewayNetworkCall) Do(f func(context.Context, scw.Zone, string, string) error) *MockVPCGWCreateGatewayNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWCreateGatewayNetworkCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) error) *MockVPCGWCreateGatewayNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGateway mocks base method.
func (m *MockVPCGW) DeleteGateway(ctx context.Context, zone scw.Zone, id string, deleteIP bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGateway", ctx, zone, id, deleteIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGateway indicates an expected call of DeleteGateway.
func (mr *MockVPCGWMockRecorder) DeleteGateway(ctx, zone, id, deleteIP any) *MockVPCGWDeleteGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGateway", reflect.TypeOf((*MockVPCGW)(nil).DeleteGateway), ctx, zone, id, deleteIP)
	return &MockVPCGWDeleteGatewayCall{Call: call}
}

// MockVPCGWDeleteGatewayCall wrap *gomock.Call
type MockVPCGWDeleteGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWDeleteGatewayCall) Return(arg0 error) *MockVPCGWDeleteGatewayCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWDeleteGatewayCall) Do(f func(context.Context, scw.Zone, string, bool) error) *MockVPCGWDeleteGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWDeleteGatewayCall) DoAndReturn(f func(context.Context, scw.Zone, string, bool) error) *MockVPCGWDeleteGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindGatewayIP mocks base method.
func (m *MockVPCGW) FindGatewayIP(ctx context.Context, zone scw.Zone, ip string) (*vpcgw.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGatewayIP", ctx, zone, ip)
	ret0, _ := ret[0].(*vpcgw.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGatewayIP indicates an expected call of FindGatewayIP.
func (mr *MockVPCGWMockRecorder) FindGatewayIP(ctx, zone, ip any) *MockVPCGWFindGatewayIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGatewayIP", reflect.TypeOf((*MockVPCGW)(nil).FindGatewayIP), ctx, zone, ip)
	return &MockVPCGWFindGatewayIPCall{Call: call}
}

// MockVPCGWFindGatewayIPCall wrap *gomock.Call
type MockVPCGWFindGatewayIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWFindGatewayIPCall) Return(arg0 *vpcgw.IP, arg1 error) *MockVPCGWFindGatewayIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWFindGatewayIPCall) Do(f func(context.Context, scw.Zone, string) (*vpcgw.IP, error)) *MockVPCGWFindGatewayIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWFindGatewayIPCall) DoAndReturn(f func(context.Context, scw.Zone, string) (*vpcgw.IP, error)) *MockVPCGWFindGatewayIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindGateways mocks base method.
func (m *MockVPCGW) FindGateways(ctx context.Context, tags []string) ([]*vpcgw.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGateways", ctx, tags)
	ret0, _ := ret[0].([]*vpcgw.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGateways indicates an expected call of FindGateways.
func (mr *MockVPCGWMockRecorder) FindGateways(ctx, tags any) *MockVPCGWFindGatewaysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGateways", reflect.TypeOf((*MockVPCGW)(nil).FindGateways), ctx, tags)
	return &MockVPCGWFindGatewaysCall{Call: call}
}

// MockVPCGWFindGatewaysCall wrap *gomock.Call
type MockVPCGWFindGatewaysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWFindGatewaysCall) Return(arg0 []*vpcgw.Gateway, arg1 error) *MockVPCGWFindGatewaysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWFindGatewaysCall) Do(f func(context.Context, []string) ([]*vpcgw.Gateway, error)) *MockVPCGWFindGatewaysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWFindGatewaysCall) DoAndReturn(f func(context.Context, []string) ([]*vpcgw.Gateway, error)) *MockVPCGWFindGatewaysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGatewayTypes mocks base method.
func (m *MockVPCGW) ListGatewayTypes(ctx context.Context, zone scw.Zone) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGatewayTypes", ctx, zone)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGatewayTypes indicates an expected call of ListGatewayTypes.
func (mr *MockVPCGWMockRecorder) ListGatewayTypes(ctx, zone any) *MockVPCGWListGatewayTypesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGatewayTypes", reflect.TypeOf((*MockVPCGW)(nil).ListGatewayTypes), ctx, zone)
	return &MockVPCGWListGatewayTypesCall{Call: call}
}

// MockVPCGWListGatewayTypesCall wrap *gomock.Call
type MockVPCGWListGatewayTypesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWListGatewayTypesCall) Return(arg0 []string, arg1 error) *MockVPCGWListGatewayTypesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWListGatewayTypesCall) Do(f func(context.Context, scw.Zone) ([]string, error)) *MockVPCGWListGatewayTypesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWListGatewayTypesCall) DoAndReturn(f func(context.Context, scw.Zone) ([]string, error)) *MockVPCGWListGatewayTypesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeGateway mocks base method.
func (m *MockVPCGW) UpgradeGateway(ctx context.Context, zone scw.Zone, gatewayID, newType string) (*vpcgw.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeGateway", ctx, zone, gatewayID, newType)
	ret0, _ := ret[0].(*vpcgw.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeGateway indicates an expected call of UpgradeGateway.
func (mr *MockVPCGWMockRecorder) UpgradeGateway(ctx, zone, gatewayID, newType any) *MockVPCGWUpgradeGatewayCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeGateway", reflect.TypeOf((*MockVPCGW)(nil).UpgradeGateway), ctx, zone, gatewayID, newType)
	return &MockVPCGWUpgradeGatewayCall{Call: call}
}

// MockVPCGWUpgradeGatewayCall wrap *gomock.Call
type MockVPCGWUpgradeGatewayCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGWUpgradeGatewayCall) Return(arg0 *vpcgw.Gateway, arg1 error) *MockVPCGWUpgradeGatewayCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGWUpgradeGatewayCall) Do(f func(context.Context, scw.Zone, string, string) (*vpcgw.Gateway, error)) *MockVPCGWUpgradeGatewayCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGWUpgradeGatewayCall) DoAndReturn(f func(context.Context, scw.Zone, string, string) (*vpcgw.Gateway, error)) *MockVPCGWUpgradeGatewayCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
