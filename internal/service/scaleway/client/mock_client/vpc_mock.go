// Code generated by MockGen. DO NOT EDIT.
// Source: ../vpc.go
//
// Generated by this command:
//
//	mockgen -destination vpc_mock.go -package mock_client -source ../vpc.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	vpc "github.com/scaleway/scaleway-sdk-go/api/vpc/v2"
	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockVPCAPI is a mock of VPCAPI interface.
type MockVPCAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVPCAPIMockRecorder
	isgomock struct{}
}

// MockVPCAPIMockRecorder is the mock recorder for MockVPCAPI.
type MockVPCAPIMockRecorder struct {
	mock *MockVPCAPI
}

// NewMockVPCAPI creates a new mock instance.
func NewMockVPCAPI(ctrl *gomock.Controller) *MockVPCAPI {
	mock := &MockVPCAPI{ctrl: ctrl}
	mock.recorder = &MockVPCAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPCAPI) EXPECT() *MockVPCAPIMockRecorder {
	return m.recorder
}

// CreatePrivateNetwork mocks base method.
func (m *MockVPCAPI) CreatePrivateNetwork(req *vpc.CreatePrivateNetworkRequest, opts ...scw.RequestOption) (*vpc.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePrivateNetwork", varargs...)
	ret0, _ := ret[0].(*vpc.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateNetwork indicates an expected call of CreatePrivateNetwork.
func (mr *MockVPCAPIMockRecorder) CreatePrivateNetwork(req any, opts ...any) *MockVPCAPICreatePrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateNetwork", reflect.TypeOf((*MockVPCAPI)(nil).CreatePrivateNetwork), varargs...)
	return &MockVPCAPICreatePrivateNetworkCall{Call: call}
}

// MockVPCAPICreatePrivateNetworkCall wrap *gomock.Call
type MockVPCAPICreatePrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCAPICreatePrivateNetworkCall) Return(arg0 *vpc.PrivateNetwork, arg1 error) *MockVPCAPICreatePrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCAPICreatePrivateNetworkCall) Do(f func(*vpc.CreatePrivateNetworkRequest, ...scw.RequestOption) (*vpc.PrivateNetwork, error)) *MockVPCAPICreatePrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCAPICreatePrivateNetworkCall) DoAndReturn(f func(*vpc.CreatePrivateNetworkRequest, ...scw.RequestOption) (*vpc.PrivateNetwork, error)) *MockVPCAPICreatePrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePrivateNetwork mocks base method.
func (m *MockVPCAPI) DeletePrivateNetwork(req *vpc.DeletePrivateNetworkRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePrivateNetwork", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrivateNetwork indicates an expected call of DeletePrivateNetwork.
func (mr *MockVPCAPIMockRecorder) DeletePrivateNetwork(req any, opts ...any) *MockVPCAPIDeletePrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateNetwork", reflect.TypeOf((*MockVPCAPI)(nil).DeletePrivateNetwork), varargs...)
	return &MockVPCAPIDeletePrivateNetworkCall{Call: call}
}

// MockVPCAPIDeletePrivateNetworkCall wrap *gomock.Call
type MockVPCAPIDeletePrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCAPIDeletePrivateNetworkCall) Return(arg0 error) *MockVPCAPIDeletePrivateNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCAPIDeletePrivateNetworkCall) Do(f func(*vpc.DeletePrivateNetworkRequest, ...scw.RequestOption) error) *MockVPCAPIDeletePrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCAPIDeletePrivateNetworkCall) DoAndReturn(f func(*vpc.DeletePrivateNetworkRequest, ...scw.RequestOption) error) *MockVPCAPIDeletePrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPrivateNetwork mocks base method.
func (m *MockVPCAPI) GetPrivateNetwork(req *vpc.GetPrivateNetworkRequest, opts ...scw.RequestOption) (*vpc.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrivateNetwork", varargs...)
	ret0, _ := ret[0].(*vpc.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateNetwork indicates an expected call of GetPrivateNetwork.
func (mr *MockVPCAPIMockRecorder) GetPrivateNetwork(req any, opts ...any) *MockVPCAPIGetPrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateNetwork", reflect.TypeOf((*MockVPCAPI)(nil).GetPrivateNetwork), varargs...)
	return &MockVPCAPIGetPrivateNetworkCall{Call: call}
}

// MockVPCAPIGetPrivateNetworkCall wrap *gomock.Call
type MockVPCAPIGetPrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCAPIGetPrivateNetworkCall) Return(arg0 *vpc.PrivateNetwork, arg1 error) *MockVPCAPIGetPrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCAPIGetPrivateNetworkCall) Do(f func(*vpc.GetPrivateNetworkRequest, ...scw.RequestOption) (*vpc.PrivateNetwork, error)) *MockVPCAPIGetPrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCAPIGetPrivateNetworkCall) DoAndReturn(f func(*vpc.GetPrivateNetworkRequest, ...scw.RequestOption) (*vpc.PrivateNetwork, error)) *MockVPCAPIGetPrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPrivateNetworks mocks base method.
func (m *MockVPCAPI) ListPrivateNetworks(req *vpc.ListPrivateNetworksRequest, opts ...scw.RequestOption) (*vpc.ListPrivateNetworksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPrivateNetworks", varargs...)
	ret0, _ := ret[0].(*vpc.ListPrivateNetworksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrivateNetworks indicates an expected call of ListPrivateNetworks.
func (mr *MockVPCAPIMockRecorder) ListPrivateNetworks(req any, opts ...any) *MockVPCAPIListPrivateNetworksCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateNetworks", reflect.TypeOf((*MockVPCAPI)(nil).ListPrivateNetworks), varargs...)
	return &MockVPCAPIListPrivateNetworksCall{Call: call}
}

// MockVPCAPIListPrivateNetworksCall wrap *gomock.Call
type MockVPCAPIListPrivateNetworksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCAPIListPrivateNetworksCall) Return(arg0 *vpc.ListPrivateNetworksResponse, arg1 error) *MockVPCAPIListPrivateNetworksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCAPIListPrivateNetworksCall) Do(f func(*vpc.ListPrivateNetworksRequest, ...scw.RequestOption) (*vpc.ListPrivateNetworksResponse, error)) *MockVPCAPIListPrivateNetworksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCAPIListPrivateNetworksCall) DoAndReturn(f func(*vpc.ListPrivateNetworksRequest, ...scw.RequestOption) (*vpc.ListPrivateNetworksResponse, error)) *MockVPCAPIListPrivateNetworksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockVPC is a mock of VPC interface.
type MockVPC struct {
	ctrl     *gomock.Controller
	recorder *MockVPCMockRecorder
	isgomock struct{}
}

// MockVPCMockRecorder is the mock recorder for MockVPC.
type MockVPCMockRecorder struct {
	mock *MockVPC
}

// NewMockVPC creates a new mock instance.
func NewMockVPC(ctrl *gomock.Controller) *MockVPC {
	mock := &MockVPC{ctrl: ctrl}
	mock.recorder = &MockVPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVPC) EXPECT() *MockVPCMockRecorder {
	return m.recorder
}

// CreatePrivateNetwork mocks base method.
func (m *MockVPC) CreatePrivateNetwork(ctx context.Context, name string, vpcID, subnet *string, tags []string) (*vpc.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateNetwork", ctx, name, vpcID, subnet, tags)
	ret0, _ := ret[0].(*vpc.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateNetwork indicates an expected call of CreatePrivateNetwork.
func (mr *MockVPCMockRecorder) CreatePrivateNetwork(ctx, name, vpcID, subnet, tags any) *MockVPCCreatePrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateNetwork", reflect.TypeOf((*MockVPC)(nil).CreatePrivateNetwork), ctx, name, vpcID, subnet, tags)
	return &MockVPCCreatePrivateNetworkCall{Call: call}
}

// MockVPCCreatePrivateNetworkCall wrap *gomock.Call
type MockVPCCreatePrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCCreatePrivateNetworkCall) Return(arg0 *vpc.PrivateNetwork, arg1 error) *MockVPCCreatePrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCCreatePrivateNetworkCall) Do(f func(context.Context, string, *string, *string, []string) (*vpc.PrivateNetwork, error)) *MockVPCCreatePrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCCreatePrivateNetworkCall) DoAndReturn(f func(context.Context, string, *string, *string, []string) (*vpc.PrivateNetwork, error)) *MockVPCCreatePrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePrivateNetwork mocks base method.
func (m *MockVPC) DeletePrivateNetwork(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateNetwork", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrivateNetwork indicates an expected call of DeletePrivateNetwork.
func (mr *MockVPCMockRecorder) DeletePrivateNetwork(ctx, id any) *MockVPCDeletePrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateNetwork", reflect.TypeOf((*MockVPC)(nil).DeletePrivateNetwork), ctx, id)
	return &MockVPCDeletePrivateNetworkCall{Call: call}
}

// MockVPCDeletePrivateNetworkCall wrap *gomock.Call
type MockVPCDeletePrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCDeletePrivateNetworkCall) Return(arg0 error) *MockVPCDeletePrivateNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCDeletePrivateNetworkCall) Do(f func(context.Context, string) error) *MockVPCDeletePrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCDeletePrivateNetworkCall) DoAndReturn(f func(context.Context, string) error) *MockVPCDeletePrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindPrivateNetwork mocks base method.
func (m *MockVPC) FindPrivateNetwork(ctx context.Context, tags []string, vpcID *string) (*vpc.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPrivateNetwork", ctx, tags, vpcID)
	ret0, _ := ret[0].(*vpc.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPrivateNetwork indicates an expected call of FindPrivateNetwork.
func (mr *MockVPCMockRecorder) FindPrivateNetwork(ctx, tags, vpcID any) *MockVPCFindPrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPrivateNetwork", reflect.TypeOf((*MockVPC)(nil).FindPrivateNetwork), ctx, tags, vpcID)
	return &MockVPCFindPrivateNetworkCall{Call: call}
}

// MockVPCFindPrivateNetworkCall wrap *gomock.Call
type MockVPCFindPrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCFindPrivateNetworkCall) Return(arg0 *vpc.PrivateNetwork, arg1 error) *MockVPCFindPrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCFindPrivateNetworkCall) Do(f func(context.Context, []string, *string) (*vpc.PrivateNetwork, error)) *MockVPCFindPrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCFindPrivateNetworkCall) DoAndReturn(f func(context.Context, []string, *string) (*vpc.PrivateNetwork, error)) *MockVPCFindPrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPrivateNetwork mocks base method.
func (m *MockVPC) GetPrivateNetwork(ctx context.Context, privateNetworkID string) (*vpc.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateNetwork", ctx, privateNetworkID)
	ret0, _ := ret[0].(*vpc.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateNetwork indicates an expected call of GetPrivateNetwork.
func (mr *MockVPCMockRecorder) GetPrivateNetwork(ctx, privateNetworkID any) *MockVPCGetPrivateNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateNetwork", reflect.TypeOf((*MockVPC)(nil).GetPrivateNetwork), ctx, privateNetworkID)
	return &MockVPCGetPrivateNetworkCall{Call: call}
}

// MockVPCGetPrivateNetworkCall wrap *gomock.Call
type MockVPCGetPrivateNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVPCGetPrivateNetworkCall) Return(arg0 *vpc.PrivateNetwork, arg1 error) *MockVPCGetPrivateNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVPCGetPrivateNetworkCall) Do(f func(context.Context, string) (*vpc.PrivateNetwork, error)) *MockVPCGetPrivateNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVPCGetPrivateNetworkCall) DoAndReturn(f func(context.Context, string) (*vpc.PrivateNetwork, error)) *MockVPCGetPrivateNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
