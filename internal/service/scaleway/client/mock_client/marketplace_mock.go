// Code generated by MockGen. DO NOT EDIT.
// Source: ../marketplace.go
//
// Generated by this command:
//
//	mockgen -destination marketplace_mock.go -package mock_client -source ../marketplace.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	marketplace "github.com/scaleway/scaleway-sdk-go/api/marketplace/v2"
	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockMarketplaceAPI is a mock of MarketplaceAPI interface.
type MockMarketplaceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMarketplaceAPIMockRecorder
	isgomock struct{}
}

// MockMarketplaceAPIMockRecorder is the mock recorder for MockMarketplaceAPI.
type MockMarketplaceAPIMockRecorder struct {
	mock *MockMarketplaceAPI
}

// NewMockMarketplaceAPI creates a new mock instance.
func NewMockMarketplaceAPI(ctrl *gomock.Controller) *MockMarketplaceAPI {
	mock := &MockMarketplaceAPI{ctrl: ctrl}
	mock.recorder = &MockMarketplaceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketplaceAPI) EXPECT() *MockMarketplaceAPIMockRecorder {
	return m.recorder
}

// GetLocalImageByLabel mocks base method.
func (m *MockMarketplaceAPI) GetLocalImageByLabel(req *marketplace.GetLocalImageByLabelRequest, opts ...scw.RequestOption) (*marketplace.LocalImage, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLocalImageByLabel", varargs...)
	ret0, _ := ret[0].(*marketplace.LocalImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalImageByLabel indicates an expected call of GetLocalImageByLabel.
func (mr *MockMarketplaceAPIMockRecorder) GetLocalImageByLabel(req any, opts ...any) *MockMarketplaceAPIGetLocalImageByLabelCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalImageByLabel", reflect.TypeOf((*MockMarketplaceAPI)(nil).GetLocalImageByLabel), varargs...)
	return &MockMarketplaceAPIGetLocalImageByLabelCall{Call: call}
}

// MockMarketplaceAPIGetLocalImageByLabelCall wrap *gomock.Call
type MockMarketplaceAPIGetLocalImageByLabelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMarketplaceAPIGetLocalImageByLabelCall) Return(arg0 *marketplace.LocalImage, arg1 error) *MockMarketplaceAPIGetLocalImageByLabelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMarketplaceAPIGetLocalImageByLabelCall) Do(f func(*marketplace.GetLocalImageByLabelRequest, ...scw.RequestOption) (*marketplace.LocalImage, error)) *MockMarketplaceAPIGetLocalImageByLabelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMarketplaceAPIGetLocalImageByLabelCall) DoAndReturn(f func(*marketplace.GetLocalImageByLabelRequest, ...scw.RequestOption) (*marketplace.LocalImage, error)) *MockMarketplaceAPIGetLocalImageByLabelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMarketplace is a mock of Marketplace interface.
type MockMarketplace struct {
	ctrl     *gomock.Controller
	recorder *MockMarketplaceMockRecorder
	isgomock struct{}
}

// MockMarketplaceMockRecorder is the mock recorder for MockMarketplace.
type MockMarketplaceMockRecorder struct {
	mock *MockMarketplace
}

// NewMockMarketplace creates a new mock instance.
func NewMockMarketplace(ctrl *gomock.Controller) *MockMarketplace {
	mock := &MockMarketplace{ctrl: ctrl}
	mock.recorder = &MockMarketplaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketplace) EXPECT() *MockMarketplaceMockRecorder {
	return m.recorder
}

// GetLocalImageByLabel mocks base method.
func (m *MockMarketplace) GetLocalImageByLabel(ctx context.Context, zone scw.Zone, commercialType, imageLabel string, imageType marketplace.LocalImageType) (*marketplace.LocalImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalImageByLabel", ctx, zone, commercialType, imageLabel, imageType)
	ret0, _ := ret[0].(*marketplace.LocalImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalImageByLabel indicates an expected call of GetLocalImageByLabel.
func (mr *MockMarketplaceMockRecorder) GetLocalImageByLabel(ctx, zone, commercialType, imageLabel, imageType any) *MockMarketplaceGetLocalImageByLabelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalImageByLabel", reflect.TypeOf((*MockMarketplace)(nil).GetLocalImageByLabel), ctx, zone, commercialType, imageLabel, imageType)
	return &MockMarketplaceGetLocalImageByLabelCall{Call: call}
}

// MockMarketplaceGetLocalImageByLabelCall wrap *gomock.Call
type MockMarketplaceGetLocalImageByLabelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMarketplaceGetLocalImageByLabelCall) Return(arg0 *marketplace.LocalImage, arg1 error) *MockMarketplaceGetLocalImageByLabelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMarketplaceGetLocalImageByLabelCall) Do(f func(context.Context, scw.Zone, string, string, marketplace.LocalImageType) (*marketplace.LocalImage, error)) *MockMarketplaceGetLocalImageByLabelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMarketplaceGetLocalImageByLabelCall) DoAndReturn(f func(context.Context, scw.Zone, string, string, marketplace.LocalImageType) (*marketplace.LocalImage, error)) *MockMarketplaceGetLocalImageByLabelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
