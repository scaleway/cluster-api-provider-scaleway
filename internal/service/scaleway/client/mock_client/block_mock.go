// Code generated by MockGen. DO NOT EDIT.
// Source: ../block.go
//
// Generated by this command:
//
//	mockgen -destination block_mock.go -package mock_client -source ../block.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	block "github.com/scaleway/scaleway-sdk-go/api/block/v1"
	scw "github.com/scaleway/scaleway-sdk-go/scw"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockAPI is a mock of BlockAPI interface.
type MockBlockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBlockAPIMockRecorder
	isgomock struct{}
}

// MockBlockAPIMockRecorder is the mock recorder for MockBlockAPI.
type MockBlockAPIMockRecorder struct {
	mock *MockBlockAPI
}

// NewMockBlockAPI creates a new mock instance.
func NewMockBlockAPI(ctrl *gomock.Controller) *MockBlockAPI {
	mock := &MockBlockAPI{ctrl: ctrl}
	mock.recorder = &MockBlockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockAPI) EXPECT() *MockBlockAPIMockRecorder {
	return m.recorder
}

// DeleteVolume mocks base method.
func (m *MockBlockAPI) DeleteVolume(req *block.DeleteVolumeRequest, opts ...scw.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVolume", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockBlockAPIMockRecorder) DeleteVolume(req any, opts ...any) *MockBlockAPIDeleteVolumeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockBlockAPI)(nil).DeleteVolume), varargs...)
	return &MockBlockAPIDeleteVolumeCall{Call: call}
}

// MockBlockAPIDeleteVolumeCall wrap *gomock.Call
type MockBlockAPIDeleteVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockAPIDeleteVolumeCall) Return(arg0 error) *MockBlockAPIDeleteVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockAPIDeleteVolumeCall) Do(f func(*block.DeleteVolumeRequest, ...scw.RequestOption) error) *MockBlockAPIDeleteVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockAPIDeleteVolumeCall) DoAndReturn(f func(*block.DeleteVolumeRequest, ...scw.RequestOption) error) *MockBlockAPIDeleteVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVolumes mocks base method.
func (m *MockBlockAPI) ListVolumes(req *block.ListVolumesRequest, opts ...scw.RequestOption) (*block.ListVolumesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVolumes", varargs...)
	ret0, _ := ret[0].(*block.ListVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockBlockAPIMockRecorder) ListVolumes(req any, opts ...any) *MockBlockAPIListVolumesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockBlockAPI)(nil).ListVolumes), varargs...)
	return &MockBlockAPIListVolumesCall{Call: call}
}

// MockBlockAPIListVolumesCall wrap *gomock.Call
type MockBlockAPIListVolumesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockAPIListVolumesCall) Return(arg0 *block.ListVolumesResponse, arg1 error) *MockBlockAPIListVolumesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockAPIListVolumesCall) Do(f func(*block.ListVolumesRequest, ...scw.RequestOption) (*block.ListVolumesResponse, error)) *MockBlockAPIListVolumesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockAPIListVolumesCall) DoAndReturn(f func(*block.ListVolumesRequest, ...scw.RequestOption) (*block.ListVolumesResponse, error)) *MockBlockAPIListVolumesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVolume mocks base method.
func (m *MockBlockAPI) UpdateVolume(req *block.UpdateVolumeRequest, opts ...scw.RequestOption) (*block.Volume, error) {
	m.ctrl.T.Helper()
	varargs := []any{req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVolume", varargs...)
	ret0, _ := ret[0].(*block.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockBlockAPIMockRecorder) UpdateVolume(req any, opts ...any) *MockBlockAPIUpdateVolumeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{req}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockBlockAPI)(nil).UpdateVolume), varargs...)
	return &MockBlockAPIUpdateVolumeCall{Call: call}
}

// MockBlockAPIUpdateVolumeCall wrap *gomock.Call
type MockBlockAPIUpdateVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockAPIUpdateVolumeCall) Return(arg0 *block.Volume, arg1 error) *MockBlockAPIUpdateVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockAPIUpdateVolumeCall) Do(f func(*block.UpdateVolumeRequest, ...scw.RequestOption) (*block.Volume, error)) *MockBlockAPIUpdateVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockAPIUpdateVolumeCall) DoAndReturn(f func(*block.UpdateVolumeRequest, ...scw.RequestOption) (*block.Volume, error)) *MockBlockAPIUpdateVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Zones mocks base method.
func (m *MockBlockAPI) Zones() []scw.Zone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zones")
	ret0, _ := ret[0].([]scw.Zone)
	return ret0
}

// Zones indicates an expected call of Zones.
func (mr *MockBlockAPIMockRecorder) Zones() *MockBlockAPIZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zones", reflect.TypeOf((*MockBlockAPI)(nil).Zones))
	return &MockBlockAPIZonesCall{Call: call}
}

// MockBlockAPIZonesCall wrap *gomock.Call
type MockBlockAPIZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockAPIZonesCall) Return(arg0 []scw.Zone) *MockBlockAPIZonesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockAPIZonesCall) Do(f func() []scw.Zone) *MockBlockAPIZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockAPIZonesCall) DoAndReturn(f func() []scw.Zone) *MockBlockAPIZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBlock is a mock of Block interface.
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *MockBlockMockRecorder
	isgomock struct{}
}

// MockBlockMockRecorder is the mock recorder for MockBlock.
type MockBlockMockRecorder struct {
	mock *MockBlock
}

// NewMockBlock creates a new mock instance.
func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &MockBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlock) EXPECT() *MockBlockMockRecorder {
	return m.recorder
}

// DeleteVolume mocks base method.
func (m *MockBlock) DeleteVolume(ctx context.Context, zone scw.Zone, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, zone, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockBlockMockRecorder) DeleteVolume(ctx, zone, volumeID any) *MockBlockDeleteVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockBlock)(nil).DeleteVolume), ctx, zone, volumeID)
	return &MockBlockDeleteVolumeCall{Call: call}
}

// MockBlockDeleteVolumeCall wrap *gomock.Call
type MockBlockDeleteVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockDeleteVolumeCall) Return(arg0 error) *MockBlockDeleteVolumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockDeleteVolumeCall) Do(f func(context.Context, scw.Zone, string) error) *MockBlockDeleteVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockDeleteVolumeCall) DoAndReturn(f func(context.Context, scw.Zone, string) error) *MockBlockDeleteVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindVolume mocks base method.
func (m *MockBlock) FindVolume(ctx context.Context, zone scw.Zone, tags []string) (*block.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVolume", ctx, zone, tags)
	ret0, _ := ret[0].(*block.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVolume indicates an expected call of FindVolume.
func (mr *MockBlockMockRecorder) FindVolume(ctx, zone, tags any) *MockBlockFindVolumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVolume", reflect.TypeOf((*MockBlock)(nil).FindVolume), ctx, zone, tags)
	return &MockBlockFindVolumeCall{Call: call}
}

// MockBlockFindVolumeCall wrap *gomock.Call
type MockBlockFindVolumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockFindVolumeCall) Return(arg0 *block.Volume, arg1 error) *MockBlockFindVolumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockFindVolumeCall) Do(f func(context.Context, scw.Zone, []string) (*block.Volume, error)) *MockBlockFindVolumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockFindVolumeCall) DoAndReturn(f func(context.Context, scw.Zone, []string) (*block.Volume, error)) *MockBlockFindVolumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVolumeIOPS mocks base method.
func (m *MockBlock) UpdateVolumeIOPS(ctx context.Context, zone scw.Zone, volumeID string, iops int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeIOPS", ctx, zone, volumeID, iops)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolumeIOPS indicates an expected call of UpdateVolumeIOPS.
func (mr *MockBlockMockRecorder) UpdateVolumeIOPS(ctx, zone, volumeID, iops any) *MockBlockUpdateVolumeIOPSCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeIOPS", reflect.TypeOf((*MockBlock)(nil).UpdateVolumeIOPS), ctx, zone, volumeID, iops)
	return &MockBlockUpdateVolumeIOPSCall{Call: call}
}

// MockBlockUpdateVolumeIOPSCall wrap *gomock.Call
type MockBlockUpdateVolumeIOPSCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockUpdateVolumeIOPSCall) Return(arg0 error) *MockBlockUpdateVolumeIOPSCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockUpdateVolumeIOPSCall) Do(f func(context.Context, scw.Zone, string, int64) error) *MockBlockUpdateVolumeIOPSCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockUpdateVolumeIOPSCall) DoAndReturn(f func(context.Context, scw.Zone, string, int64) error) *MockBlockUpdateVolumeIOPSCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVolumeTags mocks base method.
func (m *MockBlock) UpdateVolumeTags(ctx context.Context, zone scw.Zone, volumeID string, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeTags", ctx, zone, volumeID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVolumeTags indicates an expected call of UpdateVolumeTags.
func (mr *MockBlockMockRecorder) UpdateVolumeTags(ctx, zone, volumeID, tags any) *MockBlockUpdateVolumeTagsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeTags", reflect.TypeOf((*MockBlock)(nil).UpdateVolumeTags), ctx, zone, volumeID, tags)
	return &MockBlockUpdateVolumeTagsCall{Call: call}
}

// MockBlockUpdateVolumeTagsCall wrap *gomock.Call
type MockBlockUpdateVolumeTagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBlockUpdateVolumeTagsCall) Return(arg0 error) *MockBlockUpdateVolumeTagsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBlockUpdateVolumeTagsCall) Do(f func(context.Context, scw.Zone, string, []string) error) *MockBlockUpdateVolumeTagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBlockUpdateVolumeTagsCall) DoAndReturn(f func(context.Context, scw.Zone, string, []string) error) *MockBlockUpdateVolumeTagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
