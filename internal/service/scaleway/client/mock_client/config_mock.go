// Code generated by MockGen. DO NOT EDIT.
// Source: ../config.go
//
// Generated by this command:
//
//	mockgen -destination config_mock.go -package mock_client -source ../config.go -typed
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
	isgomock struct{}
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetSecretKey mocks base method.
func (m *MockConfig) GetSecretKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSecretKey indicates an expected call of GetSecretKey.
func (mr *MockConfigMockRecorder) GetSecretKey() *MockConfigGetSecretKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretKey", reflect.TypeOf((*MockConfig)(nil).GetSecretKey))
	return &MockConfigGetSecretKeyCall{Call: call}
}

// MockConfigGetSecretKeyCall wrap *gomock.Call
type MockConfigGetSecretKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigGetSecretKeyCall) Return(arg0 string) *MockConfigGetSecretKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigGetSecretKeyCall) Do(f func() string) *MockConfigGetSecretKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigGetSecretKeyCall) DoAndReturn(f func() string) *MockConfigGetSecretKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
